{"2pack": [{"feed_url": "https://helm.sh/blog/index.xml", "entries": [{"title": "Helm @ KubeCon + CloudNativeCon EU '25", "link": "https://helm.sh/blog/helm-at-kubecon-eu-25/", "published": "2025-03-31T00:00:00", "summary": "<p>It's that time of the year again \u2013 the Helm team is headed to KubeCon + CloudNativeCon EU '25 in London, UK this week from April 1 - 4! Helm 4 is in the works for later this year so be sure to join the conversation with our maintainers during our talk sessions and at our Helm booth in the Project Pavilion! See below for more details on all Helm-related activies throughout the week.</p>"}]}, {"feed_url": "https://www.hashicorp.com/blog/products/terraform/feed.xml", "entries": [{"title": "HCP Terraform adds public Terraform module and provider management via organizations", "link": "https://www.hashicorp.com/blog/hcp-terraform-adds-public-terraform-module-provider-management-via-organizations", "published": "2025-05-13T19:00:00", "summary": "You can now manage your Terraform Registry artifacts within your HCP Terraform organization, simplifying and securing the ownership and management process."}, {"title": "Terraform AWS provider tops 4 billion downloads, 6.0 now in public beta", "link": "https://www.hashicorp.com/blog/terraform-aws-provider-tops-4-billion-downloads-6-0-now-in-public-beta", "published": "2025-05-06T17:00:00", "summary": "HashiCorp and AWS continue to support the widespread demand for standardized infrastructure lifecycle management with the Terraform AWS provider 6.0."}, {"title": "The AWS GameDay challenge with Terraform", "link": "https://www.hashicorp.com/blog/the-aws-gameday-challenge-with-terraform", "published": "2025-05-05T19:00:00", "summary": "What if learning Terraform was a fun game you could play with your friends?"}, {"title": "Announcing HCP Terraform Premium: Infrastructure Lifecycle Management at scale", "link": "https://www.hashicorp.com/blog/announcing-hcp-terraform-premium-infrastructure-lifecycle-management-at-scale", "published": "2025-05-01T17:00:00", "summary": "HCP Terraform Premium offers additional features on top of Standard and Plus plans that focus on private infrastructure and module lifecycle management."}, {"title": "Terraform now supports multiple team tokens", "link": "https://www.hashicorp.com/blog/terraform-now-supports-multiple-team-tokens", "published": "2025-04-28T19:00:00", "summary": "Teams in HCP Terraform can now generate multiple API tokens per team, making multi-pipeline management easier and more secure."}, {"title": "AWS and AWSCC Terraform providers: Better together", "link": "https://www.hashicorp.com/blog/aws-and-awscc-terraform-providers-better-together", "published": "2025-04-24T16:00:00", "summary": "Manage your cloud infrastructure with the AWS and AWSCC Terraform providers and view strategies on how to move state between providers."}, {"title": "Protect data privacy in Amazon Bedrock with Vault", "link": "https://www.hashicorp.com/blog/protect-data-privacy-in-amazon-bedrock-with-vault", "published": "2025-04-01T16:00:00", "summary": "This demo shows how Vault transit secrets engine protects data used for RAG in an Amazon Bedrock Knowledge Base created by Terraform."}, {"title": "Preventative beats reactive: Modern risk management for infrastructure vulnerabilities", "link": "https://www.hashicorp.com/blog/preventative-beats-reactive-modern-risk-management-infrastructure-vulns", "published": "2025-03-27T16:00:00", "summary": "Vulnerability scanning is a last line of defense. Your first line should be preventative risk management strategies that shift security left and narrow the window for exploits."}, {"title": "Ace your Terraform Professional exam: 5 tips from certified pros", "link": "https://www.hashicorp.com/blog/ace-your-terraform-professional-exam-5-tips-from-certified-pros", "published": "2025-03-25T16:00:00", "summary": "Three HashiCorp Certified: Terraform Authoring & Ops pros share their advice for preparing for and completing the certification exam."}, {"title": "Unlocking the potential of Microsoft Fabric with Terraform", "link": "https://www.hashicorp.com/blog/unlocking-the-potential-of-microsoft-fabric-with-terraform", "published": "2025-03-24T16:00:00", "summary": "Streamline your data platform infrastructure with HashiCorp and Microsoft using the Terraform provider for Microsoft Fabric."}, {"title": "Disaster recovery strategies with Terraform", "link": "https://www.hashicorp.com/blog/disaster-recovery-strategies-with-terraform", "published": "2025-03-19T16:00:00", "summary": "Learn how Terraform can help play a key role in disaster recovery strategies by simplifying and accelerating the provisioning of DR related infrastructure, while simultaneously reducing costs."}]}, {"feed_url": "https://www.docker.com/blog/feed", "entries": [{"title": "Securing Model Context Protocol: Safer Agentic AI with Containers", "link": "https://www.docker.com/blog/whats-next-for-mcp-security/", "published": "2025-05-06T18:38:36", "summary": "Model Context Protocol (MCP) tools remain primarily in the hands of early adopters, but broader adoption is accelerating. Alongside this growth, MCP security concerns are becoming more urgent. By increasing agent autonomy, MCP tools introduce new risks related to misalignment between agent behavior and user expectations and uncontrolled execution. These systems also present a novel..."}, {"title": "Introducing Docker MCP Catalog and Toolkit: The Simple and Secure Way to Power AI Agents with MCP", "link": "https://www.docker.com/blog/announcing-docker-mcp-catalog-and-toolkit-beta/", "published": "2025-05-05T15:57:02", "summary": "Model Context Protocols (MCPs) are quickly becoming the standard for connecting AI agents to external tools, but the developer experience hasn\u2019t caught up. Discovery is fragmented, setup is clunky, and security is too often bolted on last. Fixing this experience isn\u2019t a solo mission\u2014it will take an industry-wide effort. A secure, scalable, and trusted MCP..."}, {"title": "Simplifying Enterprise Management with Docker Desktop on the Microsoft Store", "link": "https://www.docker.com/blog/docker-desktop-on-microsoft-store/", "published": "2025-05-01T23:13:08", "summary": "We\u2019re excited to announce that Docker Desktop is now available on the Microsoft Store! This new distribution channel enhances both the installation and update experience for individual developers while significantly simplifying management for enterprise IT teams. This milestone reinforces our commitment to Windows, our most widely used platform among Docker Desktop users. By partnering with..."}, {"title": "Update on the Docker DX extension for VS Code", "link": "https://www.docker.com/blog/docker-dx-extension-for-vs-code-update/", "published": "2025-04-30T20:52:51", "summary": "It\u2019s now been a couple of weeks since we released the new Docker DX extension for Visual Studio Code. This launch reflects a deeper collaboration between Docker and Microsoft to better support developers building containerized applications. Over the past few weeks, you may have noticed some changes to your Docker extension in VS Code. We..."}, {"title": "Docker Desktop 4.41: Docker Model Runner supports Windows, Compose, and Testcontainers integrations, Docker Desktop on the Microsoft Store", "link": "https://www.docker.com/blog/docker-desktop-4-41/", "published": "2025-04-29T20:20:25", "summary": "Big things are happening in Docker Desktop 4.41! Whether you're building the next AI breakthrough or managing development environments at scale, this release is packed with tools to help you move faster and collaborate smarter. From bringing Docker Model Runner to Windows (with NVIDIA GPU acceleration!), Compose and Testcontainers, to new ways to manage models..."}, {"title": "How to build and deliver an MCP server for production", "link": "https://www.docker.com/blog/build-to-prod-mcp-servers-with-docker/", "published": "2025-04-25T16:04:18", "summary": "In December of 2024, we published a blog with Anthropic about their totally new spec (back then) to run tools with AI agents: the Model Context Protocol, or MCP. Since then, we\u2019ve seen an explosion in developer appetite to build, share, and run their tools with Agentic AI - all using MCP. We\u2019ve seen new..."}, {"title": "Dockerizing MCP \u2013 Bringing Discovery, Simplicity, and Trust to the Ecosystem", "link": "https://www.docker.com/blog/introducing-docker-mcp-catalog-and-toolkit/", "published": "2025-04-22T13:02:14", "summary": "AI agents are moving fast\u2014from labs to real-world apps. And as they go from generating text to taking real action, the Model Context Protocol (MCP) has emerged as the de facto standard for connecting agents to tools. MCP is exciting. It\u2019s simple, modular, and built on web-native principles. We believe it has the potential to..."}, {"title": "Docker Desktop for Mac: QEMU Virtualization Option to be Deprecated in 90 Days", "link": "https://www.docker.com/blog/docker-desktop-for-mac-qemu-virtualization-option-to-be-deprecated-in-90-days/", "published": "2025-04-15T16:10:50", "summary": "We are announcing the upcoming deprecation of QEMU as a virtualization option for Docker Desktop on Apple Silicon Macs. After serving as our legacy virtualization solution during the early transition to Apple Silicon, QEMU will be fully deprecated 90 days from today, on July 14, 2025. This deprecation does not affect QEMU's role in emulating..."}, {"title": "New Docker Extension for Visual Studio Code", "link": "https://www.docker.com/blog/docker-dx-extension-for-vs-code/", "published": "2025-04-11T00:10:20", "summary": "Today, we are excited to announce the release of a new, open-source Docker Language Server and Docker DX VS Code extension. In a joint collaboration between Docker and the Microsoft Container Tools team, this new integration enhances the existing Docker extension with improved Dockerfile linting, inline image vulnerability checks, Docker Bake file support, and outlines..."}, {"title": "Run Gemma 3 with Docker Model Runner: Fully Local GenAI Developer Experience", "link": "https://www.docker.com/blog/run-gemma-3-locally-with-docker-model-runner/", "published": "2025-04-09T13:01:39", "summary": "The landscape of generative AI development is evolving rapidly but comes with significant challenges. API usage costs can quickly add up, especially during development. Privacy concerns arise when sensitive data must be sent to external services. And relying on external APIs can introduce connectivity issues and latency. Enter Gemma 3 and Docker Model Runner, a..."}]}], "sha2li": [{"feed_url": "https://www.sonatype.com/blog/rss.xml", "entries": [{"title": "The OWASP LLM Top 10 and Sonatype: Supply chain security", "link": "https://www.sonatype.com/blog/the-owasp-llm-top-10-and-sonatype-supply-chain-security", "published": "2025-05-14T13:00:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/the-owasp-llm-top-10-and-sonatype-supply-chain-security\" title=\"\"> <img alt=\"The OWASP LLM Top 10 and Sonatype: Supply chain security\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/file%20%281%29-May-07-2025-07-03-13-3705-PM.jpeg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>The rise of AI has unlocked unprecedented opportunities across industries, from automating tedious tasks to <a href=\"https://www.sonatype.com/solutions/open-source-ai\"><span>accelerating software development</span></a> and transforming how applications are built and maintained. However, AI has also exposed critical vulnerabilities, ethical concerns, data privacy risks, and the potential for misuse or bias in decision-making processes.</p>"}, {"title": "Enhancing software supply chain security in financial services with Sonatype and AWS", "link": "https://www.sonatype.com/blog/enhancing-software-supply-chain-security-in-financial-services-with-sonatype-and-aws", "published": "2025-05-13T13:00:00", "summary": "<p>Financial services organizations prioritize software security as part of their risk management strategy. Open source components accelerate software development, and organizations benefit from implementing appropriate security controls to manage <a href=\"https://www.sonatype.com/resources/guides/understand-open-source-risks\"><span>potential associated risks</span></a>.</p>"}, {"title": "Sonatype at RSAC 2025", "link": "https://www.sonatype.com/blog/sonatype-at-rsac-2025", "published": "2025-05-08T17:00:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/sonatype-at-rsac-2025\" title=\"\"> <img alt=\"Sonatype at RSAC 2025\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/GettyImages-1441917440-1.jpg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>The RSA Conference (RSAC) is always a major event for the cybersecurity community, and this year was no exception.</p>"}, {"title": "Sonatype welcomes Antoine Harden as Regional Vice President of Federal", "link": "https://www.sonatype.com/blog/sonatype-welcomes-antoine-harden-as-regional-vice-president-of-federal", "published": "2025-05-07T13:00:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/sonatype-welcomes-antoine-harden-as-regional-vice-president-of-federal\" title=\"\"> <img alt=\"Sonatype welcomes Antoine Harden as Regional Vice President of Federal\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/Antoine%20Harden%20Welcome%20social%20%281256%20x%20785%20px%29%20%281%29.jpg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>Sonatype is thrilled to announce the addition of Antoine Harden as our Regional Vice President of <a href=\"https://www.sonatype.com/solutions/government\"><span>Federal</span></a>. With a proven track record of leadership and innovation, Antoine will spearhead sales efforts across the Department of Defense, the intelligence community, and civilian agencies.</p>"}, {"title": "Malicious package detection: Sonatype secures software supply chains", "link": "https://www.sonatype.com/blog/malicious-package-detection-sonatype-protects-software-supply-chains", "published": "2025-05-05T14:00:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/malicious-package-detection-sonatype-protects-software-supply-chains\" title=\"\"> <img alt=\"Malicious package detection: Sonatype secures software supply chains\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/file-May-02-2025-02-45-53-4487-PM.jpeg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>Malicious packages present a growing danger to <a href=\"https://www.sonatype.com/resources/articles/what-is-software-supply-chain\"><span>software supply chains</span></a>. From typosquatting attacks to sophisticated <a href=\"https://www.sonatype.com/resources/articles/open-source-malware\"><span>malware hidden within open source components</span></a>, detecting and preventing malicious packages has become essential for ensuring the integrity and security of software.</p>"}, {"title": "Revived CryptoJS library is a crypto stealer in disguise", "link": "https://www.sonatype.com/blog/revived-cryptojs-library-is-a-crypto-stealer-in-disguise", "published": "2025-04-30T14:00:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/revived-cryptojs-library-is-a-crypto-stealer-in-disguise\" title=\"\"> <img alt=\"Revived CryptoJS library is a crypto stealer in disguise\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/file%20%282%29-Apr-29-2025-01-33-58-6552-PM.jpeg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>An illicit npm package called '<a href=\"https://archive.md/kuH1G\">crypto-encrypt-ts</a>' may appear to revive the unmaintained but vastly popular CryptoJS library, but what it actually does is peek into your crypto wallet and exfiltrate your secrets to threat actors.</p>"}, {"title": "How SBOMs power secure software acquisition | Sonatype Blog", "link": "https://www.sonatype.com/blog/how-sboms-power-secure-software-acquisition", "published": "2025-04-25T20:50:51", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/how-sboms-power-secure-software-acquisition\" title=\"\"> <img alt=\"Digital chain created with binary code representing the software supply chain\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/file%20%281%29-Apr-25-2025-06-48-32-0495-PM.jpeg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>CISA's <a href=\"https://www.cisa.gov/news-events/news/building-resilient-ict-supply-chains-8th-annual-supply-chain-integrity-month\"><span>Supply Chain Integrity Month</span></a> reminds us of an undeniable truth about modern software development: transparency in software supply chains is no longer optional. The theme of week 4 is \"Transparency: Securing Hardware and Software Across the Supply Chain.\"&nbsp;With more than 90% of modern software applications relying on open source, this message couldn't be more timely. Transparency is at the heart of the current trend in legislative action, which puts a spotlight on the way agencies evaluate, purchase, and monitor software.</p>"}, {"title": "Build smarter with AI and your software supply chain", "link": "https://www.sonatype.com/blog/build-smarter-with-ai-and-your-software-supply-chain", "published": "2025-04-25T12:30:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/build-smarter-with-ai-and-your-software-supply-chain\" title=\"\"> <img alt=\"Build smarter with AI and your software supply chain\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/file-Apr-23-2025-08-46-25-2650-PM.jpeg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>AI adoption is reshaping how software gets built. From coding assistants to full-fledged agentic AI applications, developers now routinely rely on artificial intelligence in their workflows. But a subtler shift is also underway: the rise of <a href=\"https://www.sonatype.com/solutions/open-source-ai\"><span>open source AI/ML</span></a> models as foundational components in modern software development.</p>"}, {"title": "\u200bElevate your organization's success: Submissions now open for the 2025 Sonatype Elevate Awards", "link": "https://www.sonatype.com/blog/elevate-your-organizations-success-submissions-now-open-for-the-2025-sonatype-elevate-awards", "published": "2025-04-22T15:00:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/elevate-your-organizations-success-submissions-now-open-for-the-2025-sonatype-elevate-awards\" title=\"\"> <img alt=\"\u200bElevate your organization's success: Submissions now open for the 2025 Sonatype Elevate Awards\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/elevate-blog-hero.png\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>We are thrilled to announce that the 2025 <a href=\"https://www.sonatype.com/elevate-awards\"><span>Sonatype Elevate Awards</span></a> are officially open for submissions.</p>"}, {"title": "Shadow downloads \u2013 How developers have become the new perimeter", "link": "https://www.sonatype.com/blog/shadow-downloads-how-developers-have-become-the-new-perimeter", "published": "2025-04-21T14:45:00", "summary": "<div class=\"hs-featured-image-wrapper\"> \n <a class=\"hs-featured-image-link\" href=\"https://www.sonatype.com/blog/shadow-downloads-how-developers-have-become-the-new-perimeter\" title=\"\"> <img alt=\"Shadow downloads \u2013 How developers have become the new perimeter\" class=\"hs-featured-image\" src=\"https://www.sonatype.com/hubfs/file%20%281%29-Apr-21-2025-03-26-00-9502-PM.jpeg\" style=\"width: auto !important; float: left; margin: 0 15px 15px 0;\" /> </a> \n</div> \n<p>With great power comes great responsibility.</p>"}]}, {"feed_url": "https://github.com/rust-lang/crates.io/discussions/categories/announcements.atom", "entries": []}, {"feed_url": "https://github.blog/changelog/label/npm/feed/", "entries": []}, {"feed_url": "https://blog.rust-lang.org/feed.xml", "entries": [{"title": "Announcing Google Summer of Code 2025 selected projects", "link": "https://blog.rust-lang.org/2025/05/08/gsoc-2025-selected-projects/", "published": "2025-05-08T00:00:00", "summary": "<p>The Rust Project is <a href=\"https://blog.rust-lang.org/2025/03/03/Rust-participates-in-GSoC-2025.html\">participating</a> in <a href=\"https://summerofcode.withgoogle.com\">Google Summer of Code (GSoC)</a> again this year. GSoC is a global program organized by Google that is designed to bring new contributors to the world of open-source.</p>\n<p>In March, we published a list of <a href=\"https://github.com/rust-lang/google-summer-of-code\">GSoC project ideas</a>, and started discussing these projects with potential GSoC applicants on our <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/421156-gsoc\">Zulip</a>. We had many interesting discussions with the potential contributors, and even saw some of them making non-trivial contributions to various Rust Project repositories, even before GSoC officially started!</p>\n<p>After the initial discussions, GSoC applicants prepared and submitted their project proposals. We received 64 proposals this year, almost exactly the same number as last year. We are happy to see that there was again so much interest in our projects.</p>\n<p>A team of mentors primarily composed of Rust Project contributors then thoroughly examined the submitted proposals. GSoC required us to produce a ranked list of the best proposals, which was a challenging task in itself since Rust is a big project with many priorities! Same as last year, we went through several rounds of discussions and considered many factors, such as prior conversations with the given applicant, the quality of their proposal, the importance of the proposed project for the Rust Project and its wider community, but also the availability of mentors, who are often volunteers and thus have limited time available for mentoring.</p>\n<p>As is usual in GSoC, even though some project topics received multiple proposals<sup class=\"footnote-reference\" id=\"fr-most-popular-1\"><a href=\"https://blog.rust-lang.org/2025/05/08/gsoc-2025-selected-projects/#fn-most-popular\">1</a></sup>, we had to pick only one proposal per project topic. We also had to choose between great proposals targeting different work to avoid overloading a single mentor with multiple projects.</p>\n<p>In the end, we narrowed the list down to a smaller number of the best proposals that we could still realistically support with our available mentor pool. We submitted this list and eagerly awaited how many of them would be accepted into GSoC.</p>\n<h2 id=\"selected-projects\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/05/08/gsoc-2025-selected-projects/#selected-projects\"></a>\nSelected projects</h2>\n<p>On the 8th of May, Google has announced the accepted projects. We are happy to share that <strong>19</strong> Rust Project proposals were accepted by Google for Google Summer of Code 2025. That's a lot of projects, which makes us super excited about GSoC 2025!</p>\n<p>Below you can find the list of accepted proposals (in alphabetical order), along with the names of their authors and the assigned mentor(s):</p>\n<ul>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/USQvru7i\">ABI/Layout handling for the automatic differentiation feature</a></strong>\tby <a href=\"https://github.com/sa4dus\">Marcelo Dom\u00ednguez</a>, mentored by <a href=\"https://github.com/ZuseZ4\">Manuel Drehwald</a> and <a href=\"https://github.com/oli-obk\">Oli Scherer</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/UYWEKUkd\">Add safety contracts</a></strong> by <a href=\"https://github.com/dawidl022\">Dawid Lachowicz</a>, mentored by <a href=\"https://github.com/tautschnig\">Michael Tautschnig</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/KmfCY0i6\">Bootstrap of rustc with rustc_codegen_gcc</a></strong> by <a href=\"https://github.com/FractalFir\">Micha\u0142 Kostrubiec</a>, mentored by <a href=\"https://github.com/antoyo\">antoyo</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/nUt4PdAA\">Cargo: Build script delegation</a></strong> by <a href=\"https://github.com/namanlp\">Naman Garg</a>, mentored by <a href=\"https://github.com/epage\">Ed Page</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/5677hd6S\">Distributed and resource-efficient verification</a></strong> by <a href=\"https://github.com/zjp-CN\">Zhou Jiping</a>, mentored by <a href=\"https://github.com/tautschnig\">Michael Tautschnig</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/MMRSG9WU\">Enable Witness Generation in cargo-semver-checks</a></strong> by <a href=\"https://github.com/GlitchlessCode\">Talyn Veugelers</a>, mentored by <a href=\"https://github.com/obi1kenobi\">Predrag Gruevski</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/DeMQAjwi\">Extend behavioural testing of std::arch intrinsics</a></strong> by <a href=\"https://github.com/madhav-madhusoodanan\">Madhav Madhusoodanan</a>, mentored by <a href=\"https://github.com/amanieu\">Amanieu d'Antras</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/HlR12jqX\">Implement merge functionality in bors</a></strong> by <a href=\"https://github.com/Sakib25800\">Sakibul Islam</a>, mentored by <a href=\"https://github.com/kobzol\">Jakub Ber\u00e1nek</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/2KNHAlKz\">Improve bootstrap</a></strong> by <a href=\"https://github.com/Shourya742\">Shourya Sharma</a>, mentored by <a href=\"https://github.com/kobzol\">Jakub Ber\u00e1nek</a>, <a href=\"https://github.com/jieyouxu\">Jieyou Xu</a> and <a href=\"https://github.com/onur-ozkan\">Onur \u00d6zkan</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/ps99Kaqk\">Improve Wild linker test suites</a></strong> by <a href=\"https://github.com/lapla-cogito\">Kei Akiyama</a>, mentored by <a href=\"https://github.com/davidlattimore\">David Lattimore</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/SBW3GMno\">Improving the Rustc Parallel Frontend: Parallel Macro Expansion</a></strong> by <a href=\"https://github.com/LorrensP-2158466\">Lorrens</a>, mentored by <a href=\"https://github.com/sparrowlii\">Sparrow Li</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/qs2rDLG4\">Make cargo-semver-checks faster</a></strong> by <a href=\"https://github.com/CLIDragon\">JosephC</a>, mentored by <a href=\"https://github.com/obi1kenobi\">Predrag Gruevski</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/CpXV4kzH\">Make Rustup Concurrent</a></strong> by <a href=\"https://github.com/FranciscoTGouveia\">Francisco Gouveia</a>, mentored by <a href=\"https://github.com/rami3l\">rami3l</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/KP02lKL4\">Mapping the Maze of Rust's UI Test Suite with Established Continuous Integration Practices</a></strong> by <a href=\"https://github.com/oneirical\">Julien Robert</a>, mentored by <a href=\"https://github.com/jieyouxu\">Jieyou Xu</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/r3LkZkOy\">Modernising the libc Crate</a></strong> by <a href=\"https://github.com/mbyx\">Abdul Muiz</a>, mentored by <a href=\"https://github.com/tgross35\">Trevor Gross</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/76ekEjd1\">New proc-macro Server API for Rust-Analyzer</a></strong> by <a href=\"https://github.com/DriedYellowPeach\">Neil Wang</a>, mentored by <a href=\"https://github.com/veykril\">Lukas Wirth</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/3y9x5X8O\">Prepare stable_mir crate for publishing</a></strong> by <a href=\"https://github.com/makai410\">Makai</a>, mentored by <a href=\"https://github.com/celinval\">Celina Val</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/fBOCR2Sp\">Prototype an alternative architecture for cargo fix using cargo check</a></strong> by <a href=\"https://github.com/Pyr0de\">Glen Thalakottur</a>, mentored by <a href=\"https://github.com/epage\">Ed Page</a></li>\n<li><strong><a href=\"https://summerofcode.withgoogle.com/programs/2025/projects/fTDzc0sk\">Prototype Cargo Plumbing Commands</a></strong> by <a href=\"https://github.com/secona\">Vito Secona</a>, mentored by <a href=\"https://github.com/cassaundra\">Cassaundra</a></li>\n</ul>\n<p><strong>Congratulations to all applicants whose project was selected!</strong> The mentors are looking forward to working with you on these exciting projects to improve the Rust ecosystem. You can expect to hear from us soon, so that we can start coordinating the work on your GSoC projects.</p>\n<p>We would also like to thank all the applicants whose proposal was sadly not accepted, for their interactions with the Rust community and contributions to various Rust projects. There were some great proposals that did not make the cut, in large part because of limited mentorship capacity. However, even if your proposal was not accepted, we would be happy if you would consider contributing to the projects that got you interested, even outside GSoC! Our <a href=\"https://github.com/rust-lang/google-summer-of-code\">project idea list</a> is still actual and could serve as a general entry point for contributors that would like to work on projects that would help the Rust Project maintainers and the Rust ecosystem. Some of the <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/goals.html\">Rust Project Goals</a> are also looking for help.</p>\n<p>There is also a good chance we'll participate in GSoC next year as well (though we can't promise anything at this moment), so we hope to receive your proposals again in the future!</p>\n<p>The accepted GSoC projects will run for several months. After GSoC 2025 finishes (in autumn of 2025), we will publish a blog post in which we will summarize the outcome of the accepted projects.</p>\n<footer class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn-most-popular\">\n<p>The most popular project topic received seven different proposals! <a href=\"https://blog.rust-lang.org/2025/05/08/gsoc-2025-selected-projects/#fr-most-popular-1\">\u21a9</a></p>\n</li>\n</ol>\n</footer>"}, {"title": "Announcing rustup 1.28.2", "link": "https://blog.rust-lang.org/2025/05/05/Rustup-1.28.2/", "published": "2025-05-05T00:00:00", "summary": "<p>The rustup team is happy to announce the release of rustup version 1.28.2.\n<a href=\"https://rustup.rs\">Rustup</a> is the recommended tool to install <a href=\"https://www.rust-lang.org\">Rust</a>, a programming language that\nempowers everyone to build reliable and efficient software.</p>\n<h2 id=\"what-s-new-in-rustup-1-28-2\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/05/05/Rustup-1.28.2/#what-s-new-in-rustup-1-28-2\"></a>\nWhat's new in rustup 1.28.2</h2>\n<p>The headlines of this release are:</p>\n<ul>\n<li>\n<p>The cURL download backend and the native-tls TLS backend are now officially deprecated and\na warning will start to show up when they are used. <a href=\"https://github.com/rust-lang/rustup/pull/4277\">pr#4277</a></p>\n<ul>\n<li>\n<p>While rustup predates reqwest and rustls, the rustup team has long wanted to standardize on\nan HTTP + TLS stack with more components in Rust, which should increase security, potentially\nimprove performance, and simplify maintenance of the project.\nWith the default download backend already switched to reqwest since <a href=\"https://github.com/rust-lang/rustup/pull/1660\">2019</a>, the team\nthinks it is time to focus maintenance on the default stack powered by these two libraries.</p>\n</li>\n<li>\n<p>For people who have set <code>RUSTUP_USE_CURL=1</code> or <code>RUSTUP_USE_RUSTLS=0</code> in their environment to\nwork around issues with rustup, please try to unset these after upgrading to 1.28.2 and file\n<a href=\"https://github.com/rust-lang/rustup/issues/\">an issue</a> if you still encounter problems.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The version of <code>rustup</code> can be pinned when installing via <code>rustup-init.sh</code>, and\n<code>rustup self update</code> can be used to upgrade/downgrade rustup 1.28.2+ to a given version.\nTo do so, set the <code>RUSTUP_VERSION</code> environment variable to the desired version (for example <code>1.28.2</code>).\n<a href=\"https://github.com/rust-lang/rustup/pull/4259\">pr#4259</a></p>\n</li>\n<li>\n<p><code>rustup set auto-install disable</code> can now be used to disable automatic installation of the toolchain.\nThis is similar to the <code>RUSTUP_AUTO_INSTALL</code> environment variable introduced in 1.28.1 but with a\nlower priority. <a href=\"https://github.com/rust-lang/rustup/pull/4254\">pr#4254</a></p>\n</li>\n<li>\n<p>Fixed a bug in Nushell integration that might generate invalid commands in the shell configuration.\nReinstalling rustup might be required for the fix to work. <a href=\"https://github.com/rust-lang/rustup/pull/4265\">pr#4265</a></p>\n</li>\n</ul>\n<h2 id=\"how-to-update\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/05/05/Rustup-1.28.2/#how-to-update\"></a>\nHow to update</h2>\n<p>If you have a previous version of rustup installed, getting the new one is as easy as stopping\nany programs which may be using rustup (e.g. closing your IDE) and running:</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">$ rustup self update\n</span></code></pre>\n<p>Rustup will also automatically update itself at the end of a normal toolchain update:</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">$ rustup update\n</span></code></pre>\n<p>If you don't have it already, you can <a href=\"https://rustup.rs\">get rustup</a> from the appropriate page on our website.</p>\n<p>Rustup's documentation is also available in <a href=\"https://rust-lang.github.io/rustup/\">the rustup book</a>.</p>\n<h2 id=\"caveats\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/05/05/Rustup-1.28.2/#caveats\"></a>\nCaveats</h2>\n<p>Rustup releases can come with problems not caused by rustup itself but just due to having a new release.</p>\n<p>In particular, anti-malware scanners might block rustup or stop it from creating or copying\nfiles, especially when installing <code>rust-docs</code> which contains many small files.</p>\n<p>Issues like this should be automatically resolved in a few weeks when the anti-malware scanners are updated\nto be aware of the new rustup release.</p>\n<h2 id=\"thanks\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/05/05/Rustup-1.28.2/#thanks\"></a>\nThanks</h2>\n<p>Thanks again to all the <a href=\"https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md#detailed-changes\">contributors</a> who made this rustup release possible!</p>"}, {"title": "crates.io security incident: improperly stored session cookies", "link": "https://blog.rust-lang.org/2025/04/11/crates-io-security-session-cookies/", "published": "2025-04-11T00:00:00", "summary": "<p>Today the crates.io team discovered that the contents of the <code>cargo_session</code>\ncookie were being persisted to our error monitoring service,\n<a href=\"https://sentry.io/welcome/\">Sentry</a>, as part of event payloads sent when an\nerror occurs in the crates.io backend. The value of this cookie is a signed\nvalue that identifies the currently logged in user, and therefore these cookie\nvalues could be used to impersonate any logged in user.</p>\n<p>Sentry access is limited to a trusted subset of the crates.io team, Rust\ninfrastructure team, and the crates.io on-call rotation team, who already have\naccess to the production environment of crates.io. There is no evidence that\nthese values were ever accessed or used.</p>\n<p>Nevertheless, out of an abundance of caution, we have taken these actions\ntoday:</p>\n<ol>\n<li>We have <a href=\"https://github.com/rust-lang/crates.io/pull/10991\">merged and deployed a change to redact all cookie values from all\nSentry events</a>.</li>\n<li>We have invalidated all logged in sessions, thus making the cookies stored\nin Sentry useless. In effect, this means that every crates.io user has been\nlogged out of their browser session(s).</li>\n</ol>\n<p>Note that API tokens are <strong>not</strong> affected by this: they are transmitted using\nthe <code>Authorization</code> HTTP header, and were already properly redacted before\nevents were stored in Sentry. All existing API tokens will continue to work.</p>\n<p>We apologise for the inconvenience. If you have any further questions, please\ncontact us on\n<a href=\"https://rust-lang.zulipchat.com/#narrow/stream/318791-t-crates-io\">Zulip</a> or\n<a href=\"https://github.com/rust-lang/crates.io/discussions\">GitHub</a>.</p>"}, {"title": "March Project Goals Update", "link": "https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/", "published": "2025-04-08T00:00:00", "summary": "<p>The Rust project is currently working towards a <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/goals.html\">slate of 40 project goals</a>, with 3 of them designated as <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/goals.html#flagship-goals\">Flagship Goals</a>. This post provides selected updates on our progress towards these goals (or, in some cases, lack thereof). The full details for any particular goal are available in its associated <a href=\"https://github.com/rust-lang/rust-project-goals/issues?q=is%3Aissue%20state%3Aopen%20label%3AC-tracking-issue\">tracking issue on the rust-project-goals repository</a>.</p>\n<h2 id=\"flagship-goals\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#flagship-goals\"></a>\nFlagship goals</h2>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/105\"><strong>Bring the Async Rust experience closer to parity with sync Rust</strong></a></div>\n    <div><progress max=\"34\" value=\"5\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<p><strong>Why this goal?</strong> This work continues our drive to improve support for async programming in Rust. In 2024H2 we stabilized async closures; explored the generator design space; and began work on the <code>dynosaur</code> crate, an experimental proc-macro to provide dynamic dispatch for async functions in traits. In 2025H1 <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/async.html\">our plan</a> is to deliver (1) improved support for async-fn-in-traits, completely subsuming the functionality of the <a href=\"https://crates.io/crates/async-trait\"><code>async-trait</code> crate</a>; (2) progress towards sync and async generators, simplifying the creation of iterators and async data streams; (3) and improve the ergonomics of <code>Pin</code>, making lower-level async coding more approachable. These items together start to unblock the creation of the next generation of async libraries in the wider ecosystem, as progress there has been blocked on a stable solution for async traits and streams.</p>\n<p><strong>What has happened?</strong> <strong>Generators.</strong> Initial implementation work has started on an <code>iter!</code> macro experiment in <a href=\"https://github.com/rust-lang/rust/pull/137725\">https://github.com/rust-lang/rust/pull/137725</a>. Discussions have centered around whether the macro should accept blocks in addition to closures, whether thunk closures with an empty arguments list should implement <code>IntoIterator</code>, and whether blocks should evaluate to a type that is <code>Iterator</code> as well as <code>IntoIterator</code>. See the <a href=\"https://hackmd.io/iQDQ_J3MTzaKBhq1FTbToQ?view\">design meeting notes</a> for more.</p>\n<p><strong>dynosaur.</strong> We released <a href=\"https://github.com/spastorino/dynosaur/releases/tag/0.2.0\">dynosaur v0.2.0</a> with some critical bug fixes and one breaking change. We have several more breaking changes queued up for an 0.3 release line that we also use plan to use as a 1.0 candidate.</p>\n<p><strong>Pin ergonomics.</strong> <a href=\"https://github.com/rust-lang/rust/pull/135733\">https://github.com/rust-lang/rust/pull/135733</a> landed to implement <code>&amp;pin const self</code> and <code>&amp;pin mut self</code> sugars as part of the ongoing pin ergonomics experiment. Another PR is open with an early implementation of applying this syntax to borrowing expressions. There has been some discussion within parts of the lang team on whether to prefer this <code>&amp;pin mut T</code> syntax or <code>&amp;mut pin T</code>, the latter of which applies equally well to <code>Box&lt;pin T&gt;</code> but requires an edition.</p>\n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<br />\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/263\"><strong>Organize Rust All-Hands 2025</strong></a></div>\n    <div><progress max=\"28\" value=\"9\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<p><strong>Why this goal?</strong> May 15, 2025 marks the 10-year anniversary of Rust's 1.0 release; it also marks 10 years since the <a href=\"https://internals.rust-lang.org/t/announcing-the-subteams/2042\">creation of the Rust subteams</a>. At the time <a href=\"http://web.archive.org/web/20150517235608/http://www.rust-lang.org/team.html\">there were 6 Rust teams with 24 people in total</a>. There are now 57 teams with 166 people. In-person All Hands meetings are an effective way to help these maintainers get to know one another with high-bandwidth discussions. This year, the Rust project will be coming together for <a href=\"https://2025.rustweek.org\">RustWeek 2025</a>, a joint event organized with <a href=\"https://2025.rustweek.org/about/\">RustNL</a>. Participating project teams will use the time to share knowledge, make plans, or just get to know one another better. One particular goal for the All Hands is reviewing a draft of the <a href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/./rust-vision-doc.md\">Rust Vision Doc</a>, a document that aims to take stock of where Rust is and lay out high-level goals for the next few years.</p>\n<p><strong>What has happened?</strong></p>\n<blockquote>\n<ul>\n<li>Invite more guests, after deciding on who else to invite. (To be discussed today in the council meeting.)</li>\n<li>Figure out if we can fund the travel+hotel costs for guests too. (To be discussed today in the council meeting.)</li>\n</ul>\n</blockquote>\n<p><a href=\"https://github.com/m-ou-se\">Mara</a> has asked all attendees for suggestions for guests to invite. Based on that, <a href=\"https://github.com/m-ou-se\">Mara</a> has invited roughly 20 guests so far. Only two of them needed funding for their travel, which we can cover from the same travel budget.</p>\n<blockquote>\n<ul>\n<li>Open the call for proposals for talks for the Project Track (on wednesday) as part of the RustWeek conference.</li>\n</ul>\n</blockquote>\n<p>The Rust Project Track at RustWeek has been published: <a href=\"https://rustweek.org/schedule/wednesday/\">https://rustweek.org/schedule/wednesday/</a></p>\n<p>This track is filled with talks that are relevant to folks attending the all-hands afterwards.</p>\n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/263#issuecomment-2769198839\">Comment by @m-ou-se posted on 2025-04-01:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<blockquote>\n<ul>\n<li>Invite more guests, after deciding on who else to invite. (To be discussed today in the council meeting.)</li>\n<li>Figure out if we can fund the travel+hotel costs for guests too. (To be discussed today in the council meeting.)</li>\n</ul>\n</blockquote>\n<p>I've asked all attendees for suggestions for guests to invite. Based on that, I've invited roughly 20 guests so far. Only two of them needed funding for their travel, which we can cover from the same travel budget.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<br />\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/116\"><strong>Stabilize tooling needed by Rust for Linux</strong></a></div>\n    <div><progress max=\"26\" value=\"11\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<p><strong>Why this goal?</strong> This goal continues our work from 2024H2 in supporting the <a href=\"https://rust-for-linux.com/\">experimental support for Rust development in the Linux kernel</a>. Whereas in 2024H2 we were focused on stabilizing required language features, our focus in 2025H1 is stabilizing compiler flags and tooling options. We will (1) implement <a href=\"https://github.com/rust-lang/rfcs/pull/3716\">RFC #3716</a> which lays out a design for ABI-modifying flags; (2) take the first step towards stabilizing <a href=\"https://doc.rust-lang.org/cargo/reference/unstable.html#build-std\"><code>build-std</code></a> by <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/build-std.html\">creating a stable way to rebuild core with specific compiler options</a>; (3) extending rustdoc, clippy, and the compiler with features that extract metadata for integration into other build systems (in this case, the kernel's build system).</p>\n<p><strong>What has happened?</strong> Most of the major items are in an iteration phase. The rustdoc changes for exporting doctests are the furthest along, with a working prototype; the RFL project has been integrating that prototype and providing feedback. Clippy stabilization now has a pre-RFC and there is active iteration towards support for build-std.</p>\n<p>Other areas of progress:</p>\n<ul>\n<li>We have an <a href=\"https://github.com/rust-lang/rust/pull/136926\">open PR</a> to stabilize <code>-Zdwarf-version</code>.</li>\n<li>The lang and types team have been discussing the best path forward to resolve <a href=\"https://github.com/rust-lang/rust/issues/136702\">#136702</a>. This is a soundness concern that was raised around certain casts, specifically, casts from a type like <code>*mut dyn Foo + '_</code> (with some lifetime) to <code>*mut dyn Foo + 'static</code> (with a static lifetime). Rust's defaulting rules mean that the latter is more commonly written with a defaulted lifetime, i.e., just <code>*mut dyn Foo</code>, which makes this an easy footgun. This kind of cast has always been dubious, as it disregards the lifetime in a rather subtle way, but when combined with arbitrary self types it permits users to disregard safety invariants making it hard to enforce soundness (see <a href=\"https://github.com/rust-lang/rust/issues/136702\">#136702</a> for details). The current proposal under discussion in <a href=\"https://github.com/rust-lang/rust/issues/136776\">#136776</a> is to make this sort of cast a hard error at least outside of an unsafe block; we evaluated the feasibility of doing a future-compatibility-warning and found it was infeasible. Crater runs suggest very limited fallout from this soundness fix but discussion continues about the best set of rules to adopt so as to balance minimizing fallout with overall language simplicity.</li>\n</ul>\n<!-- markdown separator --> \n<details>\n2 detailed updates available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/116#issuecomment-2721136744\">Comment by @nikomatsakis posted on 2025-03-13:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update from our 2025-03-12 meeting (<a href=\"https://hackmd.io/@rust-lang-team/S181TSknyl\">full minutes</a>):</p>\n<ul>\n<li>RFL team requests someone to look at <a href=\"https://github.com/rust-lang/rust/pull/138368\">#138368</a> which is needed by kernel, <a href=\"https://github.com/davidtwco\">@davidtwco</a> to do so.</li>\n<li><code>-Zbinary-dep-info</code> may not be needed; RFL may be able to emulate it.</li>\n<li><code>rustdoc</code> changes for exporting doctests are being incorporated. <a href=\"https://github.com/GuillaumeGomez\">@GuillaumeGomez</a> is working on the kernel side of the feature too. <a href=\"https://github.com/ojeda\">@ojeda</a> thinks it would be a good idea to do it in a way that does not tie both projects too much, so that <code>rustdoc</code> has more flexibility to change the output later on.</li>\n<li><a href=\"https://hackmd.io/@flip1995/By87NXIc1g\">Pre-RFC</a> authored for clippy stabilization.</li>\n<li>Active iteration on the build-std design; feedback being provided by cargo team.</li>\n<li><a href=\"https://github.com/wesleywiser\">@wesleywiser</a> sent a <a href=\"https://github.com/rust-lang/rust/pull/136926\">PR to stabilize <code>-Zdwarf-version</code></a>.</li>\n<li>RfL doesn't use <code>cfg(no_global_oom_handling)</code> anymore. Soon, stable/LTS kernels that support several Rust versions will not use it either. Thus upstream Rust could potentially remove the <code>cfg</code> without breaking Linux, though other users like Windows may be still using it (<a href=\"https://rust-lang.zulipchat.com/#narrow/channel/219381-t-libs/topic/no_global_oom_handling.20removal/with/498600545\">#<strong>t-libs&gt;no_global_oom_handling removal</strong></a>).</li>\n<li>Some discussion about best way forward for disabling orphan rule to allow experimentation with no firm conclusion.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/116#issuecomment-2755502098\">Comment by @nikomatsakis posted on 2025-03-26:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Updates from <a href=\"https://hackmd.io/@rust-lang-team/H1hZmpW6ke\">today's meeting</a>:</p>\n<h3 id=\"finalizing-2024h2-goals\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#finalizing-2024h2-goals\"></a>\nFinalizing 2024h2 goals</h3>\n<ul>\n<li>asm-goto is now stabilized! will be released in 1.87.</li>\n<li>asm-const has a <a href=\"https://github.com/rust-lang/rust/pull/138618\">preliminary impl</a>, gcc support is needed.</li>\n<li>While not used in RFL, <code>naked_asm</code> is not on the list but it will be moving forward for stabilization. It suffers from the same LLVM bug as <code>global_asm</code> forgetting target feature flags.</li>\n</ul>\n<h3 id=\"abi-modifying-compiler-flags\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#abi-modifying-compiler-flags\"></a>\nABI-modifying compiler flags</h3>\n<ul>\n<li>Andrew Zhogin has opened a draft PR (<a href=\"https://github.com/rust-lang/rust/pull/138736\">https://github.com/rust-lang/rust/pull/138736</a>) following Alice's issue about which santisers should be modifiers (<a href=\"https://github.com/rust-lang/rust/issues/138453\">https://github.com/rust-lang/rust/issues/138453</a>)</li>\n</ul>\n<h3 id=\"extract-dependency-information-configure-no-std-externally-zcrate-attr\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#extract-dependency-information-configure-no-std-externally-zcrate-attr\"></a>\nExtract dependency information, configure no-std externally (-Zcrate-attr)</h3>\n<ul>\n<li>We decided we don't need to be able to extract dependency information</li>\n<li><code>-Zcrate-attr</code> has an RFC from jyn: <a href=\"https://github.com/rust-lang/rfcs/pull/3791\">https://github.com/rust-lang/rfcs/pull/3791</a></li>\n</ul>\n<h3 id=\"rustdoc-features-to-extract-doc-tests\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#rustdoc-features-to-extract-doc-tests\"></a>\nRustdoc features to extract doc tests</h3>\n<ul>\n<li>No update.</li>\n</ul>\n<h3 id=\"clippy-configuration\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#clippy-configuration\"></a>\nClippy configuration</h3>\n<ul>\n<li><a href=\"https://hackmd.io/@flip1995/By87NXIc1g\">Pre-RFC</a> was published but hasn't (to our knowledge) made progress. Would be good to sync up on next steps with <a href=\"https://github.com/flip1995\">@flip1995</a>.</li>\n</ul>\n<h3 id=\"build-std\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#build-std\"></a>\n<a href=\"https://github.com/rust-lang/rust-project-goals/issues/274\">Build-std</a></h3>\n<ul>\n<li>No update. Progress will resume next week when the contributor working on this returns from holiday.</li>\n</ul>\n<h3 id=\"zsanitize-kcfi-arity\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#zsanitize-kcfi-arity\"></a>\n<code>-Zsanitize-kcfi-arity</code></h3>\n<ul>\n<li>Added this as a new deliverable. These kind of \"emerging codegen flag\" requests can be expected from time to time. Notes available <a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi-arity\">here</a> and <a href=\"https://lore.kernel.org/lkml/20250224123703.843199044@infradead.org/\">here</a>.</li>\n<li>The PR has been reviewed and is unblocked to land.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<br />\n<h2 id=\"goals-looking-for-help\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#goals-looking-for-help\"></a>\nGoals looking for help</h2>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/121\"><strong>Promoting Parallel Front End</strong></a></div>\n    <div><progress max=\"3\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- markdown separator --> \n<p><em>Help wanted:</em> Help test the deadlock code in the <a href=\"https://github.com/rust-lang/rust/labels/WG-compiler-parallel\">issue list</a> and try to reproduce the issues. If you'd like to help, please post in <a href=\"https://rust-lang.zulipchat.com/#narrow/channel/435869-project-goals/topic/Promoting.20Parallel.20Front.20End.20.28goals.23121.29/with/506292058\">this goal's dedicated zulip topic</a>.</p>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/121#issuecomment-2731267314\">Comment by @SparrowLii posted on 2025-03-18:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<ul>\n<li><strong>Key developments:</strong> Several deadlock issue that remain for more than a year were resolved by #137731\nThe new test suit for parallel front end is being improved</li>\n<li><strong>Blockers:</strong>\u00a0null</li>\n<li><strong>Help wanted:</strong> Help test the deadlock code in the <a href=\"https://github.com/rust-lang/rust/labels/WG-compiler-parallel\">issue list</a> and try to reproduce the issue</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<br />\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/272\"><strong>Stabilize public/private dependencies</strong></a></div>\n    <div><progress max=\"5\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- markdown separator --> \n<p><em>Help wanted:</em> T-compiler people to work on the blocking issues <a href=\"https://github.com/rust-lang/rust/issues/119428\">#119428</a> and <a href=\"https://github.com/rust-lang/rust/issues/71043\">#71043</a>. If you'd like to help, please post in <a href=\"https://rust-lang.zulipchat.com/#narrow/channel/435869-project-goals/topic/Stabilize.20public.2Fprivate.20dependencies.20.28goals.23272.29\">this goal's dedicated zulip topic</a>.</p>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/272#issuecomment-2730114361\">Comment by @epage posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<ul>\n<li>Key developments: @tgross35 got rust-lang/rust#135501 merged which improved which made progress on rust-lang/rust#119428, one of the two main blockers.  In rust-lang/rust#119428, we've further discussed further designs and trade offs.</li>\n<li>Blockers: Further work on rust-lang/rust#119428 and rust-lang/rust#71043</li>\n<li>Help wanted: T-compiler people to work on those above issues.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<br />\n<h2 id=\"other-goal-updates\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/08/Project-Goals-2025-March-Update/#other-goal-updates\"></a>\nOther goal updates</h2>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/100\"><strong>&quot;Stabilizable&quot; prototype for expanded const generics</strong></a></div>\n    <div><progress max=\"4\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/100#issuecomment-2729302537\">Comment by @BoxyUwU posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>camelids PR has been merged, we now correctly (to the best of my knowledge) lower const paths under mgca. I have a PR open to ensure that we handle evaluation of paths to consts with generics or inference variables correctly, and that we do not attempt to evaluate constants before they have been checked to be well formed. I'm also currently mentoring someone to implement proper handling of normalization of inherent associated constants under mgca.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/274\"><strong>build-std</strong></a></div>\n    <div><progress max=\"4\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/274#issuecomment-2694682050\">Comment by @davidtwco posted on 2025-03-03:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>A small update, @adamgemmell shared <a href=\"https://rust-lang.zulipchat.com/#narrow/channel/246057-t-cargo/topic/build-std.20goal/near/502644552\">revisions to the aforementioned document</a>, further feedback to which is being addressed.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/104\"><strong>Continue resolving &#x60;cargo-semver-checks&#x60; blockers for merging into cargo</strong></a></div>\n    <div><progress max=\"5\" value=\"2\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<p>Earlier this month, we completed one checkbox of the goal: <code>#[doc(hidden)]</code> in sealed trait analysis, live in <code>cargo-semver-checks</code> v0.40. We also made significant progress on type system modeling, which is part of two more checkboxes.</p>\n<ul>\n<li>We shipped method receiver types in our schema, enabling more than a dozen new lints.</li>\n<li>We have a draft schema for <code>?Sized</code> bounds, and are putting the finishing touches on <code>'static</code> and \"outlives\" bounds. More lints will follow here.</li>\n<li>We also have a draft schema for the new <code>use&lt;&gt;</code> precise capturing syntax.</li>\n</ul>\n<p>Additionally, <code>cargo-semver-checks</code> is participating in Google Summer of Code, so this month we had the privilege of merging many contributions from new contributors who are considering applying for GSoC with us! We're looking forward to this summer, and would like to wish the candidates good luck in the application process!</p>\n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/104#issuecomment-2708411596\">Comment by @obi1kenobi posted on 2025-03-08:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><strong>Key developments:</strong></p>\n<ul>\n<li>Sealed trait analysis correctly handles <code>#[doc(hidden)]</code> items. This completes one checkbox of this goal!</li>\n<li>We shipped a series of lints detecting breakage in generic types, lifetimes, and const generics. One of them has already caught accidental breakage in the real world!</li>\n</ul>\n<p><a href=\"https://github.com/obi1kenobi/cargo-semver-checks/releases/tag/v0.40.0\"><code>cargo-semver-checks</code> v0.40</a>, released today, includes a variety of improvements to sealed trait analysis. They can be summarized as \"smarter, faster, more correct,\" and will have an immediate positive impact on popular crates such as <code>diesel</code> and <code>zerocopy</code>.</p>\n<p>While we <a href=\"https://github.com/obi1kenobi/cargo-semver-checks/releases/tag/v0.39.0\">already shipped a series of lints</a> detecting generics-related breakage, more work is needed to complete that checkbox. This, and the \"special cases like <code>'static</code> and <code>?Sized</code>\", will be the focus of upcoming work.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/252\"><strong>Declarative (&#x60;macro_rules!&#x60;) macro improvements</strong></a></div>\n    <div><progress max=\"29\" value=\"3\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/253\"><strong>Evaluate approaches for seamless interop between C++ and Rust</strong></a></div>\n    <div><progress max=\"6\" value=\"2\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/253#issuecomment-2751789282\">Comment by @tmandry posted on 2025-03-25:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Since our last update, there has been talk of dedicating some time at the Rust All Hands for interop discussion; @baumanj and @tmandry are going to work on fleshing out an agenda. @cramertj and @tmandry brainstormed with @oli-obk (who was very helpful) about ways of supporting a more ambitious \"template instantiation from Rust\" goal, and this may get turned into a prototype at some point.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/107\"><strong>Experiment with ergonomic ref-counting</strong></a></div>\n    <div><progress max=\"8\" value=\"5\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<p>There is now an early prototype available that allows you to write <code>x.use</code>; if the type of <code>X</code> implements <code>UseCloned</code>, then this is equivalent to <code>x.clone()</code>, else it is equivalent to a move. This is not the desired end semantics in a few ways, just a step along the road. Nothing to see here (yet).</p>\n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/107#issuecomment-2730880430\">Comment by @nikomatsakis posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update: rust-lang/rust#134797 has landed.</p>\n<p>Semantics as implemented in the PR:</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\" />\nIntroduced a trait <code>UseCloned</code> implemented for <code>Rc</code> and <code>Arc</code> types.</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\" />\n<code>x.use</code> checks whether <code>x</code>'s type <code>X</code> implements the <code>UseCloned</code> trait; if so, then <code>x.use</code> is equivalent to <code>x.clone()</code>, otherwise it is a copy/move of <code>x</code>;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\" />\n<code>use || ...x...</code> closures act like <code>move</code> closures but respect the <code>UseCloned</code> trait, so they will either <code>clone</code>, copy, or move <code>x</code> as appropriate.</li>\n</ul>\n<p>Next steps:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\" />\nModify codegen so that we guarantee that <code>x.use</code> will do a copy if <code>X: Copy</code> is true after monomorphization. Right now the desugaring to <code>clone</code> occurs before monomorphization and hence it will call the <code>clone</code> method even for those instances where <code>X</code> is a <code>Copy</code> type.</li>\n<li><input disabled=\"\" type=\"checkbox\" />\nConvert <code>x.use</code> to a move rather than a clone if this is a last-use.</li>\n<li><input disabled=\"\" type=\"checkbox\" />\nMake <code>x</code> equivalent to <code>x.use</code> but with an (allow-by-default) lint to signal that something special is happened.</li>\n</ul>\n<p>Notable decisions made and discussions:</p>\n<ul>\n<li>Opted to name the trait that controls whether <code>x.use</code> does a clone or a move <code>UseCloned</code> rather than <code>Use</code>. This is because the trait does not control whether or not you can use something but rather controls what happens when you do.</li>\n<li><a href=\"https://rust-lang.zulipchat.com/#narrow/channel/213817-t-lang/topic/.60ergonomic_clones.60.20does.20not.20deref/near/505889669\">Question was raised on Zulip</a> as to whether <code>x.use</code> should auto-deref. After thinking it over, reached the conclusion that <a href=\"https://rust-lang.zulipchat.com/#narrow/channel/213817-t-lang/topic/.60ergonomic_clones.60.20does.20not.20deref/near/506157506\">it should not</a>, because <code>x</code> and <code>x.use</code> should eventually behave the same modulo lints, but that (as ever) a <code>&amp;T -&gt; T</code> coercion would be useful for ergonomic reasons.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/109\"><strong>Expose experimental LLVM features for GPU offloading</strong></a></div>\n    <div><progress max=\"4\" value=\"2\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/109#issuecomment-2749926179\">Comment by @ZuseZ4 posted on 2025-03-25:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>I just noticed that I missed my February update, so I'll keep this update a bit more high-level, to not make it too long.</p>\n<p><strong>Key developments:</strong></p>\n<ol>\n<li>All key autodiff PRs got merged. So after building <code>rust-lang/rust</code> with the autodiff feature enabled, users can now use it, without the need for any custom fork.</li>\n<li>std::autodiff received the first PRs from new contributors, which have not been previously involved in rustc development! My plan is to grow a team to maintain this feature, so that's a great start. The PRs are <a href=\"https://github.com/rust-lang/rust/pull/137713\">here</a>, <a href=\"https://github.com/rust-lang/rust/pull/138231\">here</a> and <a href=\"https://github.com/rust-lang/rust/pull/138314\">here</a>. Over time I hope to hand over increasingly larger issues.</li>\n<li>I received an offer to join the Rust compiler team, so now I can also officially review and approve PRs! For now I'll focus on reviewing PRs in the fields I'm most comfortable with, so autodiff, batching, and soon GPU offload.</li>\n<li>I implemented a standalone batching feature. It was a bit larger (~2k LoC) and needed some (back then unmerged) autodiff PRs, since they both use the same underlying Enzyme infrastructure. I therefore did not push for merging it.</li>\n<li>I recently implemented batching as part of the autodiff macro, for people who want to use both together. I subsequently split out a first set of code improvements and refactorings, which already <a href=\"https://github.com/rust-lang/rust/pull/138627\">got merged</a>. The remaining autodiff feature <a href=\"https://github.com/rust-lang/rust/pull/137880\">PR</a> is only 600 loc, so I'm currently cleaning it up for review.</li>\n<li>I spend time preparing an MCP to enable autodiff in CI (and therefore nightly). I also spend a lot of time discussing a potential MLIR backend for rustc. Please reach out if you want to be involved!</li>\n</ol>\n<p>**Help wanted: **\nWe want to support autodiff in lib builds, instead of only binaries. oli-obk and I recently figured out the underlying bug, and I started with a PR in https://github.com/rust-lang/rust/pull/137570. The problem is that autodiff assumes fat-lto builds, but lib builds compile some of the library code using thin-lto, even if users specify <code>lto=fat</code> in their Cargo.toml. We'd want to move every thing to fat-lto if we enable Autodiff as a temporary solution, and later move towards embed-bc as a longer-term solution. If you have some time to help please reach out! Some of us have already looked into it a little but got side-tracked, so it's better to talk first about which code to re-use, rather than starting from scratch.</p>\n<p>I also booked my RustWeek ticket, so I'm happy to talk about all types of Scientific Computing, HPC, ML, or cursed Rust(c) and LLVM internals! Please feel free to dm me if you're also going and want to meet.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/110\"><strong>Extend pubgrub to match cargo&#x27;s dependency resolution</strong></a></div>\n    <div><progress max=\"2\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/110#issuecomment-2725379795\">Comment by @Eh2406 posted on 2025-03-14:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Progress continues to be stalled by high priority tasks for $DAY_JOB. It continues to be unclear when the demands of work will allow me to return focus to this project.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/254\"><strong>Externally Implementable Items</strong></a></div>\n    <div><progress max=\"9\" value=\"2\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/255\"><strong>Finish the libtest json output experiment</strong></a></div>\n    <div><progress max=\"4\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/255#issuecomment-2730118576\">Comment by @epage posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<ul>\n<li>Key developments:\n<ul>\n<li>Between tasks on #92, I've started to refresh myself on the libtest-next code base</li>\n</ul>\n</li>\n<li>Blockers:</li>\n<li>Help wanted:</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/256\"><strong>Implement Open API Namespace Support</strong></a></div>\n    <div><progress max=\"3\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/257\"><strong>Implement restrictions, prepare for stabilization</strong></a></div>\n    <div><progress max=\"8\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/258\"><strong>Improve state machine codegen</strong></a></div>\n    <div><progress max=\"6\" value=\"1\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<p>We've started work on implementing <code>#[loop_match]</code> on <a href=\"https://github.com/trifectatechfoundation/rust/tree/loop_match_attr\">this branch</a>. For the time being integer and enum patterns are supported. The <a href=\"https://github.com/rust-lang/rust-project-goals/issues/258#issuecomment-2732965199\">benchmarks</a>, are extremely encouraging, showing large improvements over the status quo, and significant improvements versus <code>-Cllvm-args=-enable-dfa-jump-thread</code>.</p>\n<p>Our next steps can be found in the <a href=\"https://github.com/trifectatechfoundation/rust/blob/loop_match_attr/loop_match_todo.md\">todo file</a>, and focus mostly on improving the code quality and robustness.</p>\n<!-- markdown separator --> \n<details>\n3 detailed updates available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/258#issuecomment-2732962674\">Comment by @folkertdev posted on 2025-03-18:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>@traviscross how would we make progress on that? So far we've mostly been talking to @joshtriplett, under the assumption that a <code>#[loop_match]</code> attribute on loops combined with a <code>#[const_continue]</code> attribute on \"jumps to the next iteration\" will be acceptable as a language experiment.</p>\n<p>Our current implementation handles the following</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#!</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">feature</span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\">loop_match</span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span></span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-enum z-rust\"><span class=\"z-storage z-type z-enum z-rust\">enum</span> <span class=\"z-entity z-name z-enum z-rust\">State</span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-enum z-rust\"><span class=\"z-meta z-block z-rust\">    A<span class=\"z-punctuation z-separator z-rust\">,</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-enum z-rust\"><span class=\"z-meta z-block z-rust\">    B<span class=\"z-punctuation z-separator z-rust\">,</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-enum z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">main</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-storage z-type z-rust\">let</span> <span class=\"z-storage z-modifier z-rust\">mut</span> state <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-meta z-path z-rust\">State<span class=\"z-punctuation z-accessor z-rust\">::</span></span>A<span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">loop_match</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-entity z-name z-label z-rust\">'outer</span><span class=\"z-punctuation z-separator z-rust\">:</span> <span class=\"z-keyword z-control z-rust\">loop</span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">        state <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-entity z-name z-label z-rust\">'blk</span><span class=\"z-punctuation z-separator z-rust\">:</span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">            <span class=\"z-keyword z-control z-rust\">match</span> state <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">                <span class=\"z-meta z-path z-rust\">State<span class=\"z-punctuation z-accessor z-rust\">::</span></span>A <span class=\"z-keyword z-operator z-rust\">=&gt;</span>\n</span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">                <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">                    <span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">const_continue</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span></span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">                    <span class=\"z-keyword z-control z-rust\">break</span> <span class=\"z-storage z-modifier z-lifetime z-rust\">'blk</span> <span class=\"z-meta z-path z-rust\">State<span class=\"z-punctuation z-accessor z-rust\">::</span></span>B\n</span></span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">                </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">                <span class=\"z-meta z-path z-rust\">State<span class=\"z-punctuation z-accessor z-rust\">::</span></span>B <span class=\"z-keyword z-operator z-rust\">=&gt;</span> <span class=\"z-keyword z-control z-rust\">break</span> <span class=\"z-storage z-modifier z-lifetime z-rust\">'outer</span><span class=\"z-punctuation z-separator z-rust\">,</span>\n</span></span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">            </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">        </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">    </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span></code></pre>\n<p>Crucially, this does not add syntax, only the attributes and internal logic in MIR lowering for statically performing the pattern match to pick the right branch to jump to.</p>\n<p>The main challenge is then to implement this in the compiler itself, which we've been working on (I'll post our tl;dr update shortly)</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/258#issuecomment-2732965199\">Comment by @folkertdev posted on 2025-03-18:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Some benchmarks (as of march 18th)</p>\n<p>A benchmark of https://github.com/bjorn3/comrak/blob/loop_match_attr/autolink_email.rs, basically a big state machine that is a perfect fit for loop match</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">Benchmark 1: ./autolink_email\n</span><span class=\"z-text z-plain\">  Time (mean \u00b1 \u03c3):      1.126 s \u00b1  0.012 s    [User: 1.126 s, System: 0.000 s]\n</span><span class=\"z-text z-plain\">  Range (min \u2026 max):    1.105 s \u2026  1.141 s    10 runs\n</span><span class=\"z-text z-plain\"> \n</span><span class=\"z-text z-plain\">Benchmark 2: ./autolink_email_llvm_dfa\n</span><span class=\"z-text z-plain\">  Time (mean \u00b1 \u03c3):     583.9 ms \u00b1   6.9 ms    [User: 581.8 ms, System: 2.0 ms]\n</span><span class=\"z-text z-plain\">  Range (min \u2026 max):   575.4 ms \u2026 591.3 ms    10 runs\n</span><span class=\"z-text z-plain\"> \n</span><span class=\"z-text z-plain\">Benchmark 3: ./autolink_email_loop_match\n</span><span class=\"z-text z-plain\">  Time (mean \u00b1 \u03c3):     411.4 ms \u00b1   8.8 ms    [User: 410.1 ms, System: 1.3 ms]\n</span><span class=\"z-text z-plain\">  Range (min \u2026 max):   403.2 ms \u2026 430.4 ms    10 runs\n</span><span class=\"z-text z-plain\"> \n</span><span class=\"z-text z-plain\">Summary\n</span><span class=\"z-text z-plain\">  ./autolink_email_loop_match ran\n</span><span class=\"z-text z-plain\">    1.42 \u00b1 0.03 times faster than ./autolink_email_llvm_dfa\n</span><span class=\"z-text z-plain\">    2.74 \u00b1 0.07 times faster than ./autolink_email\n</span></code></pre>\n<p><code>#[loop_match]</code> beats the status quo, but also beats the llvm flag by a large margin.</p>\n<hr />\n<p>A benchmark of zlib decompression with chunks of 16 bytes (this makes the impact of <code>loop_match</code> more visible)</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">Benchmark 1 (65 runs): target/release/examples/uncompress-baseline rs-chunked 4\n</span><span class=\"z-text z-plain\">  measurement          mean \u00b1 \u03c3            min \u2026 max           outliers         delta\n</span><span class=\"z-text z-plain\">  wall_time          77.7ms \u00b1 3.04ms    74.6ms \u2026 88.9ms          9 (14%)        0%\n</span><span class=\"z-text z-plain\">  peak_rss           24.1MB \u00b1 64.6KB    24.0MB \u2026 24.2MB          0 ( 0%)        0%\n</span><span class=\"z-text z-plain\">  cpu_cycles          303M  \u00b1 11.8M      293M  \u2026  348M           9 (14%)        0%\n</span><span class=\"z-text z-plain\">  instructions        833M  \u00b1  266       833M  \u2026  833M           0 ( 0%)        0%\n</span><span class=\"z-text z-plain\">  cache_references   3.62M  \u00b1  310K     3.19M  \u2026 4.93M           1 ( 2%)        0%\n</span><span class=\"z-text z-plain\">  cache_misses        209K  \u00b1 34.2K      143K  \u2026  325K           1 ( 2%)        0%\n</span><span class=\"z-text z-plain\">  branch_misses      4.09M  \u00b1 10.0K     4.08M  \u2026 4.13M           5 ( 8%)        0%\n</span><span class=\"z-text z-plain\">Benchmark 2 (68 runs): target/release/examples/uncompress-llvm-dfa rs-chunked 4\n</span><span class=\"z-text z-plain\">  measurement          mean \u00b1 \u03c3            min \u2026 max           outliers         delta\n</span><span class=\"z-text z-plain\">  wall_time          74.0ms \u00b1 3.24ms    70.6ms \u2026 85.0ms          4 ( 6%)        \ud83d\ude80-  4.8% \u00b1  1.4%\n</span><span class=\"z-text z-plain\">  peak_rss           24.1MB \u00b1 27.1KB    24.0MB \u2026 24.1MB          3 ( 4%)          -  0.1% \u00b1  0.1%\n</span><span class=\"z-text z-plain\">  cpu_cycles          287M  \u00b1 12.7M      277M  \u2026  330M           4 ( 6%)        \ud83d\ude80-  5.4% \u00b1  1.4%\n</span><span class=\"z-text z-plain\">  instructions        797M  \u00b1  235       797M  \u2026  797M           0 ( 0%)        \ud83d\ude80-  4.3% \u00b1  0.0%\n</span><span class=\"z-text z-plain\">  cache_references   3.56M  \u00b1  439K     3.08M  \u2026 5.93M           2 ( 3%)          -  1.8% \u00b1  3.6%\n</span><span class=\"z-text z-plain\">  cache_misses        144K  \u00b1 32.5K     83.7K  \u2026  249K           2 ( 3%)        \ud83d\ude80- 31.2% \u00b1  5.4%\n</span><span class=\"z-text z-plain\">  branch_misses      4.09M  \u00b1 9.62K     4.07M  \u2026 4.12M           1 ( 1%)          -  0.1% \u00b1  0.1%\n</span><span class=\"z-text z-plain\">Benchmark 3 (70 runs): target/release/examples/uncompress-loop-match rs-chunked 4\n</span><span class=\"z-text z-plain\">  measurement          mean \u00b1 \u03c3            min \u2026 max           outliers         delta\n</span><span class=\"z-text z-plain\">  wall_time          71.6ms \u00b1 2.43ms    69.3ms \u2026 78.8ms          6 ( 9%)        \ud83d\ude80-  7.8% \u00b1  1.2%\n</span><span class=\"z-text z-plain\">  peak_rss           24.1MB \u00b1 72.8KB    23.9MB \u2026 24.2MB         20 (29%)          -  0.0% \u00b1  0.1%\n</span><span class=\"z-text z-plain\">  cpu_cycles          278M  \u00b1 9.59M      270M  \u2026  305M           7 (10%)        \ud83d\ude80-  8.5% \u00b1  1.2%\n</span><span class=\"z-text z-plain\">  instructions        779M  \u00b1  277       779M  \u2026  779M           0 ( 0%)        \ud83d\ude80-  6.6% \u00b1  0.0%\n</span><span class=\"z-text z-plain\">  cache_references   3.49M  \u00b1  270K     3.15M  \u2026 4.17M           4 ( 6%)        \ud83d\ude80-  3.8% \u00b1  2.7%\n</span><span class=\"z-text z-plain\">  cache_misses        142K  \u00b1 25.6K     86.0K  \u2026  197K           0 ( 0%)        \ud83d\ude80- 32.0% \u00b1  4.8%\n</span><span class=\"z-text z-plain\">  branch_misses      4.09M  \u00b1 7.83K     4.08M  \u2026 4.12M           1 ( 1%)          +  0.0% \u00b1  0.1%\n</span><span class=\"z-text z-plain\">Benchmark 4 (69 runs): target/release/examples/uncompress-llvm-dfa-loop-match rs-chunked 4\n</span><span class=\"z-text z-plain\">  measurement          mean \u00b1 \u03c3            min \u2026 max           outliers         delta\n</span><span class=\"z-text z-plain\">  wall_time          72.8ms \u00b1 2.57ms    69.7ms \u2026 80.0ms          7 (10%)        \ud83d\ude80-  6.3% \u00b1  1.2%\n</span><span class=\"z-text z-plain\">  peak_rss           24.1MB \u00b1 35.1KB    23.9MB \u2026 24.1MB          2 ( 3%)          -  0.1% \u00b1  0.1%\n</span><span class=\"z-text z-plain\">  cpu_cycles          281M  \u00b1 10.1M      269M  \u2026  312M           5 ( 7%)        \ud83d\ude80-  7.5% \u00b1  1.2%\n</span><span class=\"z-text z-plain\">  instructions        778M  \u00b1  243       778M  \u2026  778M           0 ( 0%)        \ud83d\ude80-  6.7% \u00b1  0.0%\n</span><span class=\"z-text z-plain\">  cache_references   3.45M  \u00b1  277K     2.95M  \u2026 4.14M           0 ( 0%)        \ud83d\ude80-  4.7% \u00b1  2.7%\n</span><span class=\"z-text z-plain\">  cache_misses        176K  \u00b1 43.4K      106K  \u2026  301K           0 ( 0%)        \ud83d\ude80- 15.8% \u00b1  6.3%\n</span><span class=\"z-text z-plain\">  branch_misses      4.16M  \u00b1 96.0K     4.08M  \u2026 4.37M           0 ( 0%)        \ud83d\udca9+  1.7% \u00b1  0.6%\n</span></code></pre>\n<p>The important points: <code>loop-match</code> is faster than <code>llfm-dfa</code>, and when combined performance is worse than when using <code>loop-match</code> on its own.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/258#issuecomment-2733772028\">Comment by @traviscross posted on 2025-03-18:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Thanks for that update.  Have reached out separately.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/126\"><strong>Instrument the Rust standard library with safety contracts</strong></a></div>\n    <div><progress max=\"8\" value=\"1\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/126#issuecomment-2731150866\">Comment by @celinval posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>We have been able to merge the initial support for contracts in the Rust compiler under the <code>contracts</code> unstable feature. @tautschnig has created the first PR to incorporate contracts in the standard library and uncovered a few limitations that we've been working on.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/259\"><strong>Making compiletest more maintainable: reworking directive handling</strong></a></div>\n    <div><progress max=\"5\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/259#issuecomment-2726093440\">Comment by @jieyouxu posted on 2025-03-15:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update (2025-03-15):</p>\n<ul>\n<li>Doing a survey pass on compiletest to make sure I have the full picture.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/260\"><strong>Metrics Initiative</strong></a></div>\n    <div><progress max=\"6\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/260#issuecomment-2695460081\">Comment by @yaahc posted on 2025-03-03:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>After further review I've decided to limit scope initially and not get ahead of myself so I can make sure the schemas I'm working with can support the kind of queries and charts we're going to eventually want in the final version of the unstable feature usage metric. I'm hoping that by limiting scope I can have most of the items currently outlined in this project goal done ahead of schedule so I can move onto building the proper foundations based on the proof of concept and start to design more permanent components. As such I've opted for the following:</p>\n<ul>\n<li>minimal change to the current JSON format I need, which is including the timestamp</li>\n<li>Gain clarity on exactly what questions I should be answering with the unstable feature usage metrics, the desired graphs and tables, and how this influences what information I need to gather and how to construct the appropriate queries within graphana</li>\n<li>gathering a sample dataset from docs.rs rather than viewing it as the long term integration, since there are definitely some sampleset bias issues in that dataset from initial conversations with docs.rs\n<ul>\n<li>Figure out proper hash/id to use in the metrics file names to avoid collisions with different conditional compilation variants of the same crate with different feature enabled.</li>\n</ul>\n</li>\n</ul>\n<p>For the second item above I need to have more detailed conversations with both @rust-lang/libs-api and @rust-lang/lang</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/122\"><strong>Model coherence in a-mir-formality</strong></a></div>\n    <div><progress max=\"6\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/122#issuecomment-2730965112\">Comment by @nikomatsakis posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update:</p>\n<p>@tiif has been working on integrating const-generic effects into a-mir-formality and making good progress.</p>\n<p>I have begun exploring integration of the <a href=\"https://github.com/minirust/minirust/blob/9ae11cc202d040f08bc13ec5254d3d41d5f3cc25/spec/lang/syntax.md#statements-terminators\">MiniRust</a> definition of MIR. This doesn't directly work towards the goal of modeling coherence but it will be needed for const generic work to be effective.</p>\n<p>I am considering some simplification and cleanup work as well.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/113\"><strong>Next-generation trait solver</strong></a></div>\n    <div><progress max=\"4\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/113#issuecomment-2729033787\">Comment by @lcnr posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>The two cycle handling PRs mentioned in the previous update have been merged, allowing <code>nalgebra</code>  to compile with the new solver enabled. I have now started to work on opaque types in borrowck again. This is a quite involved issue and will likely take a few more weeks until it's fully implemented.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/261\"><strong>Nightly support for ergonomic SIMD multiversioning</strong></a></div>\n    <div><progress max=\"5\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/261#issuecomment-2730590041\">Comment by @veluca93 posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Key developments: Started investigating how the proposed SIMD multiversioning options might fit in the context of the efforts for formalizing a Rust effect system</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/262\"><strong>Null and enum-discriminant runtime checks in debug builds</strong></a></div>\n    <div><progress max=\"3\" value=\"1\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/114\"><strong>Optimizing Clippy &amp; linting</strong></a></div>\n    <div><progress max=\"2\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/114#issuecomment-2730435572\">Comment by @blyxyas posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Monthly update!</p>\n<ul>\n<li>https://github.com/rust-lang/rust-clippy/issues/13821 has been merged. This has successfully optimized the MSRV extraction from the source code.</li>\n</ul>\n<p>On the old MSRV extraction,<code>Symbol::intern</code> use was sky high being about 3.5 times higher than the rest of the compilation combined. Now, it's at normal levels. Note that <code>Symbol::intern</code> is a very expensive and locking function, so this is very notable. Thanks to @Alexendoo for this incredible work!</p>\n<p>As a general note on the month, I'd say that we've experimented a lot.</p>\n<ul>\n<li>Starting efforts on parallelizing the lint system.</li>\n<li>https://github.com/rust-lang/rust-clippy/issues/14423 Started taking a deeper look into our dependence on <code>libLLVM.so</code> and heavy relocation problems.</li>\n<li>I took a look into heap allocation optimization, seems that we are fine. For the moment, rust-clippy#14423 is the priority.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/106\"><strong>Prepare const traits for stabilization</strong></a></div>\n    <div><progress max=\"14\" value=\"5\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/106#issuecomment-2740985917\">Comment by @oli-obk posted on 2025-03-20:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>I opened an RFC (https://github.com/rust-lang/rfcs/pull/3762) and we had a lang team meeting about it. Some design exploration and bikeshedding later we have settled on using (const)instead of ~const along with some more annotations for explicitness and some fewer annotations in other places. The RFC has been updated accordingly. There is still ongoing discussions about reintroducing the \"fewer annotations\" for redundancy and easier processing by humans.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/264\"><strong>Prototype a new set of Cargo &quot;plumbing&quot; commands</strong></a></div>\n    <div><progress max=\"4\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/265\"><strong>Publish first rust-lang-owned release of &quot;FLS&quot;</strong></a></div>\n    <div><progress max=\"5\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n2 detailed updates available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/265#issuecomment-2725594168\">Comment by @JoelMarcey posted on 2025-03-14:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Key Developments: Working on a public announcement of Ferrous' contribution of the FLS. Goal is to have that released soon. Also working out the technical details of the contribution, particularly around how to initially integrate the FLS into the Project itself.</p>\n<p>Blockers: None yet.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/265#issuecomment-2770004340\">Comment by @JoelMarcey posted on 2025-04-01:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Key Developments: Public <a href=\"https://rustfoundation.org/media/ferrous-systems-donates-ferrocene-language-specification-to-rust-project/\">announcement</a> of the FLS donation to the Rust <a href=\"https://blog.rust-lang.org/2025/03/26/adopting-the-fls.html\">Project</a>.</p>\n<p>Blockers: None</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/266\"><strong>Publish first version of StableMIR on crates.io</strong></a></div>\n    <div><progress max=\"6\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n2 detailed updates available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/266#issuecomment-2741227092\">Comment by @celinval posted on 2025-03-20:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>We have proposed a project idea to Google Summer of Code to implement the refactoring and infrastructure improvements needed for this project. I'm working on breaking down the work into smaller tasks so they can be implemented incrementally.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/266#issuecomment-2741239158\">Comment by @celinval posted on 2025-03-20:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>I am also happy to share that @makai410 is joining us in this effort! \ud83e\udd73</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/267\"><strong>Research: How to achieve safety when linking separately compiled code</strong></a></div>\n    <div><progress max=\"11\" value=\"3\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/268\"><strong>Run the 2025H1 project goal program</strong></a></div>\n    <div><progress max=\"13\" value=\"7\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n2 detailed updates available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/268#issuecomment-2694770347\">Comment by @nikomatsakis posted on 2025-03-03:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update: February goal update <a href=\"https://blog.rust-lang.org/2025/03/03/Project-Goals-Feb-Update.html\">has been posted</a>. We made significant revisions to the way that goal updates are prepared. If you are a goal owner, it's worth reading the directions for <a href=\"https://rust-lang.github.io/rust-project-goals/how_to/report_status.html\">how to report your status</a>, especially the part about <a href=\"https://rust-lang.github.io/rust-project-goals/how_to/report_status.html#help-wanted-comments\">help wanted</a> and <a href=\"https://rust-lang.github.io/rust-project-goals/how_to/report_status.html#summary-comments\">summary</a> comments.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/268#issuecomment-2730386220\">Comment by @nikomatsakis posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update: We sent out the first round of pings for the March update. The plan is to create the document on <strong>March 25th</strong>, so @rust-lang/goal-owners please get your updates in by then. Note that you can create a <a href=\"https://rust-lang.github.io/rust-project-goals/how_to/report_status.html#summary-comments\">TL;DR comment</a> if you want to add 2-3 bullet points that will be embedded directly into the final blog post.</p>\n<p>In terms of goal planning:</p>\n<ul>\n<li>@nandsh is planning to do a detailed retrospective on the goals program in conjunction with her research at CMU. Please reach out to her on Zulip (<strong>Nandini</strong>) if you are interested in participating.</li>\n<li>We are planning to overhaul the ping process as <a href=\"https://hackmd.io/@spastorino/BJjZ0gf2Je\">described in this hackmd</a>. In short, pings will come on the 2nd/3rd Monday of the month. No pings will be sent if you've posted a comment that month. The blog post will be prepared on the 3rd Friday.</li>\n<li>We've been discussing how to structure 2025H2 goals and are thinking of making a few changes. We'll break out three categories of goals (Flagship / Core / Stretch), with \"Core\" goals being those deemed most important. We'll also have a 'pre-read' before the RFC opens with team leads to look for cross-team collaborative opportunities. At least that's the <em>current</em> plan.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/269\"><strong>Rust Vision Document</strong></a></div>\n    <div><progress max=\"4\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<ul>\n<li>We drafted a <a href=\"https://hackmd.io/5hKhzllDQYmOiw5uogybZg?both\">Rust Vision Doc Action Plan</a>.</li>\n<li>We expect to publish our announcement blog post by end of Month including a survey requesting volunteers to speak with us. We are also creating plans for interviews with company contacts, global community groups, and Rust maintainers.</li>\n</ul>\n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/269#issuecomment-2730322014\">Comment by @nikomatsakis posted on 2025-03-17:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Update:</p>\n<p>I've asked @jackh726 to co-lead the team with me. Together we pulled together a <a href=\"https://hackmd.io/5hKhzllDQYmOiw5uogybZg?both\">Rust Vision Doc action plan</a>.</p>\n<p>The plan begins by posting a blog post (<a href=\"https://hackmd.io/@rust-vision-doc/S1p_UNIoye\">draft available here</a>) announcing the effort. We are coordinating with the Foundation to create a survey which will be linked from the blog post. The <a href=\"https://hackmd.io/@rust-vision-doc/r1cqDGMn1x\">survey questions</a> ask about user's experience but also look for volunteers we can speak with.</p>\n<p>We are pulling together the team that will perform the interviewing. We've been in touch with UX reseearchers who will brief us on some of the basics of UX research. We're finalizing team membership now plus the set of focus areas, we expect to cover at least users/companies, Rust project maintainers, and Rust global communities. See the <a href=\"https://hackmd.io/5hKhzllDQYmOiw5uogybZg?both\">Rust Vision Doc action plan</a> for more details.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/275\"><strong>rustc-perf improvements</strong></a></div>\n    <div><progress max=\"7\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/275#issuecomment-2694687450\">Comment by @davidtwco posted on 2025-03-03:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>A small update, @Jamesbarford aligned with @kobzol on a high-level architecture and will begin fleshing out the details and making some small patches to rustc-perf to gain familiarity with the codebase.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/118\"><strong>Scalable Polonius support on nightly</strong></a></div>\n    <div><progress max=\"18\" value=\"10\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/118#issuecomment-2747703673\">Comment by @lqd posted on 2025-03-24:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>Here are the key developments for this update.</p>\n<p>Amanda has continued on the placeholder removal task. In particular on the remaining issues with rewritten type tests. The in-progress work caused incorrect errors to be emitted under the rewrite scheme, and a new strategy to handle these was discussed. This has been implemented in the PR, and seems to work as hoped. So the PR should now be in a state that is ready for more in-depth review pass, and should hopefully land soon.</p>\n<p>Tage has started his master's thesis with a focus on the earliest parts of the borrow checking process, in order to experiment with graded borrow-checking, incrementalism, avoiding work that's not needed for loans that are not invalidated, and so on. A lot of great progress has been made on these parts already, and more are being discussed even in the later areas (live and active loans).</p>\n<p>I have focused on taking care of the remaining diagnostics and test failures of the location-sensitive analysis. For diagnostics in particular, the PRs mentioned in the previous updates have landed, and I've fixed a handful of NLL spans, all the remaining differences under the compare-mode, and blessed differences that were improvements. For the test failures, handling liveness differently in traversal fixed most of the remaining failures, while a couple are due to the friction with mid-points avoidance scheme. For these, we have a few different paths forward, but with different trade-offs and we'll be discussing and evaluation these in the very near future. Another two are still left to analyze in-depth to see what's going on.</p>\n<p>Our near future focus will be to continue down the path to correctness while also expanding test coverage that feels lacking in certain very niche areas, and that we want to improve. At the same time, we'll also work on a figuring out a better architecture to streamline the entire end-to-end process, to allow early outs, avoid work that is not needed, etc.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/271\"><strong>Secure quorum-based cryptographic verification and mirroring for crates.io</strong></a></div>\n    <div><progress max=\"12\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/119\"><strong>Stabilize cargo-script</strong></a></div>\n    <div><progress max=\"36\" value=\"31\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/119#issuecomment-2754835536\">Comment by @lqd posted on 2025-03-26:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>This project goal was actually carried over from 2024h2, in https://github.com/rust-lang/rust-project-goals/pull/294</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/270\"><strong>SVE and SME on AArch64</strong></a></div>\n    <div><progress max=\"16\" value=\"2\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n2 detailed updates available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/270#issuecomment-2694677621\">Comment by @davidtwco posted on 2025-03-03:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>A small update, we've opened a draft PR for the initial implementation of this - rust-lang/rust#137944. Otherwise, just continued to address feedback on the RFCs.</p>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/270#issuecomment-2733240803\">Comment by @davidtwco posted on 2025-03-18:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<ul>\n<li>We've been resolving review feedback on the implementation of the Sized Hierarchy RFC on rust-lang/rust#137944. We're also working on reducing the performance regression in the PR, by avoiding unnecessary elaboration of sizedness supertraits and extending the existing <code>Sized</code> case in <code>type_op_prove_predicate</code> query's fast path.</li>\n<li>There's not been any changes to the RFC, there's minor feedback that has yet to be responded to, but it's otherwise just waiting on t-lang.</li>\n<li>We've been experimenting with rebasing rust-lang/rust#118917 on top of rust-lang/rust#137944 to confirm that const sizedness allows us to remove the type system exceptions that the SVE implementation previously relied on. We're happy to confirm that it does.</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/273\"><strong>Unsafe Fields</strong></a></div>\n    <div><progress max=\"7\" value=\"1\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<details>\nNo detailed updates available.\n</details>\n<div class=\"mt2 mb3\" style=\"display: flex;\">\n    <div><a href=\"https://github.com/rust-lang/rust-project-goals/issues/123\"><strong>Use annotate-snippets for rustc diagnostic output</strong></a></div>\n    <div><progress max=\"13\" value=\"0\"></progress>\n</div>\n</div>\n<!-- markdown separator --> \n<!-- markdown separator --> \n<details>\n1 detailed update available.\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p><a href=\"https://github.com/rust-lang/rust-project-goals/issues/123#issuecomment-2766902313\">Comment by @Muscraft posted on 2025-03-31:</a><br /></p>\n<blockquote>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n<p>While my time was limited these past few months, lots of progress was made! I was able to align <code>annotate-snippets</code> internals with <code>rustc</code>'s <a href=\"https://github.com/rust-lang/rust/blob/5cc60728e7ee10eb2ae5f61f7d412d9805b22f0c/compiler/rustc_errors/src/emitter.rs#L629\"><code>HumanEmitter</code></a> and get the new API implemented. These changes have not been merged yet, but <a href=\"https://github.com/Muscraft/annotate-snippets-rs/tree/feedback\">they can be found here</a>. As part of this work, I got <code>rustc</code> using <code>annotate-snippets</code> as its only renderer. During all of this, I started working on making <code>rustc</code> use <code>annotate-snippets</code> as its only renderer, which turned out to be a huge benefit. I was able to get a feel for the new API while addressing rendering divergences. As of the time of writing, all but ~30 tests of the roughly 18,000 UI tests are passing.</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">test result: FAILED. 18432 passed; 29 failed; 193 ignored; 0 measured; 0 filtered out; finished in 102.32s\n</span></code></pre>\n<p>Most of the failing tests are caused by a few things:</p>\n<ul>\n<li><code>annotate-snippets</code> right aligns numbers, whereas <code>rustc</code> left aligns</li>\n<li><code>annotate-snippets</code> doesn't handle multiple suggestions for the same span very well</li>\n<li>Problems with handling <code>FailureNote</code></li>\n<li><code>annotate-snippets</code> doesn't currently support colored labels and titles, i.e., the magenta highlight <code>rustc</code> uses</li>\n<li><code>rustc</code> wants to pass titles similar to <code>error: internal compiler error[E0080]</code>, but <code>annotate-snippets</code> doesn't support that well</li>\n<li>differences in how <code>rustc</code> and <code>annotate-snippets</code> handle term width during tests\n<ul>\n<li>When testing, <code>rustc</code> uses <code>DEFAULT_COLUMN_WIDTH</code> and does not subtract the code offset, while <code>annotate-snippets</code> does</li>\n</ul>\n</li>\n<li>Slight differences in how \"newline\"/end of line highlighting is handled</li>\n<li>JSON output rendering contains color escapes</li>\n</ul>\n<!-- this comment helps to convince the markdown parser to do the right thing -->\n</blockquote>\n</details>"}, {"title": "Help us create a vision for Rust's future", "link": "https://blog.rust-lang.org/2025/04/04/vision-doc-survey/", "published": "2025-04-04T00:00:00", "summary": "<p>tl;dr: Please take our <a href=\"https://www.surveyhero.com/c/fuznhxp3\">survey here</a></p>\n<p>Rust turns 10 this year. It's a good time to step back and assess where we are at and to get aligned around where we should be going. Where is Rust succeeding at <em>empowering everyone to build reliable, efficient software</em> (as it says on our webpage)? Where are there opportunities to do better? To that end, we have taken on the <a href=\"https://rust-lang.github.io/rust-project-goals/2025h1/rust-vision-doc.html\">goal of authoring a Rust Vision RFC</a>, with the first milestone being to prepare a draft for review at the upcoming Rust All Hands.</p>\n<h3 id=\"goals-and-non-goals\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/vision-doc-survey/#goals-and-non-goals\"></a>\nGoals and non-goals</h3>\n<p>The vision RFC has <strong>two goals</strong></p>\n<ul>\n<li>to build a shared understanding of <strong>where we are</strong> and</li>\n<li>to identify <strong>where we should be going</strong> at a high-level.</li>\n</ul>\n<p>The vision RFC also has a <strong>non-goal</strong>, which is to provide specific designs or feature recommendations. We'll have plenty of time to write detailed RFCs for that. The vision RFC will instead focus more on higher-level recommendations and on understanding what people need and want from Rust in various domains.</p>\n<p>We hope that by answering the above questions, we will then be able to evolve Rust with more confidence. It will also help Rust users (and would-be users) to understand what Rust is for and where it is going.</p>\n<h3 id=\"community-and-technology-are-both-in-scope\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/vision-doc-survey/#community-and-technology-are-both-in-scope\"></a>\nCommunity <em>and</em> technology are both in scope</h3>\n<p>The scope of the vision RFC is not limited to the technical design of Rust. It will also cover topics like</p>\n<ul>\n<li>the experience of open-source maintainers and contributors, both for the Rust project and for Rust crates;</li>\n<li>integrating global Rust communities across the world;</li>\n<li>and building momentum and core libraries for particular domains, like embedded, CLI, or gamedev.</li>\n</ul>\n<h3 id=\"gathering-data\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/vision-doc-survey/#gathering-data\"></a>\nGathering data</h3>\n<p>To answer the questions we have set, we need to gather data - we want to do our best <em>not</em> to speculate. This is going to come in two main formats:</p>\n<ol>\n<li><strong>A <a href=\"https://www.surveyhero.com/c/fuznhxp3\">survey</a></strong> about peoples' experiences with Rust (see below). Unlike the Annual Rust survey, the questions are open-ended and free-form, and cover somewhat different topics. This also allows us to gather a list of people to potentially interview.</li>\n<li><strong>Interviews</strong> of people from various backgrounds and domains. In an ideal world, we would interview everyone who wants to be interviewed, but in reality we're going to try to interview as many people as we can to form a diverse and representative set.</li>\n</ol>\n<p>While we have some idea of who we want to talk to, we may be missing some! We're hoping that the survey will not only help us connect to the people that we want to talk to, but also potentially help us uncover people we haven't yet thought of. We are currently planning to talk to</p>\n<ul>\n<li>Rust users, novice to expert;</li>\n<li>Rust non-users (considering or not);</li>\n<li>Companies using (or considering) Rust, from startup to enterprise;</li>\n<li>Global or language-based Rust affinity groups;</li>\n<li>Domain-specific groups;</li>\n<li>Crate maintainers, big and small;</li>\n<li>Project maintainers and contributors, volunteer or professional;</li>\n<li>Rust Foundation staff.</li>\n</ul>\n<h3 id=\"our-roadmap-and-timeline\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/vision-doc-survey/#our-roadmap-and-timeline\"></a>\nOur roadmap and timeline</h3>\n<p>Our current \"end goal\" is to author and open a vision RFC sometime during the second half of the year, likely in the fall. For this kind of RFC, though, the journey is really more important than the destination. We plan to author several drafts along the way and take feedback, both from Rust community members and from the public at large. The first milestone we are targeting is to prepare an <strong>initial report for review at the <a href=\"https://blog.rust-lang.org/inside-rust/2024/09/02/all-hands.html\">Rust All Hands</a> in May</strong>. To that end, the data gathering process starts <em>now</em> with the <a href=\"https://www.surveyhero.com/c/fuznhxp3\">survey</a>, but we intend to spend the month of April conducting interviews (and more after that).</p>\n<h3 id=\"how-you-can-help\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/vision-doc-survey/#how-you-can-help\"></a>\nHow you can help</h3>\n<p>For starters, fill out our <a href=\"https://www.surveyhero.com/c/fuznhxp3\">survey here</a>. This survey has three sections</p>\n<ol>\n<li>To put the remaining responses into context, the survey asks a few demographic questions to allow us to ensure we are getting good representation across domains, experience, and backgrounds.</li>\n<li>It asks a series of questions about your experiences with Rust. As mentioned before, this survey is quite different from the Annual Rust survey. If you have experiences in the context of a company or organization, please feel free to share those (submitting this separately is best)!</li>\n<li>It asks for recommendations as to whom we ought to speak to. Please only recommend yourself or people/companies/groups for which you have a specific contact.</li>\n</ol>\n<p><em>Note: <strong>The first part of the survey will only be shared publicly in aggregate, the second may be made public directly, and the third section will not be made public.</strong> For interviews, we can be more flexible with what information is shared publicly or not.</em></p>\n<p>Of course, other than taking the survey, you can also <em>share</em> it with people. We <em>really</em> want to reach people that may not otherwise see it through our typical channels. So, even better if you can help us do that!</p>\n<p>Finally, if you are active in the Rust maintainer community, feel free to join the <a href=\"https://rust-lang.zulipchat.com/#narrow/channel/486265-vision-doc-2025\"><code>#vision-doc-2025</code></a> channel on Zulip and say hello.</p>"}, {"title": "C ABI Changes for `wasm32-unknown-unknown`", "link": "https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/", "published": "2025-04-04T00:00:00", "summary": "<p>The <code>extern \"C\"</code> ABI for the <code>wasm32-unknown-unknown</code> target has been using a\nnon-standard definition since the inception of the target in that it does not\nimplement the <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">official C ABI of WebAssembly</a> and it\nadditionally <a href=\"https://github.com/rust-lang/rust/issues/115666\">leaks internal compiler implementation details</a> of\nboth the Rust compiler and LLVM. This will change in a future version of the\nRust compiler and the <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">official C ABI</a> will be used instead.</p>\n<p>This post details some history behind this change and the rationale for why it's\nbeing announced here, but you can skip straight to <a href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#am-i-affected\">\"Am I\naffected?\"</a> as well.</p>\n<h2 id=\"history-of-wasm32-unknown-unknown-s-c-abi\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#history-of-wasm32-unknown-unknown-s-c-abi\"></a>\nHistory of <code>wasm32-unknown-unknown</code>'s C ABI</h2>\n<p>When the <code>wasm32-unknown-unknown</code> target <a href=\"https://github.com/rust-lang/rust/pull/45905\">was originally added</a> in\n2017, not much care was given to the exact definition of the <code>extern \"C\"</code> ABI at\nthe time. In 2018 <a href=\"https://github.com/rust-lang/rust/pull/48959\">an ABI definition was added just for wasm</a> and the\ntarget is still using this definition <a href=\"https://github.com/rust-lang/rust/blob/78948ac259253ce89effca1e8bb64d16f4684aa4/compiler/rustc_target/src/callconv/wasm.rs#L76-L114\">to this day</a>. This\ndefinitions has become more and more problematic over time and while some issues\nhave been fixed, the root cause still remains.</p>\n<p>Notably this ABI definition does not match the <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">tool-conventions</a> definition of\nthe C API, which is the current standard for how WebAssembly toolchains should\ntalk to one another. Originally this non-standard definition was used for all\nWebAssembly based targets except Emscripten, but <a href=\"https://github.com/rust-lang/rust/pull/79998\">this changed in 2021</a>\nwhere the WASI targets for Rust use a corrected ABI definition. Still, however,\nthe non-standard definition remained in use for <code>wasm32-unknown-unknown</code>.</p>\n<p>The time has now come to correct this historical mistake and the Rust compiler\nwill soon be using a correct ABI definition for the <code>wasm32-unknown-unknown</code>\ntarget. This means, however, that generated WebAssembly binaries will be\ndifferent than before.</p>\n<h2 id=\"what-is-a-webassembly-c-abi\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#what-is-a-webassembly-c-abi\"></a>\nWhat is a WebAssembly C ABI?</h2>\n<p>The definition of an ABI answers questions along the lines of:</p>\n<ul>\n<li>What registers are arguments passed in?</li>\n<li>What registers are results passed in?</li>\n<li>How is a 128-bit integers passed as an argument?</li>\n<li>How is a <code>union</code> passed as a return value?</li>\n<li>When are parameters passed through memory instead of registers?</li>\n<li>What is the size and alignment of a type in memory?</li>\n</ul>\n<p>For WebAssembly these answers are a little different than native platforms.\nFor example, WebAssembly does not have physical registers and functions must all\nbe annotated with a type. What WebAssembly does have is types such as <code>i32</code>,\n<code>i64</code>, <code>f32</code>, and <code>f64</code>. This means that for WebAssembly an ABI needs to define\nhow to represent values in these types.</p>\n<p>This is where the <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">tool-conventions</a> document comes in. That document provides a\ndefinition for how to represent primitives in C in the WebAssembly format, and\nadditionally how function signatures in C are mapped to function signatures in\nWebAssembly. For example a Rust <code>u32</code> is represented by a WebAssembly <code>i32</code> and\nis passed directly as a parameter as a function argument. If the Rust structure\n<code>#[repr(C)] struct Pair(f32, f64)</code> is returned from a function then a return\npointer is used which must have alignment 8 and size of 16 bytes.</p>\n<p>In essence, the WebAssembly C ABI is acting as a bridge between C's type system\nand the WebAssembly type system. This includes details such as in-memory layouts\nand translations of a C function signature to a WebAssembly function signature.</p>\n<h2 id=\"how-is-wasm32-unknown-unknown-non-standard\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#how-is-wasm32-unknown-unknown-non-standard\"></a>\nHow is <code>wasm32-unknown-unknown</code> non-standard?</h2>\n<p>Despite the ABI definition today being non-standard, many aspects of it are\nstill the same as what <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">tool-conventions</a> specifies. For example, size/alignment\nof types is the same as it is in C. The main difference is how function\nsignatures are calculated. An example (where you can follow along on <a href=\"https://godbolt.org/z/fExj4M4no\">godbolt</a>)\nis:</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">repr</span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\">C</span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span></span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-struct z-rust\"><span class=\"z-storage z-modifier z-rust\">pub</span> <span class=\"z-storage z-type z-struct z-rust\">struct</span> </span><span class=\"z-meta z-struct z-rust\"><span class=\"z-entity z-name z-struct z-rust\">Pair</span> </span><span class=\"z-meta z-struct z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-struct z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-variable z-other z-member z-rust\">x</span><span class=\"z-punctuation z-separator z-type z-rust\">:</span> <span class=\"z-storage z-type z-rust\">u32</span>,\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-struct z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-variable z-other z-member z-rust\">y</span><span class=\"z-punctuation z-separator z-type z-rust\">:</span> <span class=\"z-storage z-type z-rust\">u32</span>,\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-struct z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">unsafe</span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\">no_mangle</span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span></span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-storage z-modifier z-rust\">pub</span> <span class=\"z-keyword z-other z-rust\">extern</span> <span class=\"z-string z-quoted z-double z-rust\"><span class=\"z-punctuation z-definition z-string z-begin z-rust\">&quot;</span>C<span class=\"z-punctuation z-definition z-string z-end z-rust\">&quot;</span></span> <span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">pair_add</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span><span class=\"z-variable z-parameter z-rust\">pair</span><span class=\"z-punctuation z-separator z-rust\">:</span> Pair</span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> <span class=\"z-meta z-function z-return-type z-rust\"><span class=\"z-punctuation z-separator z-rust\">-&gt;</span> <span class=\"z-storage z-type z-rust\">u32</span></span> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    pair<span class=\"z-punctuation z-accessor z-dot z-rust\">.</span>x <span class=\"z-keyword z-operator z-arithmetic z-rust\">+</span> pair<span class=\"z-punctuation z-accessor z-dot z-rust\">.</span>y\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span></code></pre>\n<p>This will generate the following WebAssembly function:</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">(func $pair_add (param i32 i32) (result i32)\n</span><span class=\"z-text z-plain\">  local.get 1\n</span><span class=\"z-text z-plain\">  local.get 0\n</span><span class=\"z-text z-plain\">  i32.add\n</span><span class=\"z-text z-plain\">)\n</span></code></pre>\n<p>Notably you can see here that the struct <code>Pair</code> was \"splatted\" into its two\ncomponents so the actual <code>$pair_add</code> function takes two arguments, the <code>x</code> and\n<code>y</code> fields. The <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">tool-conventions</a>, however specifically says that \"other\nstruct[s] or union[s]\" are passed indirectly, notably through memory. We can see\nthis by compiling this C code:</p>\n<pre class=\"language-c z-code\"><code class=\"language-c\"><span class=\"z-source z-c\"><span class=\"z-meta z-struct z-c\"><span class=\"z-storage z-type z-c\">struct</span> <span class=\"z-meta z-struct z-c\"><span class=\"z-entity z-name z-struct z-c\">Pair</span></span></span><span class=\"z-meta z-struct z-c\"> <span class=\"z-meta z-block z-c\"><span class=\"z-punctuation z-section z-block z-begin z-c\">{</span></span></span><span class=\"z-meta z-struct z-c\"><span class=\"z-meta z-block z-c\">\n</span></span></span><span class=\"z-source z-c\"><span class=\"z-meta z-struct z-c\"><span class=\"z-meta z-block z-c\">    <span class=\"z-storage z-type z-c\">unsigned</span> x<span class=\"z-punctuation z-terminator z-c\">;</span>\n</span></span></span><span class=\"z-source z-c\"><span class=\"z-meta z-struct z-c\"><span class=\"z-meta z-block z-c\">    <span class=\"z-storage z-type z-c\">unsigned</span> y<span class=\"z-punctuation z-terminator z-c\">;</span>\n</span></span></span><span class=\"z-source z-c\"><span class=\"z-meta z-struct z-c\"><span class=\"z-meta z-block z-c\"></span></span><span class=\"z-meta z-struct z-c\"><span class=\"z-meta z-block z-c\"><span class=\"z-punctuation z-section z-block z-end z-c\">}</span></span></span><span class=\"z-punctuation z-terminator z-c\">;</span>\n</span><span class=\"z-source z-c\">\n</span><span class=\"z-source z-c\"><span class=\"z-storage z-type z-c\">unsigned</span> <span class=\"z-meta z-function z-c\"><span class=\"z-entity z-name z-function z-c\">pair_add</span></span><span class=\"z-meta z-function z-parameters z-c\"><span class=\"z-meta z-group z-c\"><span class=\"z-punctuation z-section z-group z-begin z-c\">(</span></span></span><span class=\"z-meta z-function z-parameters z-c\"><span class=\"z-meta z-group z-c\"><span class=\"z-storage z-type z-c\">struct</span> Pair <span class=\"z-variable z-parameter z-c\">pair</span><span class=\"z-punctuation z-section z-group z-end z-c\">)</span></span></span><span class=\"z-meta z-function z-c\"> </span><span class=\"z-meta z-function z-c\"><span class=\"z-meta z-block z-c\"><span class=\"z-punctuation z-section z-block z-begin z-c\">{</span></span></span><span class=\"z-meta z-function z-c\"><span class=\"z-meta z-block z-c\">\n</span></span></span><span class=\"z-source z-c\"><span class=\"z-meta z-function z-c\"><span class=\"z-meta z-block z-c\">    <span class=\"z-keyword z-control z-flow z-return z-c\">return</span> pair<span class=\"z-punctuation z-accessor z-c\">.</span><span class=\"z-variable z-other z-member z-c\">x</span> <span class=\"z-keyword z-operator z-arithmetic z-c\">+</span> pair<span class=\"z-punctuation z-accessor z-c\">.</span><span class=\"z-variable z-other z-member z-c\">y</span><span class=\"z-punctuation z-terminator z-c\">;</span>\n</span></span></span><span class=\"z-source z-c\"><span class=\"z-meta z-function z-c\"><span class=\"z-meta z-block z-c\"></span></span><span class=\"z-meta z-function z-c\"><span class=\"z-meta z-block z-c\"><span class=\"z-punctuation z-section z-block z-end z-c\">}</span></span></span>\n</span></code></pre>\n<p>which yields the generated function:</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">(func (param i32) (result i32)\n</span><span class=\"z-text z-plain\">  local.get 0\n</span><span class=\"z-text z-plain\">  i32.load offset=4\n</span><span class=\"z-text z-plain\">  local.get 0\n</span><span class=\"z-text z-plain\">  i32.load\n</span><span class=\"z-text z-plain\">  i32.add\n</span><span class=\"z-text z-plain\">)\n</span></code></pre>\n<p>Here we can see, sure enough, that <code>pair</code> is passed in linear memory and this\nfunction only has a single argument, not two. This argument is a pointer into\nlinear memory which stores the <code>x</code> and <code>y</code> fields.</p>\n<p>The Diplomat project has <a href=\"https://github.com/rust-diplomat/diplomat/blob/main/docs/wasm_abi_quirks.md\">compiled a much more comprehensive overview</a>\nthan this and it's recommended to check that out if you're curious for an even\ndeeper dive.</p>\n<h2 id=\"why-hasn-t-this-been-fixed-long-ago-already\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#why-hasn-t-this-been-fixed-long-ago-already\"></a>\nWhy hasn't this been fixed long ago already?</h2>\n<p>For <code>wasm32-unknown-unknown</code> it was well-known at the time in 2021 when WASI's\nABI was updated that the ABI was non-standard. Why then has the ABI not been\nfixed like with WASI?\nThe main reason originally for this was the <a href=\"https://github.com/rustwasm/wasm-bindgen\">wasm-bindgen\nproject</a>.</p>\n<p>In <code>wasm-bindgen</code> the goal is to make it easy to integrate Rust into a web\nbrowser with WebAssembly. JavaScript is used to interact with host APIs and the\nRust module itself. Naturally, this communication touches on a lot of ABI\ndetails! The problem was that <code>wasm-bindgen</code> relied on the above example,\nspecifically having <code>Pair</code> \"splatted\" across arguments instead of passed\nindirectly. The generated JS wouldn't work correctly if the argument was passed\nin-memory.</p>\n<p>At the time this was discovered it was found to be significantly difficult to\nfix <code>wasm-bindgen</code> to not rely on this splatting behavior. At the time it also\nwasn't thought to be a widespread issue nor was it costly for the compiler to\nhave a non-standard ABI. Over the years though the pressure has mounted. The\nRust compiler is carrying an <a href=\"https://github.com/rust-lang/rust/issues/115666\">ever-growing list of hacks</a> to work\naround the non-standard C ABI on <code>wasm32-unknown-unknown</code>. Additionally more\nprojects have started to rely on this \"splatting\" behavior and the risk has\ngotten greater that there are more unknown projects relying on the non-standard\nbehavior.</p>\n<p>In late 2023 <a href=\"https://github.com/rustwasm/wasm-bindgen/pull/3595\">the wasm-bindgen project fixed bindings generation</a> to be\nunaffected by the transition to the standard definition of <code>extern \"C\"</code>. In the following months\na <a href=\"https://github.com/rust-lang/rust/pull/117918\">future-incompat lint was added to rustc</a> to specifically migrate users\nof old <code>wasm-bindgen</code> versions to a \"fixed\" version. This was in anticipation of\nchanging the ABI of <code>wasm32-unknown-unknown</code> once enough time had passed. Since\nearly 2025 users of old <code>wasm-bindgen</code> versions <a href=\"https://github.com/rust-lang/rust/pull/133951\">will now receive a hard\nerror</a> asking them to upgrade.</p>\n<p>Despite all this heroic effort done by contributors, however, it has now come to\nlight that there are more projects than <code>wasm-bindgen</code> relying on this\nnon-standard ABI definition. Consequently this blog post is intended to serve as\na notice to other users on <code>wasm32-unknown-unknown</code> that the ABI break is\nupcoming and projects may need to be changed.</p>\n<h2 id=\"am-i-affected\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#am-i-affected\"></a>\nAm I affected?</h2>\n<p>If you don't use the <code>wasm32-unknown-unknown</code> target, you are not affected by\nthis change. If you don't use <code>extern \"C\"</code> on the <code>wasm32-unknown-unknown</code>\ntarget, you are also not affected. If you fall into this bucket, however, you\nmay be affected!</p>\n<p>To determine the impact to your project there are a few tools at your disposal:</p>\n<ul>\n<li>A new <a href=\"https://github.com/rust-lang/rust/pull/138601\">future-incompat warning</a> has been added to the Rust compiler\nwhich will issue a warning if it detects a signature that will change when the\nABI is changed.</li>\n<li>In 2023 a <a href=\"https://github.com/rust-lang/rust/pull/117919\"><code>-Zwasm-c-abi=(legacy|spec)</code> flag was added</a> to the Rust\ncompiler. This defaults to <code>-Zwasm-c-abi=legacy</code>, the non-standard definition.\nCode can use <code>-Zwasm-c-abi=spec</code> to use the standard definition of the C ABI\nfor a crate to test out if changes work.</li>\n</ul>\n<p>The best way to test your crate is to compile with <code>nightly-2025-03-27</code>\nor later, ensure there are no warnings, and then test your project still works\nwith <code>-Zwasm-c-abi=spec</code>. If all that passes then you're good to go and the\nupcoming change to the C ABI will not affect your project.</p>\n<h2 id=\"i-m-affected-now-what\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#i-m-affected-now-what\"></a>\nI'm affected, now what?</h2>\n<p>So you're using <code>wasm32-unknown-unknown</code>, you're using <code>extern \"C\"</code>, and the\nnightly compiler is giving you warnings. Additionally your project is broken\nwhen compiled with<code> -Zwasm-c-abi=spec</code>. What now?</p>\n<p>At this time this will unfortunately be a somewhat rough transition period for\nyou. There are a few options at your disposal but they all have their downsides:</p>\n<ol>\n<li>\n<p>Pin your Rust compiler version to the current stable, don't update until the\nABI has changed. This means that you won't get any compiler warnings (as old\ncompilers don't warn) and additionally you won't get broken when the ABI\nchanges (as you're not changing compilers). Eventually when you update to a\nstable compiler with <code>-Zwasm-c-abi=spec</code> as the default you'll have to port\nyour JS or bindings to work with the new ABI.</p>\n</li>\n<li>\n<p>Update to Rust nightly as your compiler and pass <code>-Zwasm-c-abi=spec</code>. This is\nfront-loading the work required in (1) for your target. You can get your\nproject compatible with <code>-Zwasm-c-abi=spec</code> today. The downside of this\napproach is that your project will only work with a nightly compiler and\n<code>-Zwasm-c-abi=spec</code> and you won't be able to use stable until the default is\nswitched.</p>\n</li>\n<li>\n<p>Update your project to not rely on the non-standard behavior of\n<code>-Zwasm-c-abi=legacy</code>. This involves, for example, not passing\nstructs-by-value in parameters. You can pass <code>&amp;Pair</code> above, for example,\ninstead of <code>Pair</code>. This is similar to (2) above where the work is done\nimmediately to update a project but has the benefit of continuing to work on\nstable Rust. The downside of this, however, is that you may not be able to\neasily change or update your C ABI in some situations.</p>\n</li>\n<li>\n<p>Update to Rust nightly as your compiler and pass <code>-Zwasm-c-abi=legacy</code>. This\nwill silence compiler warnings for now but be aware that the ABI will still\nchange in the future and the <code>-Zwasm-c-abi=legacy</code> option will be removed\nentirely. When the <code>-Zwasm-c-abi=legacy</code> option is removed the only option\nwill be the standard C ABI, what <code>-Zwasm-c-abi=spec</code> today enables.</p>\n</li>\n</ol>\n<p>If you have uncertainties, questions, or difficulties, feel free to reach out on\n<a href=\"https://github.com/rust-lang/rust/issues/138762\">the tracking issue for the future-incompat warning</a> or on Zulip.</p>\n<h2 id=\"timeline-of-abi-changes\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/04/c-abi-changes-for-wasm32-unknown-unknown/#timeline-of-abi-changes\"></a>\nTimeline of ABI changes</h2>\n<p>At this time there is not an exact timeline of how the default ABI is going to\nchange. It's expected to take on the order of 3-6 months, however, and will look\nsomething roughly like this:</p>\n<ul>\n<li>2025 March: (soon) - a <a href=\"https://github.com/rust-lang/rust/pull/138601\">future-incompat warning</a> will be added to the\ncompiler to warn projects if they're affected by this ABI change.</li>\n<li>2025-05-15: this future-incompat warning will reach the stable Rust channel as\n1.87.0.</li>\n<li>2025 Summer: (ish) - the <code>-Zwasm-c-abi</code> flag will be removed from the compiler\nand the <code>legacy</code> option will be entirely removed.</li>\n</ul>\n<p>Exactly when <code>-Zwasm-c-abi</code> is removed will depend on feedback from the\ncommunity and whether the future-incompat warning triggers much. It's hoped that\nsoon after the Rust 1.87.0 is stable, though, that the old legacy ABI behavior\ncan be removed.</p>"}, {"title": "Announcing Rust 1.86.0", "link": "https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/", "published": "2025-04-03T00:00:00", "summary": "<p>The Rust team is happy to announce a new version of Rust, 1.86.0. Rust is a programming language empowering everyone to build reliable and efficient software.</p>\n<p>If you have a previous version of Rust installed via <code>rustup</code>, you can get 1.86.0 with:</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">$ rustup update stable\n</span></code></pre>\n<p>If you don't have it already, you can <a href=\"https://www.rust-lang.org/install.html\">get <code>rustup</code></a> from the appropriate page on our website, and check out the <a href=\"https://doc.rust-lang.org/stable/releases.html#version-1860-2025-04-03\">detailed release notes for 1.86.0</a>.</p>\n<p>If you'd like to help us out by testing future releases, you might consider updating locally to use the beta channel (<code>rustup default beta</code>) or the nightly channel (<code>rustup default nightly</code>). Please <a href=\"https://github.com/rust-lang/rust/issues/new/choose\">report</a> any bugs you might come across!</p>\n<h2 id=\"what-s-in-1-86-0-stable\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#what-s-in-1-86-0-stable\"></a>\nWhat's in 1.86.0 stable</h2>\n<h3 id=\"trait-upcasting\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#trait-upcasting\"></a>\nTrait upcasting</h3>\n<p>This release includes a long awaited feature \u2014 the ability to upcast trait objects.\nIf a trait has a <a href=\"https://doc.rust-lang.org/reference/items/traits.html#supertraits\">supertrait</a> you can coerce a reference to said trait object to a reference to a trait object of the supertrait:</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-meta z-trait z-rust\"><span class=\"z-storage z-type z-trait z-rust\">trait</span> <span class=\"z-entity z-name z-trait z-rust\">Trait</span>: Supertrait <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-trait z-rust\"><span class=\"z-storage z-type z-trait z-rust\">trait</span> <span class=\"z-entity z-name z-trait z-rust\">Supertrait</span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">upcast</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span><span class=\"z-variable z-parameter z-rust\">x</span><span class=\"z-punctuation z-separator z-rust\">:</span> <span class=\"z-keyword z-operator z-rust\">&amp;</span>dyn Trait</span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> <span class=\"z-meta z-function z-return-type z-rust\"><span class=\"z-punctuation z-separator z-rust\">-&gt;</span> <span class=\"z-keyword z-operator z-rust\">&amp;</span>dyn Supertrait</span> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    x\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span></code></pre>\n<p>The same would work with any other kind of (smart-)pointer, like <code>Arc&lt;dyn Trait&gt; -&gt; Arc&lt;dyn Supertrait&gt;</code> or <code>*const dyn Trait -&gt; *const dyn Supertrait</code>.</p>\n<p>Previously this would have required a workaround in the form of an <code>upcast</code> method in the <code>Trait</code> itself, for example <code>fn as_supertrait(&amp;self) -&gt; &amp;dyn Supertrait</code>, and this would work only for one kind of reference/pointer. Such workarounds are not necessary anymore.</p>\n<p>Note that this means that raw pointers to trait objects carry a non-trivial invariant: \"leaking\" a raw pointer to a trait object with an invalid vtable into safe code may lead to undefined behavior. It is not decided yet whether creating such a raw pointer temporarily in well-controlled circumstances causes immediate undefined behavior, so code should refrain from creating such pointers under any conditions (and Miri enforces that).</p>\n<p>Trait upcasting may be especially useful with the <code>Any</code> trait, as it allows upcasting your trait object to <code>dyn Any</code> to call <code>Any</code>'s downcast methods, without adding any trait methods or using external crates.</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-keyword z-other z-rust\">use</span> <span class=\"z-meta z-path z-rust\">std<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-path z-rust\">any<span class=\"z-punctuation z-accessor z-rust\">::</span></span>Any<span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-trait z-rust\"><span class=\"z-storage z-type z-trait z-rust\">trait</span> <span class=\"z-entity z-name z-trait z-rust\">MyAny</span>: Any <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-impl z-rust\"><span class=\"z-storage z-type z-impl z-rust\">impl</span> </span><span class=\"z-meta z-impl z-rust\"><span class=\"z-entity z-name z-impl z-rust\">dyn</span> <span class=\"z-entity z-name z-impl z-rust\">MyAny</span> </span><span class=\"z-meta z-impl z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-impl z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">downcast_ref</span></span><span class=\"z-meta z-generic z-rust\"><span class=\"z-punctuation z-definition z-generic z-begin z-rust\">&lt;</span>T<span class=\"z-punctuation z-definition z-generic z-end z-rust\">&gt;</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span><span class=\"z-keyword z-operator z-rust\">&amp;</span><span class=\"z-variable z-parameter z-rust\">self</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> <span class=\"z-meta z-function z-return-type z-rust\"><span class=\"z-punctuation z-separator z-rust\">-&gt;</span> <span class=\"z-meta z-generic z-rust\"><span class=\"z-support z-type z-rust\">Option</span><span class=\"z-punctuation z-definition z-generic z-begin z-rust\">&lt;</span><span class=\"z-keyword z-operator z-rust\">&amp;</span>T<span class=\"z-punctuation z-definition z-generic z-end z-rust\">&gt;</span></span></span> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-impl z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">        <span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-variable z-language z-rust\">self</span> <span class=\"z-keyword z-operator z-rust\">as</span> <span class=\"z-keyword z-operator z-bitwise z-rust\">&amp;</span>dyn Any</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-accessor z-dot z-rust\">.</span><span class=\"z-support z-function z-rust\">downcast_ref</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span>\n</span></span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-impl z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-impl z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span></code></pre>\n<p>You can <a href=\"https://doc.rust-lang.org/reference/type-coercions.html#unsized-coercions\">learn more about trait upcasting in the Rust reference</a>.</p>\n<h3 id=\"hashmaps-and-slices-now-support-indexing-multiple-elements-mutably\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#hashmaps-and-slices-now-support-indexing-multiple-elements-mutably\"></a>\n<code>HashMap</code>s and slices now support indexing multiple elements mutably</h3>\n<p>The borrow checker prevents simultaneous usage of references obtained from repeated calls to <code>get_mut</code> methods. To safely support this pattern the standard library now provides a <code>get_disjoint_mut</code> helper on slices and <code>HashMap</code> to retrieve mutable references to multiple elements simultaneously. See the following example taken from the API docs of <a href=\"https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_disjoint_mut\"><code>slice::get_disjoint_mut</code></a>:</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-storage z-type z-rust\">let</span> v <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-keyword z-operator z-bitwise z-rust\">&amp;</span><span class=\"z-storage z-modifier z-rust\">mut</span> <span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">2</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">3</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span><span class=\"z-source z-rust\"><span class=\"z-keyword z-control z-rust\">if</span> <span class=\"z-storage z-type z-rust\">let</span> <span class=\"z-support z-type z-rust\">Ok</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span>a<span class=\"z-punctuation z-separator z-rust\">,</span> b<span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> v<span class=\"z-punctuation z-accessor z-dot z-rust\">.</span><span class=\"z-support z-function z-rust\">get_disjoint_mut</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">2</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-keyword z-operator z-arithmetic z-rust\">*</span>a <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">413</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-keyword z-operator z-arithmetic z-rust\">*</span>b <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">612</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-support z-macro z-rust\">assert_eq!</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span>v<span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-keyword z-operator z-bitwise z-rust\">&amp;</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">413</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">2</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">612</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-keyword z-control z-rust\">if</span> <span class=\"z-storage z-type z-rust\">let</span> <span class=\"z-support z-type z-rust\">Ok</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span>a<span class=\"z-punctuation z-separator z-rust\">,</span> b<span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> v<span class=\"z-punctuation z-accessor z-dot z-rust\">.</span><span class=\"z-support z-function z-rust\">get_disjoint_mut</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-keyword z-operator z-range z-rust\">..</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-keyword z-operator z-range z-rust\">..</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">3</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    a<span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">8</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    b<span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">88</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    b<span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">888</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-support z-macro z-rust\">assert_eq!</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span>v<span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-keyword z-operator z-bitwise z-rust\">&amp;</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">8</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">88</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">888</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-keyword z-control z-rust\">if</span> <span class=\"z-storage z-type z-rust\">let</span> <span class=\"z-support z-type z-rust\">Ok</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span>a<span class=\"z-punctuation z-separator z-rust\">,</span> b<span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> v<span class=\"z-punctuation z-accessor z-dot z-rust\">.</span><span class=\"z-support z-function z-rust\">get_disjoint_mut</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-keyword z-operator z-range z-rust\">..</span><span class=\"z-keyword z-operator z-assignment z-rust\">=</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">2</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-keyword z-operator z-range z-rust\">..</span><span class=\"z-keyword z-operator z-assignment z-rust\">=</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    a<span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">11</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    a<span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">111</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\">    b<span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">0</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span> <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-support z-macro z-rust\">assert_eq!</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span>v<span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-keyword z-operator z-bitwise z-rust\">&amp;</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-constant z-numeric z-integer z-decimal z-rust\">1</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">11</span><span class=\"z-punctuation z-separator z-rust\">,</span> <span class=\"z-constant z-numeric z-integer z-decimal z-rust\">111</span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></code></pre>\n<h3 id=\"allow-safe-functions-to-be-marked-with-the-target-feature-attribute\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#allow-safe-functions-to-be-marked-with-the-target-feature-attribute\"></a>\nAllow safe functions to be marked with the <code>#[target_feature]</code> attribute.</h3>\n<p>Previously only <code>unsafe</code> functions could be marked with the <code>#[target_feature]</code> attribute as it is unsound to call such functions without the target feature being enabled. This release stabilizes the <code>target_feature_11</code> feature, allowing <em>safe</em> functions to be marked with the <code>#[target_feature]</code> attribute.</p>\n<p>Safe functions marked with the target feature attribute can only be safely called from other functions marked with the target feature attribute. However, they cannot be passed to functions accepting generics bounded by the <code>Fn*</code> traits and only support being coerced to function pointers inside of functions marked with the <code>target_feature</code> attribute.</p>\n<p>Inside of functions not marked with the target feature attribute they can be called inside of an <code>unsafe</code> block, however it is the caller's responsibility to ensure that the target feature is available.</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">target_feature</span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\">enable <span class=\"z-keyword z-operator z-rust\">=</span> <span class=\"z-string z-quoted z-double z-rust\"><span class=\"z-punctuation z-definition z-string z-begin z-rust\">&quot;</span>avx2<span class=\"z-punctuation z-definition z-string z-end z-rust\">&quot;</span></span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span></span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">requires_avx2</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-comment z-line z-double-slash z-rust\"><span class=\"z-punctuation z-definition z-comment z-rust\">//</span> ... snip\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-annotation z-rust\"><span class=\"z-punctuation z-definition z-annotation z-rust\">#</span><span class=\"z-punctuation z-section z-group z-begin z-rust\">[</span><span class=\"z-variable z-annotation z-rust\">target_feature</span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\">enable <span class=\"z-keyword z-operator z-rust\">=</span> <span class=\"z-string z-quoted z-double z-rust\"><span class=\"z-punctuation z-definition z-string z-begin z-rust\">&quot;</span>avx2<span class=\"z-punctuation z-definition z-string z-end z-rust\">&quot;</span></span></span></span><span class=\"z-meta z-annotation z-parameters z-rust\"><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span></span><span class=\"z-punctuation z-section z-group z-end z-rust\">]</span></span>\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">safe_callsite</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-comment z-line z-double-slash z-rust\"><span class=\"z-punctuation z-definition z-comment z-rust\">//</span> Calling `requires_avx2` here is safe as `safe_callsite`\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-comment z-line z-double-slash z-rust\"><span class=\"z-punctuation z-definition z-comment z-rust\">//</span> requires the `avx2` feature itself.\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-support z-function z-rust\">requires_avx2</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span><span class=\"z-source z-rust\">\n</span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-storage z-type z-function z-rust\">fn</span> </span><span class=\"z-entity z-name z-function z-rust\">unsafe_callsite</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-begin z-rust\">(</span></span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-function z-parameters z-rust\"><span class=\"z-punctuation z-section z-parameters z-end z-rust\">)</span></span></span></span><span class=\"z-meta z-function z-rust\"> </span><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-comment z-line z-double-slash z-rust\"><span class=\"z-punctuation z-definition z-comment z-rust\">//</span> Calling `requires_avx2` here is unsafe, as we must\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-comment z-line z-double-slash z-rust\"><span class=\"z-punctuation z-definition z-comment z-rust\">//</span> ensure that the `avx2` feature is available first.\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\">    <span class=\"z-keyword z-control z-rust\">if</span> <span class=\"z-support z-macro z-rust\">is_x86_feature_detected!</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span><span class=\"z-string z-quoted z-double z-rust\"><span class=\"z-punctuation z-definition z-string z-begin z-rust\">&quot;</span>avx2<span class=\"z-punctuation z-definition z-string z-end z-rust\">&quot;</span></span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span>\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">        <span class=\"z-storage z-modifier z-rust\">unsafe</span> <span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-begin z-rust\">{</span> <span class=\"z-support z-function z-rust\">requires_avx2</span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span> </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"><span class=\"z-meta z-block z-rust\">    </span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span>\n</span></span></span><span class=\"z-source z-rust\"><span class=\"z-meta z-function z-rust\"><span class=\"z-meta z-block z-rust\"></span><span class=\"z-meta z-block z-rust\"><span class=\"z-punctuation z-section z-block z-end z-rust\">}</span></span></span>\n</span></code></pre>\n<p>You can check the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2396-target-feature-1.1.md\"><code>target_features_11</code></a> RFC for more information.</p>\n<h3 id=\"debug-assertions-that-pointers-are-non-null-when-required-for-soundness\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#debug-assertions-that-pointers-are-non-null-when-required-for-soundness\"></a>\nDebug assertions that pointers are non-null when required for soundness</h3>\n<p>The compiler will now insert debug assertions that a pointer is not null upon non-zero-sized reads and writes, and also when the pointer is reborrowed into a reference. For example, the following code will now produce a non-unwinding panic when debug assertions are enabled:</p>\n<pre class=\"language-rust z-code\"><code class=\"language-rust\"><span class=\"z-source z-rust\"><span class=\"z-storage z-type z-rust\">let</span> _x <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-keyword z-operator z-arithmetic z-rust\">*</span><span class=\"z-meta z-path z-rust\">std<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-path z-rust\">ptr<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-path z-rust\">null<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-generic z-rust\"><span class=\"z-punctuation z-definition z-generic z-begin z-rust\">&lt;</span><span class=\"z-storage z-type z-rust\">u8</span><span class=\"z-punctuation z-definition z-generic z-end z-rust\">&gt;</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span><span class=\"z-source z-rust\"><span class=\"z-storage z-type z-rust\">let</span> _x <span class=\"z-keyword z-operator z-assignment z-rust\">=</span> <span class=\"z-keyword z-operator z-bitwise z-rust\">&amp;</span><span class=\"z-keyword z-operator z-arithmetic z-rust\">*</span><span class=\"z-meta z-path z-rust\">std<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-path z-rust\">ptr<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-path z-rust\">null<span class=\"z-punctuation z-accessor z-rust\">::</span></span><span class=\"z-meta z-generic z-rust\"><span class=\"z-punctuation z-definition z-generic z-begin z-rust\">&lt;</span><span class=\"z-storage z-type z-rust\">u8</span><span class=\"z-punctuation z-definition z-generic z-end z-rust\">&gt;</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-begin z-rust\">(</span></span><span class=\"z-meta z-group z-rust\"><span class=\"z-punctuation z-section z-group z-end z-rust\">)</span></span><span class=\"z-punctuation z-terminator z-rust\">;</span>\n</span></code></pre>\n<p>Trivial examples like this have produced a warning since Rust 1.53.0, the new runtime check will detect these scenarios regardless of complexity.</p>\n<p>These assertions only take place when debug assertions are enabled which means that they <strong>must not</strong> be relied upon for soundness. This also means that dependencies which have been compiled with debug assertions disabled (e.g. the standard library) will not trigger the assertions even when called by code with debug assertions enabled.</p>\n<h3 id=\"make-missing-abi-lint-warn-by-default\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#make-missing-abi-lint-warn-by-default\"></a>\nMake <code>missing_abi</code> lint warn by default</h3>\n<p>Omitting the ABI in extern blocks and functions (e.g. <code>extern {}</code> and <code>extern fn</code>) will now result in a warning (via the <code>missing_abi</code> lint). Omitting the ABI after the <code>extern</code> keyword has always implicitly resulted in the <code>\"C\"</code> ABI. It is now recommended to explicitly specify the <code>\"C\"</code> ABI (e.g. <code>extern \"C\" {}</code> and <code>extern \"C\" fn</code>).</p>\n<p>You can check the <a href=\"https://rust-lang.github.io/rfcs/3722-explicit-extern-abis.html\">Explicit Extern ABIs RFC</a> for more information.</p>\n<h3 id=\"target-deprecation-warning-for-1-87-0\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#target-deprecation-warning-for-1-87-0\"></a>\nTarget deprecation warning for 1.87.0</h3>\n<p>The tier-2 target <code>i586-pc-windows-msvc</code> will be removed in the next version of Rust, 1.87.0. Its difference to the much more popular <code>i686-pc-windows-msvc</code> is that it does not require SSE2 instruction support, but Windows 10, the minimum required OS version of all <code>windows</code> targets (except the <code>win7</code> targets), requires SSE2 instructions itself.</p>\n<p>All users currently targeting <code>i586-pc-windows-msvc</code> should migrate to <code>i686-pc-windows-msvc</code> before the <code>1.87.0</code> release.</p>\n<p>You can check the <a href=\"https://github.com/rust-lang/compiler-team/issues/840\">Major Change Proposal</a> for more information.</p>\n<h3 id=\"stabilized-apis\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#stabilized-apis\"></a>\nStabilized APIs</h3>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.f64.html#method.next_down\"><code>{float}::next_down</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.f64.html#method.next_up\"><code>{float}::next_up</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_disjoint_mut\"><code>&lt;[_]&gt;::get_disjoint_mut</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_disjoint_unchecked_mut\"><code>&lt;[_]&gt;::get_disjoint_unchecked_mut</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/slice/enum.GetDisjointMutError.html\"><code>slice::GetDisjointMutError</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.get_disjoint_mut\"><code>HashMap::get_disjoint_mut</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.get_disjoint_unchecked_mut\"><code>HashMap::get_disjoint_unchecked_mut</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/num/struct.NonZero.html#method.count_ones\"><code>NonZero::count_ones</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.pop_if\"><code>Vec::pop_if</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Once.html#method.wait\"><code>sync::Once::wait</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Once.html#method.wait_force\"><code>sync::Once::wait_force</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/sync/struct.OnceLock.html#method.wait\"><code>sync::OnceLock::wait</code></a></li>\n</ul>\n<p>These APIs are now stable in const contexts:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/std/hint/fn.black_box.html\"><code>hint::black_box</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#method.get_mut\"><code>io::Cursor::get_mut</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#method.set_position\"><code>io::Cursor::set_position</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.is_char_boundary\"><code>str::is_char_boundary</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_at\"><code>str::split_at</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_at_checked\"><code>str::split_at_checked</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_at_mut\"><code>str::split_at_mut</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_at_mut_checked\"><code>str::split_at_mut_checked</code></a></li>\n</ul>\n<h3 id=\"other-changes\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#other-changes\"></a>\nOther changes</h3>\n<p>Check out everything that changed in <a href=\"https://github.com/rust-lang/rust/releases/tag/1.86.0\">Rust</a>, <a href=\"https://doc.rust-lang.org/nightly/cargo/CHANGELOG.html#cargo-186-2025-04-03\">Cargo</a>, and <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-186\">Clippy</a>.</p>\n<h2 id=\"contributors-to-1-86-0\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/04/03/Rust-1.86.0/#contributors-to-1-86-0\"></a>\nContributors to 1.86.0</h2>\n<p>Many people came together to create Rust 1.86.0. We couldn't have done it without all of you. <a href=\"https://thanks.rust-lang.org/rust/1.86.0/\">Thanks!</a></p>"}, {"title": "Adopting the FLS", "link": "https://blog.rust-lang.org/2025/03/26/adopting-the-fls/", "published": "2025-03-26T00:00:00", "summary": "<h1 id=\"adopting-the-fls\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/26/adopting-the-fls/#adopting-the-fls\"></a>\nAdopting the FLS</h1>\n<p>Some years ago, Ferrous Systems and AdaCore worked together to assemble a description of Rust called the FLS<sup class=\"footnote-reference\" id=\"fr-fls-1\"><a href=\"https://blog.rust-lang.org/2025/03/26/adopting-the-fls/#fn-fls\">1</a></sup>.  Ferrous Systems has since been faithfully maintaining and updating this document for new versions of Rust, and they've successfully used it to qualify toolchains based on Rust for use in safety-critical industries.  Seeing this success, others have also begun to rely on the FLS for their own qualification efforts when building with Rust.</p>\n<p>The members of the Rust Project are passionate about shipping high quality tools that enable people to build reliable software at scale.  Such software is exactly the kind needed by those in safety-critical industries, and consequently we've become increasingly interested in better understanding and serving the needs of these customers of our language and of our tools.</p>\n<p>It's in that light that we're pleased to announce that we'll be adopting the FLS into the Rust Project as part of our ongoing specification efforts.  This adoption is being made possible by Ferrous Systems.  We're grateful to them for the work they've done in making the FLS fit for qualification purposes, in promoting its use and the use of Rust generally in safety-critical industries, and now, for working with us to take the next step and to bring it into the Project.</p>\n<p>With this adoption, we look forward to better integrating the FLS with the processes of the Project and to providing ongoing and increased assurances to all those who use Rust in safety-critical industries and, in particular, to those who use the FLS as part of their qualification efforts.</p>\n<p>This adoption would not have been possible without the efforts of the Rust Foundation, and in particular of Joel Marcey, the Director of Technology at the Foundation, who has worked tirelessly to facilitate this on our behalf.  We're grateful to him and to the Foundation for this support.  The Foundation has published its own <a href=\"https://rustfoundation.org/media/ferrous-systems-donates-ferrocene-language-specification-to-rust-project/\">post</a> about this adoption.</p>\n<h2 id=\"i-m-relying-on-the-fls-today-what-should-i-expect\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/26/adopting-the-fls/#i-m-relying-on-the-fls-today-what-should-i-expect\"></a>\nI'm relying on the FLS today; what should I expect?</h2>\n<p>We'll be bringing the FLS within the Project, so expect some URLs to change.  We plan to release updates to the FLS in much the same way as they have been happening up until now.</p>\n<p>We're sensitive to the fact that big changes to this document can result in costs for those using it for qualification purposes, and we don't have any immediate plans for big changes here.</p>\n<h2 id=\"what-s-this-mean-for-the-rust-reference\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/26/adopting-the-fls/#what-s-this-mean-for-the-rust-reference\"></a>\nWhat's this mean for the Rust Reference?</h2>\n<p>The <a href=\"https://github.com/rust-lang/reference\">Reference</a> is still the Reference.  Adopting the FLS does not change the status of the Reference, and we plan to continue to improve and expand the Reference as we've been doing.</p>\n<p>We'll of course be looking for ways that the Reference can support the FLS, and that the FLS can support the Reference, and in the long term, we're hopeful we can find ways to bring these two documents closer together.</p>\n<footer class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn-fls\">\n<p>The FLS stood for the \"Ferrocene Language Specification\".  The minimal fork of Rust that Ferrous Systems qualifies and ships to their customers is called \"Ferrocene\", hence the name.  We'll be dropping the expansion and just calling it the FLS within the Project. <a href=\"https://blog.rust-lang.org/2025/03/26/adopting-the-fls/#fr-fls-1\">\u21a9</a></p>\n</li>\n</ol>\n</footer>"}, {"title": "Announcing Rust 1.85.1", "link": "https://blog.rust-lang.org/2025/03/18/Rust-1.85.1/", "published": "2025-03-18T00:00:00", "summary": "<p>The Rust team has published a new point release of Rust, 1.85.1. Rust is a\nprogramming language that is empowering everyone to build reliable and\nefficient software.</p>\n<p>If you have a previous version of Rust installed via rustup, getting Rust\n1.85.1 is as easy as:</p>\n<pre class=\"z-code\"><code><span class=\"z-text z-plain\">rustup update stable\n</span></code></pre>\n<p>If you don't have it already, you can <a href=\"https://www.rust-lang.org/install.html\">get <code>rustup</code></a> from the\nappropriate page on our website.</p>\n<h2 id=\"what-s-in-1-85-1\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/18/Rust-1.85.1/#what-s-in-1-85-1\"></a>\nWhat's in 1.85.1</h2>\n<h3 id=\"fixed-combined-doctest-compilation\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/18/Rust-1.85.1/#fixed-combined-doctest-compilation\"></a>\nFixed combined doctest compilation</h3>\n<p>Due to a bug in the implementation, <a href=\"https://doc.rust-lang.org/edition-guide/rust-2024/rustdoc-doctests.html\">combined doctests</a> did not work as intended in the stable 2024 Edition. Internal errors with feature stability caused rustdoc to automatically use its \"unmerged\" fallback method instead, like in previous editions.</p>\n<p>Those errors are now fixed in 1.85.1, realizing the performance improvement of combined doctest compilation as intended! See the <a href=\"https://github.com/rust-lang/rust/issues/138418\">backport issue</a> for more details, including the risk analysis of making this behavioral change in a point release.</p>\n<h3 id=\"other-fixes\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/18/Rust-1.85.1/#other-fixes\"></a>\nOther fixes</h3>\n<p>1.85.1 also resolves a few regressions introduced in 1.85.0:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/137632/\">Relax some <code>target_feature</code> checks when generating docs.</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/137528/\">Fix errors in <code>std::fs::rename</code> on Windows 1607.</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/137460/\">Downgrade bootstrap <code>cc</code> to fix custom targets.</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/137338/\">Skip submodule updates when building Rust from a source tarball.</a></li>\n</ul>\n<h3 id=\"contributors-to-1-85-1\"><a class=\"anchor\" href=\"https://blog.rust-lang.org/2025/03/18/Rust-1.85.1/#contributors-to-1-85-1\"></a>\nContributors to 1.85.1</h3>\n<p>Many people came together to create Rust 1.85.1. We couldn't have done it\nwithout all of you. <a href=\"https://thanks.rust-lang.org/rust/1.85.1/\">Thanks!</a></p>"}]}], "pacnroll": [{"feed_url": "https://blog.centos.org/feed/", "entries": [{"title": "Introducing Kurchu for CentOS SIG Content Collections", "link": "https://blog.centos.org/2025/05/introducing-kurchu-for-centos-sig-content-collections/?utm_source=rss&utm_medium=rss&utm_campaign=introducing-kurchu-for-centos-sig-content-collections", "published": "2025-05-06T11:07:39", "summary": "Anyone who builds a Linux distribution knows that it\u2019s more than just the ISO you download from the website. When creating Linux distribution artifacts, a set of inputs; processing steps; and outputs need to be defined so that it is understood what comprises the \u201cdistribution\u201d itself. Kurchu is one of those tools aimed at doing this with Fedora/CentOS resources."}, {"title": "Release the Quokka", "link": "https://blog.centos.org/2025/05/release-the-quokka/?utm_source=rss&utm_medium=rss&utm_campaign=release-the-quokka", "published": "2025-05-02T15:07:05", "summary": "After years of discussions, CentOS is excited to present our new mascot: the quokka. We've been discussing a mascot in the Board and Promo SIG for a few years. In fact, the quokka had been mentioned as long ago as the September 2022 Board meeting, and probably earlier. We would probably still be idly discussing [&#8230;]"}, {"title": "CentOS Board Meeting Recap, April 2025", "link": "https://blog.centos.org/2025/04/centos-board-meeting-recap-april-2025/?utm_source=rss&utm_medium=rss&utm_campaign=centos-board-meeting-recap-april-2025", "published": "2025-04-11T19:07:42", "summary": "The recording of the April CentOS Board meeting is now available. Watch the recording` Read the minutes The recording has timestamps so you can skip to the parts that interest you. Here are a few highlights of the meeting: The Board discussed ongoing efforst to move content to GitLab. The new Proposed Updates SIG gave [&#8230;]"}, {"title": "CentOS Board Meeting Recap, March 2025", "link": "https://blog.centos.org/2025/03/centos-board-meeting-recap-march-2025/?utm_source=rss&utm_medium=rss&utm_campaign=centos-board-meeting-recap-march-2025", "published": "2025-03-18T18:43:45", "summary": "The recording of the March CentOS Board meeting is now available. Watch the recording Read the minutes The recording has timestamps so you can skip to the parts that interest you. Here are a few highlights of the meeting: The board talked about some details of migrating more SIG activity to GitLab. There was a [&#8230;]"}]}, {"feed_url": "https://www.debian.org/News/news", "entries": []}, {"feed_url": "https://bits.debian.org/feeds/atom.xml", "entries": [{"title": "Bits from the DPL", "link": "https://bits.debian.org/2025/05/bits-from-the-dpl-may-25.html", "published": "2025-05-11T22:00:00", "summary": "<p>Dear Debian community,</p>\n<p>This is bits from the DPL for April.</p>\n<h2>End of 10</h2>\n<p>I am sure I was speaking in the interest of the whole project when\njoining the <a href=\"https://endof10.org/\">\"End of 10\"</a> campaign.  Here is what I wrote to the\ninitiators:</p>\n<blockquote>\n<p>Hi Joseph and all drivers of the \"End of 10\" campaign,\nOn behalf of the entire Debian project, I would like to say that we\nproudly join your great campaign.  We stand with you in promoting Free\nSoftware, defending users' freedoms, and protecting our planet by\navoiding unnecessary hardware waste.\nThank you for leading this important initiative.</p>\n<blockquote>\n<p>Andreas Tille\nDebian Project Leader</p>\n</blockquote>\n</blockquote>\n<p>I have some goals I would like to share with you for my second term.</p>\n<h2>Ftpmaster delegation</h2>\n<p>This splits up into tasks that can be done before and after Trixie release.</p>\n<p>Before Trixie:</p>\n<h2>&#8291;1. Reducing Barriers to DFSG Compliance Checks</h2>\n<p><a href=\"https://lists.debian.org/debian-devel-announce/2002/03/msg00019.html\">Back in 2002</a>, Debian established a way to distribute cryptographic\nsoftware in the main archive, whereas such software had previously been\nrestricted to the non-US archive. One result of this arrangement which\ninfluences our workflow is that all packages uploaded to the NEW queue\nmust remain on the server that <a href=\"https://salsa.debian.org/debconf-team/public/data/dc24/-/blob/main/etherpad/txt/154-meet-the-ftpteam.txt#L165-175\">hosts it</a>. This requirement means that\nmembers of the ftpmaster team must log in to that specific machine,\nwhere they are limited to a restricted set of tools for reviewing\nuploaded code.</p>\n<p>This setup may act as a barrier to participation--particularly for\ncontributors who might otherwise assist with reviewing packages for DFSG\ncompliance. I believe it is time to reassess this limitation and work\ntoward removing such hurdles.</p>\n<p>In October last year, we had some initial contact with SPI's legal\ncounsel, who noted that US regulations around cryptography have been\nrelaxed somewhat in recent years (as of 2021). This suggests it may now\nbe possible to revisit and potentially revise the conditions under which\nwe manage cryptographic software in the NEW queue.</p>\n<p>I plan to investigate this further. If you have expertise in software or\nexport control law and are interested in helping with this topic, please\nget in touch with me.</p>\n<p>The ultimate goal is to make it easier for more people to contribute to\nensuring that code in the NEW queue complies with the DFSG.</p>\n<h2>&#8291;2. Discussing Alternatives</h2>\n<p>My chances to reach out to other distributions remained limited.\nHowever, regarding the processing of new software, I learned that\nOpenSUSE uses a Git-based workflow that requires five \"LGTM\" approvals\nfrom a group of trusted developers. As far as I know, Fedora follows a\nsimilar approach.</p>\n<p>Inspired by this, a recent community initiative--the Gateway to NEW\nproject--enables peer review of new packages for DFSG compliance before\nthey enter the NEW queue. This effort allows anyone to contribute by\nreviewing packages and flagging potential issues in advance <a href=\"https://lists.debian.org/debian-devel/2025/04/msg00067.html\">via</a> <a href=\"https://salsa.debian.org/newgateway-team\">Git</a>.\nI particularly appreciate that the DFSG review is coupled with CI,\nallowing for both license and technical evaluation.</p>\n<p>While this process currently results in some duplication of work--since\nfinal reviews are still performed by the ftpmaster team--it offers a\nvaluable opportunity to catch issues early and improve the overall\nquality of uploads. If the community sees long-term value in this\napproach, it could serve as a basis for evolving our workflows.\nIntegrating it more closely into DAK could streamline the process, and\nwe've recently seen that <a href=\"https://salsa.debian.org/ftp-team/dak/-/merge_requests/286\">merge requests</a> reflecting community suggestions\ncan be accepted promptly.</p>\n<p>For now, I would like to gather opinions about how such initiatives\ncould best complement the current NEW processing, and whether greater\nconsensus on trusted peer review could help reduce the burden on the\nteam doing DFSG compliance checks. Submitting packages for review and\nautomated testing before uploading can improve quality and encourage\nbroader participation in safeguarding Debian's Free Software principles.</p>\n<p>My explicit thanks go out to the Gateway to NEW team for their valuable\nand forward-looking contribution to Debian.</p>\n<h2>&#8291;3. Documenting Critical Workflows</h2>\n<p>Past ftpmaster trainees have told me that understanding the full set of\nftpmaster workflows can be quite difficult. While there is some useful\ndocumentation \u2212 thanks in particular to Sean Whitton for his work on\ndocumenting <a href=\"https://salsa.debian.org/ftp-team/manpages/-/blob/master/doc/ftp-new.7.man?ref_type=heads\">NEW processing rules</a> \u2013 many other important tasks carried\nout by the ftpmaster team remain undocumented or only partially so.</p>\n<p>Comprehensive and accessible documentation would greatly benefit current\nand future team members, especially those onboarding or assisting in\nspecific workflows. It would also help ensure continuity and\ntransparency in how critical parts of the archive are managed.</p>\n<p>If such documentation already exists and I have simply overlooked it, I\nwould be happy to be corrected. Otherwise, I believe this is an area\nwhere we need to improve significantly. Volunteers with a talent for\nwriting technical documentation are warmly invited to contact me--I'd be\nhappy to help establish connections with ftpmaster team members who are\nwilling to share their knowledge so that it can be written down and\npreserved.</p>\n<p>Once Trixie is released (hopefully before DebConf):</p>\n<h2>&#8291;4. Split of the Ftpmaster Team into DFSG and Archive Teams</h2>\n<p>As discussed during the <a href=\"https://salsa.debian.org/debconf-team/public/data/dc24/-/blob/main/etherpad/txt/154-meet-the-ftpteam.txt#L67-74\">\"Meet the ftpteam\" BoF</a> at DebConf24, I would\nlike to propose a structural refinement of the current Ftpmaster team\nby introducing two different delegated teams:</p>\n<ol>\n<li>DFSG Team</li>\n<li>Archive Team (responsible for DAK maintenance and process tooling,\n   including releases)</li>\n</ol>\n<p>(Alternative name suggestions are, of course, welcome.) The primary task\nof the DFSG team would be the processing of the NEW queue and ensuring\nthat packages comply with the DFSG.  The Archive team would focus on\nmaintaining DAK and handling the technical aspects of archive\nmanagement.</p>\n<p>I am aware that, in the recent past, the ftpmaster team has decided not\nto actively seek new members. While I respect the autonomy of each team,\nthe resulting lack of a recruitment pipeline has led to some friction\nand concern within the wider community, including myself. As Debian\nProject Leader, it is my responsibility to ensure the long-term\nsustainability and resilience of our project, which includes fostering\nan environment where new contributors can join and existing teams remain\neffective and well-supported. Therefore, even if the current team does\nnot prioritize recruitment, I will actively seek and encourage new\ncontributors for both teams, with the aim of supporting openness and\ncollaboration.</p>\n<p>This proposal is not intended as criticism of the current team's\ndedication or achievements--on the contrary, I am grateful for the hard\nwork and commitment shown, often under challenging circumstances. My\nintention is to help address the structural issues that have made\nonboarding and specialization difficult and to ensure that both teams\nare well-supported for the future.</p>\n<p>I also believe that both teams should regularly inform the Debian\ncommunity about the policies and procedures they apply. I welcome any\nsuggestions for a more detailed description of the tasks involved, as\nwell as feedback on how best to implement this change in a way that\nsupports collaboration and transparency.</p>\n<p>My intention with this proposal is to foster a more open and effective\nworking environment, and I am committed to working with all involved to\nensure that any changes are made collaboratively and with respect for\nthe important work already being done.</p>\n<p>I'm aware that the ideas outlined above touch on core parts of how\nDebian operates and involve responsibilities across multiple teams.\nThese are not small changes, and implementing them will require\nthoughtful discussion and collaboration.</p>\n<p>To move this forward, I've registered a dedicated BoF for DebConf. To\nmake the most of that opportunity, I'm looking for volunteers who feel\ncommitted to improving our workflows and processes. With your help, we\ncan prepare concrete and sensible proposals in advance--so the limited\ntime of the BoF can be used effectively for decision-making and\nconsensus-building.</p>\n<p>In short: I need your help to bring these changes to life. From my\nexperience in my last term, I know that when it truly matters, the\nDebian community comes together--and I trust that spirit will guide us\nagain.</p>\n<p>Please also note: we had a <a href=\"https://lists.debian.org/debian-devel-announce/2020/03/msg00003.html\">\"Call for volunteers\"</a> five years ago, and\nmuch of what was written there still holds true today. I've been told\nthat the response back then was overwhelming--but that training such a\nlarge number of volunteers didn't scale well. This time, I hope we can\nfind a more sustainable approach: training a few dedicated people first,\nand then enabling them to pass on their knowledge. This will also be a\ntopic at the DebCamp sprint.</p>\n<h2>Dealing with Dormant Packages</h2>\n<p>Debian was founded on the principle that each piece of software should\nbe maintained by someone with expertise in it--typically a single,\nresponsible maintainer. This model formed the historical foundation of\nDebian's packaging system and helped establish high standards of quality\nand accountability. However, as the project has grown and the number of\npackages has expanded, this model no longer scales well in all areas.\nTeam maintenance has since emerged as a practical complement, allowing\nmultiple contributors to share responsibility and reduce\nbottlenecks--depending on each team's internal policy.</p>\n<p>While working on the <a href=\"https://salsa.debian.org/qa/tiny_qa_tools/-/wikis/Tiny-QA-tasks#bug-of-the-day\">Bug of the Day initiative</a>, I observed a\nsignificant number of packages that have not been updated in a long\ntime. In the case of team-maintained packages, addressing this is often\nstraightforward: team uploads can be made, or the team can be asked\nwhether the package should be removed. We've also identified many\npackages that would fit well under the umbrella of active teams, such as\nlanguage teams like Debian Perl and Debian Python, or blends like Debian\nGames and Debian Multimedia. Often, no one has taken action--not because\nof disagreement, but simply due to inattention or a lack of initiative.</p>\n<p>In addition, we've found several packages that probably should be\nremoved entirely. In those cases, we've filed bugs with pre-removal\nwarnings, which can later be escalated to removal requests.</p>\n<p>When a package is still formally maintained by an individual, but shows\nsigns of neglect (e.g., no uploads for years, unfixed RC bugs, failing\nautopkgtests), we currently have three main tools:</p>\n<ol>\n<li>The <a href=\"https://www.debian.org/doc/manuals/developers-reference/beyond-pkging.en.html#dealing-with-inactive-and-or-unreachable-maintainers\">MIA process</a>, which handles inactive or unreachable\n   maintainers.</li>\n<li><a href=\"https://www.debian.org/doc/manuals/developers-reference/pkgs.html#package-salvaging\">Package Salvaging</a>, which allows contributors to take over\n   maintenance if conditions are met.</li>\n<li><a href=\"https://www.debian.org/doc/manuals/developers-reference/pkgs.en.html#non-maintainer-uploads-nmus\">Non-Maintainer Uploads</a> (NMUs), which are limited to specific,\n   well-defined fixes (which do not include things like migration\n   to Salsa).</li>\n</ol>\n<p>These mechanisms are important and valuable, but they don't always allow\nus to react swiftly or comprehensively enough. Our tools for identifying\npackages that are effectively unmaintained are relatively weak, and the\nthresholds for taking action are often high.</p>\n<p>The Package Salvage team is currently trialing a process we've\nprovisionally called \"Intend to NMU\" (ITN). The name is admittedly\nquestionable--some have suggested alternatives like \"Intent to\nOrphan\"--and discussion about this is ongoing on <a href=\"https://lists.debian.org/debian-devel/2025/05/msg00082.html\">debian-devel</a>. The\nmechanism is intended for situations where packages appear inactive but\naren't yet formally orphaned, introducing a clear 21-day notice period\nbefore NMUs, similar in spirit to the existing ITS process.  The\ndiscussion has sparked suggestions for expanding <a href=\"https://lists.debian.org/debian-devel/2025/05/msg00144.html\">NMU rules</a>.</p>\n<p>While it is crucial not to undermine the autonomy of maintainers who\nremain actively involved, we also must not allow a strict interpretation\nof this autonomy to block needed improvements to obviously neglected\npackages.</p>\n<p>To be clear: I do not propose to change the rights of maintainers who\nare clearly active and invested in their packages. That model has served\nus well. However, we must also be honest that, in some cases,\nmaintainers stop contributing--quietly and without transition plans. In\nthose situations, we need more agile and scalable procedures to uphold\nDebian's high standards.</p>\n<p>To that end, I've registered a BoF session for DebConf25 to discuss\npotential improvements in how we handle dormant packages. These\ndiscussions will be prepared during a sprint at DebCamp, where I hope to\nwork with others on concrete ideas.</p>\n<p>Among the topics I want to revisit is my proposal from last November on\ndebian-devel, titled <a href=\"https://lists.debian.org/debian-devel/2024/12/msg00101.html\">\"Barriers between packages and other people\"</a>.\nWhile the thread prompted substantial discussion, it understandably\ndidn't lead to consensus. I intend to ensure the various viewpoints are\nfairly summarised--ideally by someone with a more neutral stance than\nmyself--and, if possible, work toward a formal proposal during the\nDebCamp sprint to present at the DebConf BoF.</p>\n<p>My hope is that we can agree on mechanisms that allow us to act more\neffectively in situations where formerly very active volunteers have,\nfor whatever reason, moved on. That way, we can protect both Debian's\nquality and its collaborative spirit.</p>\n<h2>Building Sustainable Funding for Debian</h2>\n<p>Debian incurs ongoing expenses to support its\ninfrastructure--particularly hardware maintenance and upgrades--as well as\nto fund in-person meetings like sprints and mini-DebConfs. These\ninvestments are essential to our continued success: they enable\nproductive collaboration and ensure the robustness of the operating\nsystem we provide to users and derivative distributions around the\nworld.</p>\n<p>While DebConf benefits from generous sponsorship, and we regularly\nreceive donated hardware, there is still considerable room to grow our\nfinancial base--especially to support less visible but equally critical\nactivities. One key goal is to establish a more constant and predictable\nstream of income, helping Debian plan ahead and respond more flexibly to\nemerging needs.</p>\n<p>This presents an excellent opportunity for contributors who may not be\ninvolved in packaging or technical development. Many of us in Debian are\nengineers first--and fundraising is not something we've been trained to\ndo. But just like technical work, building sustainable funding requires\nexpertise and long-term engagement.</p>\n<p>If you're someone who's passionate about Free Software and has\nexperience with fundraising, donor outreach, sponsorship acquisition, or\nnonprofit development strategy, we would deeply value your help.\nSupporting Debian doesn't have to mean writing code. Helping us build a\nsteady and reliable financial foundation is just as important--and could\nmake a lasting impact.</p>\n<p>Kind regards\n    Andreas.</p>\n<p>PS: In April I also planted my 5000th tree and while this is off-topic here\n    I'm proud to share <a href=\"https://fam-tille.de/baeume_pflanzen/index.html#statistik\">this information</a> with my fellow Debian friends.</p>"}, {"title": "Debian Project Leader election 2025 is over, Andreas Tille re-elected!", "link": "https://bits.debian.org/2025/04/results-dpl-election-2025.html", "published": "2025-04-25T10:05:00", "summary": "<p>The voting period and tally of votes for the Debian Project Leader election\nhas just concluded and the winner is Andreas Tille, who has been elected for\nthe second time. Congratulations!</p>\n<p>Out of a total of 1,030 developers, 362 voted. As usual in Debian, the voting\nmethod used was the\n<a href=\"http://en.wikipedia.org/wiki/Condorcet_method\">Condorcet method</a>.</p>\n<p>More information about the result is available in the <a href=\"https://www.debian.org/vote/2025/vote_001\">Debian Project Leader\nElections 2025 page</a>.</p>\n<p>Many thanks to Andreas Tille, Gianfranco Costamagna, Julian Andres Klode, and\nSruthi Chandran for their campaigns, and to our Developers for voting.</p>\n<p>The new term for the project leader started on April 21st and will expire on\nApril 20th 2026.</p>"}, {"title": "Bits from the DPL", "link": "https://bits.debian.org/2025/04/bits-from-the-dpl-april-25.html", "published": "2025-04-11T22:00:00", "summary": "<p>Dear Debian community,</p>\n<p>this is bits from DPL for March (sorry for the delay, I was waiting\nfor some additional input).</p>\n<h2>Conferences</h2>\n<p>In March, I attended two conferences, each with a distinct motivation.</p>\n<p>I joined FOSSASIA to address the imbalance in geographical developer\nrepresentation.  Encouraging more developers from Asia to contribute to\nFree Software is an important goal for me, and FOSSASIA provided a\nvaluable opportunity to work towards this.</p>\n<p>I also attended Chemnitzer Linux-Tage, a conference I have been part of\nfor over 20 years. To me, it remains a key gathering for the German Free\nSoftware community \u2013a place where contributors meet, collaborate, and\nexchange ideas.</p>\n<p>I have a remark about submitting an event proposal to both FOSDEM <em>and</em>\nFOSSASIA:</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;<em>Cross distribution experience exchange</em></p>\n<blockquote>\n<p>As Debian Project Leader, I have often reflected on how other Free\nSoftware distributions address challenges we all face. I am interested\nin discussing how we can learn from each other to improve our work and\nbetter serve our users.  Recognizing my limited understanding of other\ndistributions, I aim to bridge this gap through open knowledge exchange.\nMy hope is to foster a constructive dialogue that benefits the\nbroader Free Software ecosystem.  Representatives of other distributions\nare encouraged to participate in this BoF\u00a0\u2013whether as contributors or\nofficial co-speakers. My intention is not to drive the discussion from a\nDebian-centric perspective but to ensure that all distributions have an\nequal voice in the conversation.</p>\n</blockquote>\n<p>This event proposal was part of my commitment from my 2024 DPL platform,\nspecifically under the section <a href=\"https://www.debian.org/vote/2024/platforms/tille\">\"Reaching Out to Learn\"</a>. Had it been\naccepted, I would have also attended FOSDEM. However, both FOSDEM and\nFOSSASIA rejected the proposal.</p>\n<p>In hindsight, reaching out to other distribution contributors beforehand\nmight have improved its chances. I may take this approach in the future\nif a similar opportunity arises. That said, rejecting an\ninterdistribution discussion without any feedback is, in my view, a\nmissed opportunity for collaboration.</p>\n<h2>FOSSASIA Summit</h2>\n<p>The <a href=\"https://www.eventyay.com/e/4c0e0c27/schedule\">14th FOSSASIA Summit</a> took place in Bangkok. As a leading\nopen-source technology conference in Asia, it brings together\ndevelopers, startups, and tech enthusiasts to collaborate on projects in\nAI, cloud computing, IoT, and more.</p>\n<p>With a strong focus on open innovation, the event features hands-on\nworkshops, keynote speeches, and community-driven discussions,\nemphasizing open-source software, hardware, and digital freedom. It\nfosters a diverse, inclusive environment and highlights Asia's growing\nrole in the global FOSS ecosystem.</p>\n<p>I presented a talk on <a href=\"https://www.eventyay.com/e/4c0e0c27/session/9658\">Debian as a Global Project</a> and led a\n<a href=\"https://www.eventyay.com/e/4c0e0c27/session/9668\">packaging workshop</a>. Additionally, to further support attendees\ninterested in packaging, I hosted an extra self-organized workshop at a\nhacker caf\u00e9, initiated by participants eager to deepen their skills.</p>\n<p>There was another Debian related talk given by Ananthu titled\n<a href=\"https://www.eventyay.com/e/4c0e0c27/session/9636\">\"The Herculean Task of OS Maintenance - The Debian Way!\"</a></p>\n<p>To further my goal of increasing diversity within Debian \u2013particularly\nby encouraging more non-male contributors\u2013 I actively engaged with\nattendees, seeking opportunities to involve new people in the project.\nWhether through discussions, mentoring, or hands-on sessions, I aimed to\nmake Debian more approachable for those who might not yet see themselves\nas contributors. I was fortunate to have the support of Debian\nenthusiasts from India and China, who ran the Debian booth and helped\ncreate a welcoming environment for these conversations. Strengthening\ndiversity in Free Software is a collective effort, and I hope these\ninteractions will inspire more people to get involved.</p>\n<h2>Chemnitzer Linuxtage</h2>\n<p>The <a href=\"https://chemnitzer.linux-tage.de/2025/de/programm\">Chemnitzer Linux-Tage</a> (CLT) is one of Germany's largest and\nlongest-running community-driven Linux and open-source conferences, held\nannually in Chemnitz since 2000. It has been my favorite conference in\nGermany, and I have tried to attend every year.</p>\n<p>Focusing on Free Software, Linux, and digital sovereignty, CLT offers a\nmix of expert talks, workshops, and exhibitions, attracting hobbyists,\nprofessionals, and businesses alike. With a strong grassroots ethos, it\nemphasizes hands-on learning, privacy, and open-source advocacy while\nfostering a welcoming environment for both newcomers and experienced\nLinux users.</p>\n<p>Despite my appreciation for the diverse and high-quality talks at CLT,\nmy main focus was on connecting with people who share the goal of\nattracting more newcomers to Debian. Engaging with both longtime\ncontributors and potential new participants remains one of the most\nvaluable aspects of the event for me.</p>\n<p>I was fortunate to be joined by Debian enthusiasts staffing the Debian\nbooth, where I found myself among both experienced booth volunteers \u2013who\nhave attended many previous CLT events\u2013 and young newcomers. This was\nparticularly reassuring, as I certainly can't answer every detailed\nquestion at the booth. I greatly appreciate the knowledgeable people who\nrepresent Debian at this event and help make it more accessible to\nvisitors.</p>\n<p>As a small point of comparison \u2013while FOSSASIA and CLT are fundamentally\ndifferent events\u2013 the gender ratio stood out. FOSSASIA had a noticeably\nhigher proportion of women compared to Chemnitz. This contrast\nhighlighted the ongoing need to foster more diversity within Free\nSoftware communities in Europe.</p>\n<p>At CLT, I gave a talk titled <a href=\"https://chemnitzer.linux-tage.de/2025/de/programm/beitrag/136\">\"Tausend Freiwillige, ein Ziel\"</a> (Thousand\nVolunteers, One Goal), which was <a href=\"https://mirror.netcologne.de/CCC//events/clt/2025/h264-hd/clt25-27-deu-Tausend_Freiwillige_ein_Ziel_hd.mp4\">video recorded</a>. It took\nplace in the grand auditorium and attracted a mix of long-term\ncontributors and newcomers, making for an engaging and rewarding\nexperience.</p>\n<p>Kind regards\n    Andreas.</p>"}, {"title": "DebConf25 Registration and Call for Proposals are open", "link": "https://bits.debian.org/2025/04/debconf25-registration-opens.html", "published": "2025-04-11T10:00:00", "summary": "<p>The 26th edition of the Debian annual conference will be held in Brest,\nFrance, from July 14th to July 20th, 2025. The main conference will be\npreceded by DebCamp, from July 7th to July 13th. We invite everyone\ninterested to register for the event to attend DebConf25 in person. You can\nalso submit a talk or event proposal if you're interested in presenting your\nwork in Debian at DebConf25.</p>\n<p>Registration can be done by creating an account on the <a href=\"https://debconf25.debconf.org/\">DebConf25\nwebsite</a> and clicking on \"Register\" in the\nprofile section.</p>\n<p>As always, basic registration is free of charge. If you are attending\nthe conference in a professional capacity or as a representative of your\ncompany, we kindly ask that you consider registering in one of our <a href=\"https://debconf25.debconf.org/about/registration/\">paid\ncategories</a>. This helps\ncover the costs of organizing the event while also supporting subsidizing\nother community members attendance. The last day to register with guaranteed\nswag is 9th June.</p>\n<p>We encourage eligible individuals to apply for a diversity\nbursary. Travel, food, and accommodation bursaries are\navailable. More details can be found on the <a href=\"https://debconf25.debconf.org/about/bursaries/\">bursary information\npage</a>. The last day to apply\nfor a bursary is April 14th. Applicants should receive feedback on their\nbursary application by April 25th.</p>\n<p>The call for proposals for talks, discussions and other activities is also\nopen. To submit a proposal, you need to create an account on the website and\nclick the \"Submit Talk Proposal\" button in  the profile section. The last day\nto submit and have your proposal considered for the main conference schedule,\nwith video coverage guaranteed, is May 25th.</p>\n<p>DebConf25 is also looking for sponsors; if you are interested or think\nyou know of others who would be willing to help, please get in touch with\nsponsors@debconf.org.</p>\n<p>All important dates can be found on the link\n<a href=\"https://debconf25.debconf.org/schedule/important-dates/\">here</a>.</p>\n<p>See you in Brest!</p>"}, {"title": "Viridien Platinum Sponsor of DebConf25", "link": "https://bits.debian.org/2025/03/viridien-platinum-debconf25.html", "published": "2025-03-27T10:50:00", "summary": "<!-- Due to external/permission reasons, I'll request this announcement be only published in English. Thanks! -->\n\n<p><a href=\"https://www.viridiengroup.com/\"><img alt=\"viridien-logo\" src=\"https://bits.debian.org/images/viridien.png\" /></a></p>\n<p>We are pleased to announce that <strong><a href=\"https://www.viridiengroup.com/\">Viridien</a></strong>\nhas committed to sponsor <a href=\"https://debconf25.debconf.org/\">DebConf25</a> as a\n<strong>Platinum Sponsor</strong>.</p>\n<p><a href=\"https://www.viridiengroup.com\">Viridien</a> is an advanced technology, digital\nand Earth data company that pushes the boundaries of science for a more\nprosperous and sustainable future.</p>\n<p>Viridien has been using Debian-based systems to power most of its HPC\ninfrastructure and its cloud platform since 2009 and currently employs two\nactive Debian Project Members.</p>\n<p>As a Platinum Sponsor, Viridien is contributing to the Debian annual\nDevelopers' conference, directly supporting the progress of Debian and Free\nSoftware. Viridien contributes to strengthen the community that collaborates\non the Debian project from all around the world throughout all of the year.</p>\n<p>Thank you very much, Viridien, for your support of DebConf25!</p>\n<h2>Become a sponsor too!</h2>\n<p><a href=\"https://debconf25.debconf.org/\">DebConf25</a> will take place <strong>from 14 to 20\nJuly 2025 in Brest, France,</strong> and will be preceded by DebCamp, from 7 to 13\nJuly 2025.</p>\n<p>DebConf25 is accepting sponsors! Interested companies and organizations may\ncontact the DebConf team through\n<a href=\"mailto:sponsors@debconf.org\">sponsors@debconf.org</a>, and visit the DebConf25\nwebsite at\n<a href=\"https://debconf25.debconf.org/sponsors/become-a-sponsor/\">https://debconf25.debconf.org/sponsors /become-a-sponsor/</a>.</p>"}, {"title": "New Debian Developers and Maintainers (January and February 2025)", "link": "https://bits.debian.org/2025/03/new-developers-2025-02.html", "published": "2025-03-24T15:00:00", "summary": "<p>The following contributors got their Debian Developer accounts in the last two\nmonths:</p>\n<ul>\n<li>Bo Yu (vimer)</li>\n<li>Maytham Alsudany (maytham)</li>\n<li>Rebecca Natalie Palmer (mpalmer)</li>\n</ul>\n<p>The following contributors were added as Debian Maintainers in the last two\nmonths:</p>\n<ul>\n<li>NoisyCoil</li>\n<li>Arif Ali</li>\n<li>Julien Plissonneau Duqu\u00e8ne</li>\n<li>Maarten Van Geijn</li>\n<li>Ben Collins</li>\n</ul>\n<p>Congratulations!</p>"}]}, {"feed_url": "https://blog.cocoapods.org/feed.xml", "entries": []}, {"feed_url": "https://www.alpinelinux.org/atom.xml", "entries": []}, {"feed_url": "https://github.com/rpm-software-management/dnf5/discussions/categories/announcements.atom", "entries": []}, {"feed_url": "https://github.com/rpm-software-management/rpm/discussions/categories/announcements.atom", "entries": [{"title": "RPM 6.0.0 ALPHA", "link": "https://github.com/rpm-software-management/rpm/discussions/3712", "published": "2025-04-08T12:35:22", "summary": "<p dir=\"auto\">We've had a bit of a team tradition to do April's Fool jokes, but this year I said, I think it's enough of a joke that we're actually releasing RPM 6.0.</p>\n<p dir=\"auto\">It's been a long time coming.</p>\n<p dir=\"auto\">The RPM v4 format turns 25 this year. In this world of quarter economics churn, a quarter of a century is quite something, I think we can conclude the format has proven flexible and has served us rather well. It's also safe to say that a new format is long overdue by now. What was considered state of the art security in 2000 is either long obsolete and/or considered insecure practises, and that's really the main story behind RPM 6.0 and the new v6 format:</p>\n<ul dir=\"auto\">\n<li>RPM defaults to enforcing signature checking (<a href=\"https://github.com/rpm-software-management/rpm/issues/1573\">#1573</a>)</li>\n<li>RPM uses the full key ID or fingerprint to identify OpenPGP keys everywhere (<a href=\"https://github.com/rpm-software-management/rpm/issues/2403\">#2403</a>)</li>\n<li>Support for multiple OpenPGP signatures per package (<a href=\"https://github.com/rpm-software-management/rpm/issues/\">#3385</a>)</li>\n<li>Support for updating previously imported keys (<a href=\"https://github.com/rpm-software-management/rpm/issues/2577\">#2577</a>)</li>\n<li>Support for both RPM v4 and v6 packages</li>\n<li>Support for installing RPM v3 packages has been removed (<a href=\"https://github.com/rpm-software-management/rpm/issues/1107\">#1107</a>)</li>\n<li>By default, RPM no longer verifies obsolete crypto (MD5, SHA1, DSA)</li>\n<li>Man page overhaul (work in progress as of 6.0 alpha)</li>\n<li>Pristine and verifiable release tarballs (<a href=\"https://github.com/rpm-software-management/rpm/issues/3565\">#3565</a>, <a href=\"https://github.com/rpm-software-management/rpm/issues/2702\">#2702</a>)</li>\n</ul>\n<p dir=\"auto\">Further details and download information on the release notes page: <a href=\"https://rpm.org/releases/6.0.0\" rel=\"nofollow\">https://rpm.org/releases/6.0.0</a></p>\n<p dir=\"auto\">As usual, Fedora rawhide will be braving through the pre-releases so look there for an easy, early hands-on experience.</p>\n<p dir=\"auto\">We don't really expect a wide-spread adoption of the v6 format during this year. The important part is that people in charge of rpm-related infrastructure can now easily get their hands on v6 packages and can start adopting their systems to work with the new format. Note that the alpha still builds v4 packages by default, so don't be lulled to think there's no work to be done.</p>\n<p dir=\"auto\">For more background on the subject, check out my writeups on the <a href=\"https://github.com/rpm-software-management/rpm/discussions/3349\">rpm format evolution</a>, <a href=\"https://github.com/rpm-software-management/rpm/discussions/2919\">discussion about the v6 format</a> details (there's still some room for minor adjustment) and <a href=\"https://github.com/rpm-software-management/rpm/discussions/3602\">the road to 6.0</a>.</p>\n<p dir=\"auto\">On behalf of the rpm-team,<br />\nPanu</p>"}]}, {"feed_url": "https://www.swift.org/atom.xml", "entries": [{"title": "ICYMI: Memory Safety, Ecosystem Talks, and Java Interoperability at FOSDEM 2025", "link": "https://swift.org/blog/memory-safety-ecosystem-talks-java-interoperability-fosdem-2025/", "published": "2025-05-05T11:55:00", "summary": "<p>The Swift community had a strong presence at FOSDEM 2025, the world\u2019s largest independently run open source conference, held every year in Brussels, Belgium. FOSDEM highlighted a range of Swift-related talks related to memory safety, a broad ecosystem around Swift including using it to develop web services and embedded projects, and new areas of the project including Java interoperability.</p>\n\n<p>In case you missed it, here are a few highlights from the event:</p>\n\n<h2 class=\"header-with-anchor\" id=\"memory-safety-in-swift\">Memory Safety in Swift <a href=\"https://www.swift.org/atom.xml#memory-safety-in-swift\" title=\"Permalink for Memory Safety in Swift section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>The main track of the conference featured a talk presented by Doug Gregor on memory safety: <a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-6176-incremental-memory-safety-in-an-established-software-stack-lessons-learned-from-swift/\">\u201cIncremental Memory Safety in an Established Software Stack: Lessons Learned from Swift.\u201d</a></p>\n\n<p><img alt=\"Slide from a presentation at FOSDEM 2025 titled 'Incremental Memory Safety in an Established Software Stack: Lessons Learned from Swift' by Doug Gregor.\" src=\"https://www.swift.org/assets/images/fosdem-2025-memory-and-java-blog/fosdem2025-1.png\" /></p>\n\n<p>If you\u2019re interested in learning more about Swift\u2019s memory safe features, this talk is a great place to start; it walks through  the different dimensions of memory safety in Swift, the language\u2019s safe interoperability with C(++), and reflects on lessons learned for both programming language design and adopting Swift in an established software codebase.</p>\n\n<p>To learn more about memory in safety in Swift, see the <a href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/memorysafety/\">Swift documentation page on memory safety</a>,as well as a features <a href=\"https://github.com/swiftlang/swift-evolution/blob/main/visions/memory-safety.md\">vision document on memory safety</a>.</p>\n\n<h2 class=\"header-with-anchor\" id=\"swift-devroom\">Swift DevRoom <a href=\"https://www.swift.org/atom.xml#swift-devroom\" title=\"Permalink for Swift DevRoom section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>FOSDEM is primarily organized into DevRooms, volunteer-organized conference tracks around technical communities and topics. This year Swift celebrated its inaugural DevRoom organized by a local community member, Steven Van Impe, with contributions from a large group of volunteers including proposal reviewers, speakers, and day-of-operations support.</p>\n\n<p>Swift\u2019s first Swift DevRoom was a hit! \ud83c\udf89 The room was packed with 12 talks, covering a wide range of topics and demos from the Swift ecosystem: talks related to running Swift on Linux, to showcasing various IDEs like VS Code, and a whole hour dedicated to embedded content. A few talks to highlight from the event:</p>\n\n<ul>\n  <li><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5284-building-a-ferrofluidic-music-visualizer-with-embedded-swift/\">Building a Ferrofluidic Music Visualizer with Embedded Swift</a></li>\n  <li><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5116-how-to-put-swift-in-a-box-building-container-images-with-swift-container-plugin/\">Building container images with swift-container-plugin</a></li>\n  <li><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5218-distributed-tracing-in-server-side-swift/\">Distributed Tracing in Server-Side Swift</a></li>\n</ul>\n\n<p>Check out the <a href=\"https://fosdem.org/2025/schedule/track/swift/\">complete lineup</a> to learn more!</p>\n\n<h2 class=\"header-with-anchor\" id=\"java-interoperability\">Java Interoperability <a href=\"https://www.swift.org/atom.xml#java-interoperability\" title=\"Permalink for Java Interoperability section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>In the Free Java DevRoom, Konrad \u2018ktoso\u2019 Malawski presented on Java interoperability in Swift: <a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-4886-foreign-function-and-memory-apis-and-swift-java-interoperability/\">\u201cForeign Function and Memory APIs and Swift/Java interoperability.\u201c</a></p>\n\n<p><img alt=\"Slide from a presentation at FOSDEM 2025 titled 'Foreign Function and Memory APIs and Swift/Java interoperability' by Konrad 'ktoso' Malawski\" src=\"https://www.swift.org/assets/images/fosdem-2025-memory-and-java-blog/fosdem2025-2.png\" /></p>\n\n<p>Konrad\u2019s talk was a technical deep dive into the <a href=\"https://forums.swift.org/t/java-interoperability-effort/74969\">Java interoperability effort</a> that launched at the 2024, demonstrating the bridges and bindings needed to integrate systems written in these Swift and Java while still maintaining great performance. Catch up on this talk to see how you can leverage existing libraries without complete rewrites.</p>\n\n<p>Work in early development has been <a href=\"https://github.com/swiftlang/swift-java\">released on GitHub</a> for feedback and contributions, and your feedback is welcome on the <a href=\"https://forums.swift.org/c/development/java-interoperability/109\">forums</a>.</p>"}, {"title": "Swift 6.1 Released", "link": "https://swift.org/blog/swift-6.1-released/", "published": "2025-03-31T10:00:00", "summary": "<p>Swift 6.1 is now available!</p>\n\n<p>This release includes new language enhancements to improve productivity, diagnostics improvements, package traits, and ongoing work to improve data-race safety usability and compile times.</p>\n\n<p>Read on for an overview of the changes to the language, package manager, and next steps for getting started with Swift 6.1.</p>\n\n<h2 class=\"header-with-anchor\" id=\"language-and-standard-library\">Language and Standard Library <a href=\"https://www.swift.org/atom.xml#language-and-standard-library\" title=\"Permalink for Language and Standard Library section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<h3 class=\"header-with-anchor\" id=\"concurrency\">Concurrency <a href=\"https://www.swift.org/atom.xml#concurrency\" title=\"Permalink for Concurrency section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h3>\n\n<p>Swift\u2019s concurrency model allows writing <code class=\"language-plaintext highlighter-rouge\">nonisolated</code> on properties and functions to indicate that an API is safe to call from any concurrent context. Swift 6.1 extends <code class=\"language-plaintext highlighter-rouge\">nonisolated</code> to types and extensions. This allows you to write <code class=\"language-plaintext highlighter-rouge\">nonisolated</code> to prevent <code class=\"language-plaintext highlighter-rouge\">@MainActor</code> inference on a type, or to apply <code class=\"language-plaintext highlighter-rouge\">nonisolated</code> to all methods in an extension without having to annotate every method:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@MainActor</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">S</span> <span class=\"p\">{</span>\n  <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n  <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n  <span class=\"c1\">// mutable state and MainActor methods</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">nonisolated</span> <span class=\"kd\">extension</span> <span class=\"kt\">S</span><span class=\"p\">:</span> <span class=\"kt\">CustomStringConvertible</span><span class=\"p\">,</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n  <span class=\"k\">var</span> <span class=\"nv\">description</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"id: </span><span class=\"se\">\\(</span><span class=\"n\">id</span><span class=\"se\">)</span><span class=\"s\">, name: </span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">\"</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"o\">==</span><span class=\"p\">(</span><span class=\"nv\">lhs</span><span class=\"p\">:</span> <span class=\"kt\">S</span><span class=\"p\">,</span> <span class=\"nv\">rhs</span><span class=\"p\">:</span> <span class=\"kt\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n    <span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">id</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Swift 6.1 also improves type inference for task groups by inferring the child task result type of <code class=\"language-plaintext highlighter-rouge\">withTaskGroup</code> and <code class=\"language-plaintext highlighter-rouge\">withThrowingTaskGroup</code>. Previously, you always had to write the child task result type as an argument when creating the task group:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">messages</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">withTaskGroup</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"kt\">Message</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">group</span> <span class=\"k\">in</span>\n  <span class=\"k\">for</span> <span class=\"n\">id</span> <span class=\"k\">in</span> <span class=\"n\">ids</span> <span class=\"p\">{</span>\n    <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">addTask</span> <span class=\"p\">{</span> <span class=\"k\">await</span> <span class=\"nf\">downloadMessage</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"k\">for</span> <span class=\"k\">await</span> <span class=\"n\">message</span> <span class=\"k\">in</span> <span class=\"n\">group</span> <span class=\"p\">{</span>\n    <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">messages</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In Swift 6.1, the child task result type can be inferred from the task group closure:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// No need for `(of: Message.self)` like before.</span>\n<span class=\"k\">let</span> <span class=\"nv\">messages</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">withTaskGroup</span> <span class=\"p\">{</span> <span class=\"n\">group</span> <span class=\"k\">in</span>\n  <span class=\"k\">for</span> <span class=\"n\">id</span> <span class=\"k\">in</span> <span class=\"n\">ids</span> <span class=\"p\">{</span>\n    <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">addTask</span> <span class=\"p\">{</span> <span class=\"k\">await</span> <span class=\"nf\">downloadMessage</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"k\">for</span> <span class=\"k\">await</span> <span class=\"n\">message</span> <span class=\"k\">in</span> <span class=\"n\">group</span> <span class=\"p\">{</span>\n    <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">messages</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The approachability of data-race safety remains an area of active development; you can find an overview of the approach in the <a href=\"https://github.com/swiftlang/swift-evolution/blob/main/visions/approachable-concurrency.md\">vision document for improving the approachability of data-race safety</a>. Many Swift Evolution proposals implementing the features described in the vision document are under active review, and your feedback will help shape these improvements.</p>\n\n<h3 class=\"header-with-anchor\" id=\"implementing-objective-c-types-in-swift\">Implementing Objective-C types in Swift <a href=\"https://www.swift.org/atom.xml#implementing-objective-c-types-in-swift\" title=\"Permalink for Implementing Objective-C types in Swift section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h3>\n\n<p>Swift 6.1 includes a new attribute, <code class=\"language-plaintext highlighter-rouge\">@implementation</code>, which can be used together with <code class=\"language-plaintext highlighter-rouge\">@objc</code> to provide an implementation for a declaration that has been imported from Objective-C. You can write <code class=\"language-plaintext highlighter-rouge\">@objc @implementation</code> on a Swift <code class=\"language-plaintext highlighter-rouge\">extension</code> to replace an Objective-C <code class=\"language-plaintext highlighter-rouge\">@implementation</code> block.</p>\n\n<p>You write headers as normal for an Objective-C class, but instead of writing an <code class=\"language-plaintext highlighter-rouge\">@implementation</code> in an Objective-C file, you write an <code class=\"language-plaintext highlighter-rouge\">@objc @implementation extension</code> in a Swift file. You can even port an existing class\u2019s implementation to Swift one category at a time without breaking backwards compatibility.</p>\n\n<h3 class=\"header-with-anchor\" id=\"productivity-enhancements\">Productivity enhancements <a href=\"https://www.swift.org/atom.xml#productivity-enhancements\" title=\"Permalink for Productivity enhancements section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h3>\n\n<p>Swift allows including trailing commas in collection literals to make it easy to append, remove, reorder, or comment out the last element as any other element:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">rank</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s\">\"Player 1\"</span><span class=\"p\">,</span>\n  <span class=\"s\">\"Player 3\"</span><span class=\"p\">,</span>\n  <span class=\"s\">\"Player 2\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Swift 6.1 extends trailing comma support to tuples, parameter and argument lists, generic parameter lists, closure capture lists, and string interpolations:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">subsequences</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span>\n    <span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nv\">maxSplits</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In addition to improved development ergonomics, code generation tools like plugins and macros can be simplified, because generating a comma-separated list no longer needs a special condition for the last element.</p>\n\n<p>You can find a complete list of language proposals that were accepted through the <a href=\"https://github.com/swiftlang/swift-evolution\">Swift Evolution</a> process and implemented in Swift 6 on the <a href=\"https://www.swift.org/swift-evolution/#?version=6.1\">Swift Evolution dashboard</a>.</p>\n\n<h2 class=\"header-with-anchor\" id=\"package-and-build-improvements\">Package and build improvements <a href=\"https://www.swift.org/atom.xml#package-and-build-improvements\" title=\"Permalink for Package and build improvements section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>Swift 6.1 introduces <em>package traits</em>, a new configuration for packages that allows them to offer different APIs and features when used in specific environments, such as Embedded Swift and WebAssembly. Package authors can define a set of traits in their <code class=\"language-plaintext highlighter-rouge\">Package.swift</code> that their package offers, which provide a way to express conditional compilation and optional dependencies. The package can specify a set of default traits that are enabled in clients, and clients can customize the traits they use when they declare the dependency:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">dependencies</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"o\">.</span><span class=\"nf\">package</span><span class=\"p\">(</span>\n    <span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"s\">\"https://github.com/Org/SomePackage.git\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"s\">\"1.0.0\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">traits</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"o\">.</span><span class=\"k\">default</span><span class=\"p\">,</span> <span class=\"c1\">// enable all of the package's default traits</span>\n      <span class=\"s\">\"Embedded\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>Many editing features, such as jump to definition for APIs in libraries you\u2019re using, are powered by indexing. Before Swift 6.1, indexing occurred when you built your project, which meant that any additions or changes to the library were only surfaced by those editing features after you perform a build. Swift 6.1 enables <a href=\"https://github.com/swiftlang/sourcekit-lsp/blob/main/Documentation/Enable%20Experimental%20Background%20Indexing.md\">background indexing</a> by default for SwiftPM projects in SourceKit-LSP. Cross-module and global functionality stays updated as you make changes to your project.</p>\n\n<h2 class=\"header-with-anchor\" id=\"swift-testing\">Swift Testing <a href=\"https://www.swift.org/atom.xml#swift-testing\" title=\"Permalink for Swift Testing section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>Swift 6.1 enables custom Swift Testing traits to perform logic before or after tests run in order to share set-up or tear-down logic. If you write a custom trait type which conforms to the new <code class=\"language-plaintext highlighter-rouge\">TestScoping</code> protocol, you can implement a method to customize the scope in which each test or suite the trait is applied to will execute. For example, you could implement a trait which binds a task local value to a mocked resource:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">MockAPICredentialsTrait</span><span class=\"p\">:</span> <span class=\"kt\">TestTrait</span><span class=\"p\">,</span> <span class=\"kt\">TestScoping</span> <span class=\"p\">{</span>\n  <span class=\"kd\">func</span> <span class=\"nf\">provideScope</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">test</span><span class=\"p\">:</span> <span class=\"kt\">Test</span><span class=\"p\">,</span> <span class=\"nv\">testCase</span><span class=\"p\">:</span> <span class=\"kt\">Test</span><span class=\"o\">.</span><span class=\"kt\">Case</span><span class=\"p\">?,</span> <span class=\"n\">performing</span> <span class=\"nv\">function</span><span class=\"p\">:</span> <span class=\"kd\">@Sendable</span> <span class=\"p\">()</span> <span class=\"k\">async</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"k\">async</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">mockCredentials</span> <span class=\"o\">=</span> <span class=\"kt\">APICredentials</span><span class=\"p\">(</span><span class=\"nv\">apiKey</span><span class=\"p\">:</span> <span class=\"s\">\"fake\"</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span> <span class=\"k\">await</span> <span class=\"kt\">APICredentials</span><span class=\"o\">.</span><span class=\"n\">$current</span><span class=\"o\">.</span><span class=\"nf\">withValue</span><span class=\"p\">(</span><span class=\"n\">mockCredentials</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"k\">await</span> <span class=\"nf\">function</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Trait</span> <span class=\"k\">where</span> <span class=\"k\">Self</span> <span class=\"o\">==</span> <span class=\"kt\">MockAPICredentialsTrait</span> <span class=\"p\">{</span>\n  <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">mockAPICredentials</span><span class=\"p\">:</span> <span class=\"k\">Self</span> <span class=\"p\">{</span> <span class=\"kt\">Self</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">@Test</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">mockAPICredentials</span><span class=\"p\">)</span>\n<span class=\"kd\">func</span> <span class=\"nf\">example</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Validate API usage, referencing `APICredentials.current`...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>For more details, see <a href=\"https://github.com/swiftlang/swift-evolution/blob/main/proposals/testing/0007-test-scoping-traits.md\">ST-0007: Test Scoping Traits</a>. Swift Testing in Swift 6.1 also includes refined versions of the <code class=\"language-plaintext highlighter-rouge\">#expect(throws:)</code> and <code class=\"language-plaintext highlighter-rouge\">#require(throws:)</code> macros which return their caught errors, making inspecting them in test functions more ergonomic (<a href=\"https://github.com/swiftlang/swift-evolution/blob/main/proposals/testing/0006-return-errors-from-expect-throws.md\">ST-0006</a>).</p>\n\n<h2 class=\"header-with-anchor\" id=\"swift-docc\">Swift-DocC <a href=\"https://www.swift.org/atom.xml#swift-docc\" title=\"Permalink for Swift-DocC section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>Swift-DocC introduces a more human readable and human writable alternative for symbol link disambiguation based on parameter type and return type information. For example, consider these three function overloads with different parameter types and return types:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">doSomething</span><span class=\"p\">(</span><span class=\"nv\">first</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span>  <span class=\"nv\">second</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Double</span>\n<span class=\"kd\">func</span> <span class=\"nf\">doSomething</span><span class=\"p\">(</span><span class=\"nv\">first</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span> <span class=\"nv\">second</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Float</span>\n<span class=\"kd\">func</span> <span class=\"nf\">doSomething</span><span class=\"p\">(</span><span class=\"nv\">first</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span> <span class=\"nv\">second</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Double</span>\n</code></pre></div></div>\n\n<p>Previously, if you wrote a link to one of these overloads you needed to include a short hash of that symbol\u2019s unique identifier to disambiguate the link and uniquely reference the specific overload. Swift-DocC\u2019s warnings aided in writing these hashes but a person can\u2019t decode the resulting hash suffix (<code class=\"language-plaintext highlighter-rouge\">-3c5j</code>) to determine which overload the link is referring to. Now, you can use a combination of parameter types and return types\u2014like  <code class=\"language-plaintext highlighter-rouge\">-(String,_)</code>, <code class=\"language-plaintext highlighter-rouge\">-&gt;Float,</code> or <code class=\"language-plaintext highlighter-rouge\">-(String?,_)-&gt;Double</code>\u2014to disambiguate the link and uniquely reference a specific overload.</p>\n\n<p>You can discover the minimal combination of parameter types and return types for each overload from Swift-DocC\u2019s warnings about ambiguous symbol links. For more details, see <a href=\"https://www.swift.org/documentation/docc/linking-to-symbols-and-other-content#Ambiguous-Symbol-Links\">the Ambiguous Symbol Links section of Linking to Symbols and Other Content</a>.</p>\n\n<h2 class=\"header-with-anchor\" id=\"install-swift-61\">Install Swift 6.1 <a href=\"https://www.swift.org/atom.xml#install-swift-61\" title=\"Permalink for Install Swift 6.1 section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>You can try out these exciting new developments in Swift 6.1 today!</p>\n\n<p>If you\u2019re building apps for Apple platforms, Swift 6.1 is included in Xcode 16.3, now available from the App Store. And the easiest way to install the standalone Swift 6.1 toolchain is using <a href=\"https://www.swift.org/blog/introducing-swiftly_10/\">swiftly</a>, the new Swift version manager that runs on macOS and Linux. Additional installation methods, including for Windows, are included on the <a href=\"https://www.swift.org/install/\">Install Swift</a> page.</p>"}, {"title": "Introducing swiftly 1.0", "link": "https://swift.org/blog/introducing-swiftly_10/", "published": "2025-03-28T06:00:00", "summary": "<p>Today we\u2019re delighted to introduce the first stable release of swiftly, a Swift version manager that takes the pain out of installing, managing and updating your Swift toolchain.</p>\n\n<p>The latest version of Swift is bundled with Xcode for writing apps for Apple platforms. But perhaps you want to install Swift on a different platform like Linux, or use a different version of the toolchain for building services or command line tools. Downloading, extracting and installing a trusted build of Swift along with the relevant dependencies for your operating system can require quite a few manual and error-prone steps.</p>\n\n<p>swiftly has been around for some years as a community-supported tool for Swift developers using Linux. With this release, we\u2019re officially supporting it as part of the core Swift toolchain, including hosting it as part of the <a href=\"https://github.com/swiftlang\">Swift GitHub organization</a>. We\u2019ve also added macOS support to make it easier to install Swift separately from Xcode.</p>\n\n<h2 class=\"header-with-anchor\" id=\"introducing-swiftly\">Introducing swiftly <a href=\"https://www.swift.org/atom.xml#introducing-swiftly\" title=\"Permalink for Introducing swiftly section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>swiftly is the best tool to install the standalone toolchain, providing commands to install Swift on a new system, update to the latest stable version, and experiment or test with nightly snapshots or older versions. It also makes it easy to switch effortlessly between multiple installed toolchains. You can even add a file to your project repository so swiftly will use the same toolchain version for all members of your development team.</p>\n\n<p>Naturally, swiftly itself is written in Swift, and is able to update itself to the latest version.</p>\n\n<h2 class=\"header-with-anchor\" id=\"quick-tour\">Quick tour <a href=\"https://www.swift.org/atom.xml#quick-tour\" title=\"Permalink for Quick tour section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>Let\u2019s take a look at some of the features of swiftly!</p>\n\n<p>To get started, visit <a href=\"https://www.swift.org/install\">swift.org/install</a> and install it.</p>\n\n<p>swiftly will provide directions after installation if there are any system packages, or shell commands needed for smooth operation of the new toolchain.</p>\n\n<p>The latest Swift toolchain is installed as the default, so you can immediately use it to start a new project. For example:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ swift package init\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">swiftly use</code> command selects the default toolchain for Swift commands (e.g. <code class=\"language-plaintext highlighter-rouge\">swift test</code>, <code class=\"language-plaintext highlighter-rouge\">swift build</code>):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ swiftly use 6.0.3\n$ swift --version\n--\nApple Swift version 6.0.3 (swiftlang-6.0.3.1.2 clang-1600.0.28.6)\nTarget: arm64-apple-macosx15.0\n</code></pre></div></div>\n\n<p>At a later point, if there\u2019s a new release of Swift you can install it alongside the existing toolchain with the <code class=\"language-plaintext highlighter-rouge\">latest</code> command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ swiftly install latest\n</code></pre></div></div>\n\n<p>Pre-release of versions of Swift are available, including nightly \u201csnapshot\u201d toolchains. They can be easily listed using swiftly:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ swiftly list-available main-snapshot\n--\nAvailable main development snapshot toolchains\n----------------------------------------------\nmain-snapshot-2025-03-25\n...\n</code></pre></div></div>\n\n<p>Once you\u2019ve identified a snapshot toolchain, it can be installed using its name:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ swiftly install main-snapshot-2025-03-25\n--\nInstalling main-snapshot-2025-03-25\n</code></pre></div></div>\n\n<p>Another way to temporarily use a specific version of Swift is to use the special \u2018+\u2019 selector. With this syntax, you don\u2019t need to first switch to a different toolchain:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ swiftly run lldb +main-snapshot-2025-03-25\n--\n(lldb) _\n</code></pre></div></div>\n\n<p>If you\u2019re building a SwiftPM project in a team setting and want to enforce a common version of the Swift toolchain on all contributors, simply create a <code class=\"language-plaintext highlighter-rouge\">.swift-version</code> file in the root of your project folder with the desired version (e.g. \u201c6.0.3\u201d).</p>\n\n<p>As swiftly is updated with new features and bug fixes, you can run <code class=\"language-plaintext highlighter-rouge\">swiftly self-update</code> to check and install new releases.</p>\n\n<h2 class=\"header-with-anchor\" id=\"how-swiftly-works\">How swiftly works <a href=\"https://www.swift.org/atom.xml#how-swiftly-works\" title=\"Permalink for How swiftly works section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>By writing swiftly in Swift, we\u2019re able to take advantage of the language\u2019s features, support, and ecosystem of related projects. Swift comes with standard library features for working with the filesystem in its <a href=\"https://developer.apple.com/documentation/foundation/\">Foundation</a> module. For network operations <a href=\"https://github.com/swift-server/async-http-client\">Async HTTP Client</a> is there to work the HTTP requests. And to retrieve the latest Swift release, swiftly uses the <a href=\"https://github.com/apple/swift-openapi-generator\">Swift OpenAPI</a> plugin to generate the code to interact with the <a href=\"http://swift.org/\">swift.org</a>  website. Lastly, it takes advantage of Swift\u2019s interoperability with C to use the existing libarchive library to work with archives. swiftly uses libarchive to extract the toolchains downloaded from the Swift website and the integration is simple.</p>\n\n<p>It can be challenging to build shell programs that work well across multiple platforms with minimal system dependencies; this motivated us to switch swiftly away from using a shell program to install it and become a self-installing binary application. swiftly has access to excellent argument parsing capabilities, beautiful <code class=\"language-plaintext highlighter-rouge\">--help</code> screens, and the full standard library.</p>\n\n<p>The only remaining problem was being able to deliver the operating system and processor architecture specific binary to the users system with simplicity. The <a href=\"http://swift.org/\">swift.org</a> website helps with operating system detection, but it cannot reliably detect the Linux distribution. Luckily, there is the <a href=\"https://www.swift.org/documentation/articles/static-linux-getting-started.html\">Swift Static Linux SDK</a> that makes binaries that work with a wide range of distributions. The processor architecture can be determined on most unixes using <code class=\"language-plaintext highlighter-rouge\">uname -m</code> . The result of all of this is the simplicity of a copy and paste from the website to your terminal and get started with Swift.</p>\n\n<h2 class=\"header-with-anchor\" id=\"installing-swift-swiftly\">Installing Swift, swiftly <a href=\"https://www.swift.org/atom.xml#installing-swift-swiftly\" title=\"Permalink for Installing Swift, swiftly section\">\n             <svg height=\"24px\" viewBox=\"0 0 14 14\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m 11.58824,9.823529 q 0,-0.294117 -0.20589,-0.499999 L 9.85294,7.794118 q -0.20588,-0.205883 -0.5,-0.205883 -0.30882,0 -0.52941,0.235295 0.0221,0.02206 0.13971,0.136029 0.11764,0.113971 0.15808,0.158088 0.0404,0.04412 0.1103,0.139706 0.0698,0.09559 0.0956,0.1875 0.0257,0.09191 0.0257,0.202206 0,0.294117 -0.20588,0.5 -0.20588,0.205882 -0.5,0.205882 -0.1103,0 -0.20221,-0.02573 Q 8.35293,9.301471 8.25733,9.231621 8.16173,9.161771 8.11763,9.121327 8.07353,9.080887 7.95954,8.963238 7.84557,8.845591 7.82351,8.823533 7.58086,9.051474 7.58086,9.360297 q 0,0.294118 0.20588,0.5 l 1.51471,1.522059 q 0.19853,0.19853 0.5,0.19853 0.29412,0 0.5,-0.191177 l 1.08088,-1.073529 q 0.20589,-0.205883 0.20589,-0.492648 z M 6.41912,4.639706 q 0,-0.294118 -0.20588,-0.5 L 4.69853,2.617647 q -0.20588,-0.205882 -0.5,-0.205882 -0.28677,0 -0.5,0.198529 L 2.61765,3.683823 q -0.20589,0.205883 -0.20589,0.492648 0,0.294117 0.20589,0.499999 l 1.52941,1.529412 q 0.19853,0.19853 0.5,0.19853 0.30882,0 0.52941,-0.227942 Q 5.15437,6.15441 5.03676,6.040441 4.91912,5.92647 4.87868,5.882353 4.83828,5.838233 4.76838,5.742647 q -0.0698,-0.09559 -0.0956,-0.1875 -0.0257,-0.09191 -0.0257,-0.202206 0,-0.294117 0.20588,-0.5 0.20588,-0.205882 0.5,-0.205882 0.1103,0 0.20221,0.02573 0.0919,0.02573 0.1875,0.09559 0.0956,0.06985 0.1397,0.110294 0.0441,0.04044 0.15809,0.158089 Q 6.15443,5.154409 6.17649,5.176467 6.41914,4.948526 6.41914,4.639703 z M 13,9.823529 q 0,0.882353 -0.625,1.492647 l -1.08088,1.07353 Q 10.68382,13 9.80147,13 q -0.88971,0 -1.5,-0.625 L 6.78676,10.852941 Q 6.17647,10.242647 6.17647,9.360294 q 0,-0.904412 0.64706,-1.536764 L 6.17647,7.176471 Q 5.54412,7.82353 4.64706,7.82353 q -0.88235,0 -1.5,-0.617648 L 1.617647,5.676471 Q 1,5.058824 1,4.176471 1,3.294118 1.625,2.683824 L 2.70588,1.610294 Q 3.31618,1 4.19853,1 q 0.88971,0 1.5,0.625 l 1.51471,1.522059 q 0.61029,0.610294 0.61029,1.492647 0,0.904412 -0.64706,1.536764 L 7.82353,6.823529 Q 8.45588,6.17647 9.35294,6.17647 q 0.88235,0 1.5,0.617648 l 1.52941,1.529411 Q 13,8.941176 13,9.823529 z\"></svg>\n          </a></h2>\n\n<p>Moving forward, swiftly will become the default way to install Swift outside of Xcode. The initial version supports macOS and a variety of Linux distributions, including Ubuntu, Debian, Fedora, Red Hat Enterprise Linux and Amazon Linux.</p>\n\n<p>The <a href=\"https://www.swift.org/swiftly/documentation/swiftlydocs/\">swiftly documentation</a> provides further information about <a href=\"https://www.swift.org/swiftly/documentation/swiftly/automated-install\">using swiftly in a CI/CD environment</a>, as well as setting proxy servers and custom install locations for enterprise environments. swiftly is an open source project, and so you can raise new issues or contribute pull requests at its <a href=\"https://github.com/swiftlang/swiftly\">GitHub repository</a>. You can also <a href=\"https://forums.swift.org/tag/swiftly\">ask questions or discuss swiftly on the Swift Forums</a>.</p>\n\n<p>Special thanks to Patrick Freed for creating swiftly, contributing it to the Swift organization, and his continued contributions to this valuable tool. The community is what makes Swift amazing!</p>"}]}], "al-pacino": [{"feed_url": "https://devblogs.microsoft.com/nuget/feed/", "entries": [{"title": ".NET and .NET Framework May 2025 servicing releases updates", "link": "https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2025-servicing-updates/", "published": "2025-05-13T22:20:00", "summary": "<p>A recap of the latest servicing updates for .NET and .NET Framework for May 2025.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2025-servicing-updates/\">.NET and .NET Framework May 2025 servicing releases updates</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": ".NET 10 Preview 4 is now available!", "link": "https://devblogs.microsoft.com/dotnet/dotnet-10-preview-4/", "published": "2025-05-13T18:30:00", "summary": "<p>Find out about the new features in .NET 10 Preview 4 across the .NET runtime, SDK, libraries, ASP.NET Core, Blazor, C#, .NET MAUI, and more!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-10-preview-4/\">.NET 10 Preview 4 is now available!</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "C# 14 \u2013 Exploring extension members", "link": "https://devblogs.microsoft.com/dotnet/csharp-exploring-extension-members/", "published": "2025-05-08T18:05:00", "summary": "<p>C# 14 introduces extension members. See how the `extension` syntax offers flexibility for extension authors and continuity for developers using extensions</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/csharp-exploring-extension-members/\">C# 14 &#8211; Exploring extension members</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Why we built our startup in C#", "link": "https://devblogs.microsoft.com/dotnet/why-we-built-our-startup-in-csharp/", "published": "2025-05-07T17:05:00", "summary": "<p>Tracebit built their B2B SaaS security product using C#.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/why-we-built-our-startup-in-csharp/\">Why we built our startup in C#</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Packaging and Publishing a .NET MAUI Library with GitHub Actions", "link": "https://devblogs.microsoft.com/dotnet/dotnet-maui-libraries-github-actions/", "published": "2025-04-30T17:05:00", "summary": "<p>In this post, learn how to setup a DevOps pipeline to build and publish a .NET MAUI library with GitHub Actions.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-maui-libraries-github-actions/\">Packaging and Publishing a .NET MAUI Library with GitHub Actions</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Building Real\u2011Time iOS Apps with SignalR: Introducing the Official Swift Client (Public Preview)", "link": "https://devblogs.microsoft.com/dotnet/building-real%e2%80%91time-ios-apps-with-signalr-introducing-the-official-swift-client-public-preview/", "published": "2025-04-23T03:46:29", "summary": "<p>Introduction Until now, iOS developers who wanted real\u2011time, bi\u2011directional communication with SignalR had to rely on community\u2011built clients or roll their own Swift implementation\u2014both of which introduced maintenance and compatibility headaches. We\u2019re excited to announce that the official SignalR Swift client is now available in public preview. With this release, you can: Quickly add real\u2011time [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/building-real%e2%80%91time-ios-apps-with-signalr-introducing-the-official-swift-client-public-preview/\">Building Real\u2011Time iOS Apps with SignalR: Introducing the Official Swift Client (Public Preview)</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Introducing the AI Dev Gallery: Your Gateway to Local AI Development with .NET", "link": "https://devblogs.microsoft.com/dotnet/introducing-ai-dev-gallery-gateway-to-local-ai-development/", "published": "2025-04-22T17:00:00", "summary": "<p>Discover the new AI Dev Gallery, a Windows application that provides interactive local AI samples, easy model downloads, and source code export - all built with .NET AI building blocks.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-ai-dev-gallery-gateway-to-local-ai-development/\">Introducing the AI Dev Gallery: Your Gateway to Local AI Development with .NET</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Preview 2 of the .NET AI Template Now Available", "link": "https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/", "published": "2025-04-17T17:05:00", "summary": "<p>Preview 2 of the .NET AI Chat Web App template introduces support for .NET Aspire and Qdrant vector database integration, making it easier to create cloud-native AI-powered chat applications with custom data.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">Preview 2 of the .NET AI Template Now Available</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Build MCP Remote Servers with Azure Functions", "link": "https://devblogs.microsoft.com/dotnet/build-mcp-remote-servers-with-azure-functions/", "published": "2025-04-16T20:30:00", "summary": "<p>Build AI-powered tools quickly using Azure Functions to create remote MCP servers that seamlessly integrate with GitHub Copilot and other LLM-based applications.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/build-mcp-remote-servers-with-azure-functions/\">Build MCP Remote Servers with Azure Functions</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Join the .NET & C# Teams at Microsoft Build 2025", "link": "https://devblogs.microsoft.com/dotnet/join-us-at-build-2025/", "published": "2025-04-15T18:45:00", "summary": "<p>The countdown to Microsoft Build 2025 is on! Join us May 19-22 either in-person in Seattle or online and explore an exciting lineup of .NET and C# content, including sessions on AI integration, app modernization, and the latest language features.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/join-us-at-build-2025/\">Join the .NET &amp; C# Teams at Microsoft Build 2025</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}]}, {"feed_url": "https://devblogs.microsoft.com/dotnet/feed/", "entries": [{"title": ".NET and .NET Framework May 2025 servicing releases updates", "link": "https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2025-servicing-updates/", "published": "2025-05-13T22:20:00", "summary": "<p>A recap of the latest servicing updates for .NET and .NET Framework for May 2025.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2025-servicing-updates/\">.NET and .NET Framework May 2025 servicing releases updates</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": ".NET 10 Preview 4 is now available!", "link": "https://devblogs.microsoft.com/dotnet/dotnet-10-preview-4/", "published": "2025-05-13T18:30:00", "summary": "<p>Find out about the new features in .NET 10 Preview 4 across the .NET runtime, SDK, libraries, ASP.NET Core, Blazor, C#, .NET MAUI, and more!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-10-preview-4/\">.NET 10 Preview 4 is now available!</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "C# 14 \u2013 Exploring extension members", "link": "https://devblogs.microsoft.com/dotnet/csharp-exploring-extension-members/", "published": "2025-05-08T18:05:00", "summary": "<p>C# 14 introduces extension members. See how the `extension` syntax offers flexibility for extension authors and continuity for developers using extensions</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/csharp-exploring-extension-members/\">C# 14 &#8211; Exploring extension members</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Why we built our startup in C#", "link": "https://devblogs.microsoft.com/dotnet/why-we-built-our-startup-in-csharp/", "published": "2025-05-07T17:05:00", "summary": "<p>Tracebit built their B2B SaaS security product using C#.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/why-we-built-our-startup-in-csharp/\">Why we built our startup in C#</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Packaging and Publishing a .NET MAUI Library with GitHub Actions", "link": "https://devblogs.microsoft.com/dotnet/dotnet-maui-libraries-github-actions/", "published": "2025-04-30T17:05:00", "summary": "<p>In this post, learn how to setup a DevOps pipeline to build and publish a .NET MAUI library with GitHub Actions.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-maui-libraries-github-actions/\">Packaging and Publishing a .NET MAUI Library with GitHub Actions</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Building Real\u2011Time iOS Apps with SignalR: Introducing the Official Swift Client (Public Preview)", "link": "https://devblogs.microsoft.com/dotnet/building-real%e2%80%91time-ios-apps-with-signalr-introducing-the-official-swift-client-public-preview/", "published": "2025-04-23T03:46:29", "summary": "<p>Introduction Until now, iOS developers who wanted real\u2011time, bi\u2011directional communication with SignalR had to rely on community\u2011built clients or roll their own Swift implementation\u2014both of which introduced maintenance and compatibility headaches. We\u2019re excited to announce that the official SignalR Swift client is now available in public preview. With this release, you can: Quickly add real\u2011time [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/building-real%e2%80%91time-ios-apps-with-signalr-introducing-the-official-swift-client-public-preview/\">Building Real\u2011Time iOS Apps with SignalR: Introducing the Official Swift Client (Public Preview)</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Introducing the AI Dev Gallery: Your Gateway to Local AI Development with .NET", "link": "https://devblogs.microsoft.com/dotnet/introducing-ai-dev-gallery-gateway-to-local-ai-development/", "published": "2025-04-22T17:00:00", "summary": "<p>Discover the new AI Dev Gallery, a Windows application that provides interactive local AI samples, easy model downloads, and source code export - all built with .NET AI building blocks.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/introducing-ai-dev-gallery-gateway-to-local-ai-development/\">Introducing the AI Dev Gallery: Your Gateway to Local AI Development with .NET</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Preview 2 of the .NET AI Template Now Available", "link": "https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/", "published": "2025-04-17T17:05:00", "summary": "<p>Preview 2 of the .NET AI Chat Web App template introduces support for .NET Aspire and Qdrant vector database integration, making it easier to create cloud-native AI-powered chat applications with custom data.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-ai-template-preview2/\">Preview 2 of the .NET AI Template Now Available</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Build MCP Remote Servers with Azure Functions", "link": "https://devblogs.microsoft.com/dotnet/build-mcp-remote-servers-with-azure-functions/", "published": "2025-04-16T20:30:00", "summary": "<p>Build AI-powered tools quickly using Azure Functions to create remote MCP servers that seamlessly integrate with GitHub Copilot and other LLM-based applications.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/build-mcp-remote-servers-with-azure-functions/\">Build MCP Remote Servers with Azure Functions</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}, {"title": "Join the .NET & C# Teams at Microsoft Build 2025", "link": "https://devblogs.microsoft.com/dotnet/join-us-at-build-2025/", "published": "2025-04-15T18:45:00", "summary": "<p>The countdown to Microsoft Build 2025 is on! Join us May 19-22 either in-person in Seattle or online and explore an exciting lineup of .NET and C# content, including sessions on AI integration, app modernization, and the latest language features.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/join-us-at-build-2025/\">Join the .NET &amp; C# Teams at Microsoft Build 2025</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>"}]}, {"feed_url": "https://blog.packagist.com/rss/", "entries": [{"title": "What\u2019s New in Private Packagist, May Update", "link": "https://blog.packagist.com/whats-new-in-private-packagist-may-update/", "published": "2025-05-13T13:19:57", "summary": "<p>Private Packagist has been evolving steadily over the past three months with a focus on API improvements, enhanced security, and refined user experience. Let&apos;s dive into the significant updates that have been introduced since February.</p><h2 id=\"api-improvements\">API Improvements</h2><p>Our API credentials have undergone a comprehensive overhaul, with the standout</p>"}]}], "packman": [{"feed_url": "https://blog.pypi.org/feed_rss_created.xml", "entries": [{"title": "Incident Report: Organizations Team privileges", "link": "https://blog.pypi.org/posts/2025-04-14-incident-report-organization-team-privileges/", "published": "2025-04-14T06:09:00", "summary": "<p>On April 14, 2025 <a href=\"https://blog.pypi.org/&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#115;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#64;&#112;&#121;&#112;&#105;&#46;&#111;&#114;&#103;\">&#115;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#64;&#112;&#121;&#112;&#105;&#46;&#111;&#114;&#103;</a> was notified of a potential security concernrelating to privileges granted to a PyPI User via Organization Teams membershippersisting after the User was removed from the PyPI Organization the Team belongs to.</p><p>We validated the report as a true finding, identified all cases where this scenariohad occurred, notified impacted parties, and released a fix.A full audit determined that all instances were accounted for,with no unauthorized actions taken as a result of the issue.</p><!-- more --><h2 id=\"timeline-of-events\">Timeline of events</h2><ul><li>2025-04-14 16:37 UTC A PyPI User who has been testing out our Organizations features noticed the issue and reported it according to our <a href=\"https://pypi.org/security/\">Security Policy</a> to <a href=\"https://blog.pypi.org/&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#115;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#64;&#112;&#121;&#112;&#105;&#46;&#111;&#114;&#103;\">&#115;&#101;&#99;&#117;&#114;&#105;&#116;&#121;&#64;&#112;&#121;&#112;&#105;&#46;&#111;&#114;&#103;</a>.</li><li>2025-04-14 17:02 UTC PyPI Security acknowledges receipt.</li><li>2025-04-14 17:22 UTC PyPI Security validates the report as a true finding.</li><li>2025-04-14 17:58 UTC PyPI Security validating test and hot fix prepared for internal review.</li><li>2025-04-14 18:30 UTC PyPI Security removes invalid Team Membership and notifies the owners of the only other actively impacted Organization. <a href=\"https://github.com/pypi/warehouse/pull/17957\">public PR</a> opened with fix.</li><li>2025-04-14 18:33 UTC Hot fix is merged.</li><li>2025-04-14 18:39 UTC Hot fix deployed and live on PyPI.</li><li>2025-04-14 19:06 UTC Security audit complete, validating that only two instances of this had occurred, with no unauthorized actions taken as a result of the persisted privileges.</li></ul><h2 id=\"details\">Details</h2><p>PyPI Organizations have been a feature on PyPI since they were first enabledon April 20, 2023.This issue was introduced in the initial development of Organizations features,and was mitigated April 14, 2025.</p><p>PyPI Organizations are quickly seeing more use as we (finally) exit our public betaperiod. In the last month we have gone from 70 Community Organization beta testersto 1,935 active Organizations<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"https://blog.pypi.org/feed_rss_created.xml#fn:1\">1</a></sup>, so it is of little surprise that we are surfacing a fewmore issues as a result.</p><p>Thanks to PyPI's strong test coverage identifying and validating the issue was rathertrivial, and getting a fix prepared and out the door was straight forward.</p><p>In total, this incident was resolved in 2 hours and 2 minutes from the time of report.</p><h2 id=\"response\">Response</h2><p>Given that this is an otherwise straightforward bug, I thought I would take a momentto share how the issue was validated as well as how we audited.I've replaced the specific organization, team, and user strings below,but otherwise all of this is copied and pasted from the terminal session usedas I worked this report.</p><p>I spun up a local development environment of<a href=\"https://github.com/pypi/warehouse\">pypi/warehouse</a>from the current <code>main</code> branch locally and followed the reporter's steps to reproduce:</p><blockquote><p>The basic reproduce steps were:</p><ol><li>Add a user to an organization as a member</li><li>Add that member to a organization team</li><li>Remove the member from the organization</li></ol></blockquote><p>Noting that indeed, the User's team role persisted, and they could continue to actwith those privileges on PyPI.</p><p>At that point the reporter and PyPI Administrators team were notified that we had afinding, and that review would be needed shortly to get a fix merged and deployed.</p><p>From there, I added a<a href=\"https://github.com/pypi/warehouse/pull/17957/commits/33707f0ad72e4d2efacf85fd0488e0c42fca47e6\">failing test</a>which further validated the issue, and got to work creating a<a href=\"https://github.com/pypi/warehouse/pull/17957/commits/34a40178ee7d0e048e45867a9d8f76497f68da8c\">patch</a>which turned the test green.</p><p>Now, with time to wait while a volunteer PyPI Admin returned I focused on assessingif this was actively impacting any other organizations:</p><div class=\"highlight\"><pre><span></span><code>warehouse=&gt; select o.name as organization, t.name as team_name, u.username as user, tr. role_name as team_role, ors. role_name as organization rolefrom team_roles tr join teams t on t.id=tr.team_id join organizations o on t.organization_id=o.id join users u on u.id=tr.user_id left outer join organization roles ors on ors.organization_id=t.organization_id and ors.user_id=tr.user_idwhere ors. role_name is null; organization | team_name | user | team_role | organization_role--------------+-------------+-----------+-----------+------------------- spam | Spam-owners | spamlover | Member | (1 row)</code></pre></div><p>This query showed me that one instance of a User having an Organization Team Role<em>without</em> being a Member of that Organization still existed on PyPI<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"https://blog.pypi.org/feed_rss_created.xml#fn:2\">2</a></sup>.The reporter made clear that they had already resolved the instance from their testing.</p><p>I drafted a notice to the five users with role <code>Owner</code> on the impacted Organization, and took a moment to realize that this was our first time emailing OrganizationOwners as a group, and that we needed to account for the fact that Users on PyPIdo not necessarily already know one-another's email addresses, as it is not requiredto invite them to a Project or Organization. A quick gut-check in the PyPI Moderatorschannel validated my plan to <code>Bcc:</code> all the Owners rather than <code>To:</code> them as agroup.<sup id=\"fnref:3\"><a class=\"footnote-ref\" href=\"https://blog.pypi.org/feed_rss_created.xml#fn:3\">3</a></sup></p><p>By that point, the volunteer PyPI Administrator was available to review the PR anddrafted e-mail. We notified the impacted Organization, and then coordinated toopen the PR publicly and approve/merge it hastily before completing a more in-depthaudit.</p><p>Luckily this audit was straightforward using our internal security recordscombined with the fact that there has been minimal churn in the Organization membershipin the short time that Organizations has been in broader use.</p><div class=\"highlight\"><pre><span></span><code>warehouse=&gt; select o.name, time, tag, u.usernamefrom organization_events oe join users u on (additional-&gt;&gt;'target_user_id')::uuid=u.id join organizations o on oe.source_id=o.idwhere tag in ('organization:team_role:remove', 'organization:organization_role:remove')order by time; name | time | tag | username ------------+----------------------------+---------------------------------------+------------------- lumberjack | 2023-05-02 03:01:18.935901 | organization:organization_role:remove | sirrobin holygrail | 2023-07-06 12:55:43.261593 | organization:organization_role:remove | blackknight ni | 2023-09-18 12:07:17.389244 | organization:organization_role:remove | shrubbery parrot | 2024-02-04 19:23:25.354344 | organization:organization_role:remove | exparrot spam | 2024-08-24 01:40:22.405746 | organization:organization_role:remove | spamlover spam | 2025-02-09 18:14:13.891224 | organization:team_role:remove | eggandspam albatross | 2025-03-07 06:55:29.446617 | organization:organization_role:remove | nudge albatross | 2025-03-07 06:55:37.271176 | organization:organization_role:remove | wink cheese | 2025-03-13 18:25:54.650905 | organization:team_role:remove | gorgonzola cheese | 2025-03-13 18:26:02.525162 | organization:team_role:remove | camembert ministry | 2025-03-20 07:53:45.616404 | organization:organization_role:remove | sillywalks argument | 2025-03-31 15:52:18.186223 | organization:organization_role:remove | contradiction fishslap | 2025-04-14 15:12:14.023183 | organization:organization_role:remove | danceking fishslap | 2025-04-14 15:24:54.208641 | organization:organization_role:remove | danceking fishslap | 2025-04-14 15:27:22.954624 | organization:team_role:remove | danceking</code></pre></div><p>Here, we see the <code>spamlover</code> user being removed from the <code>spam</code> Organizationon <code>2024-08-24</code>, without being removed from the team, confirming our finding from theearlier query.</p><p>We also see the User <code>danceking</code> from the <code>fishslap</code> Organization being removed fromthe Organization multiple times, before the reporter removed them from their assignedTeam.</p><p>This allowed us to confirm that beyond the already identified incidents,no other Organizations had found this problem before without letting us know.</p><h2 id=\"thanks\">Thanks</h2><p>First and foremost, thanks to our reporters, Matthew Treinish and Jake Lishmanof IBM Quantum for finding and reporting this issue.</p><p>We are grateful for the entire community of security researchers and users whofind and report security issues to PyPI in accordance with our<a href=\"https://pypi.org/security/\">Security Policy</a>.PyPI relies on the efforts of our community to help us find and resolve issues likethese before they become critical issues.Cooperation between all parties helps to improve the security of open source,and none of us could do it alone.</p><p>The tools and capabilities we've evolved in PyPI over the past six years have reallycome to be an asset in situations like these. I'm grateful to all the contributorsand admins who have helped us to build them \ud83d\udc9c.</p><hr /><p><em>Ee Durbin is the Director of Infrastructure atthe Python Software Foundation.They have been contributing to keeping PyPI online, available, andsecure since 2013.</em></p><div class=\"footnote\"><hr /><ol><li id=\"fn:1\"><p>As of writing, there are 6,682 remaining Organization Requests to review.&#160;<a class=\"footnote-backref\" href=\"https://blog.pypi.org/feed_rss_created.xml#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p></li><li id=\"fn:2\"><p>It also showed me that our modeling could certainly be improved.In general all the joins are fine, but the fact that a <code>TeamRole</code> is directlyrelated to a <code>User</code> rather than to their <code>OrganizationRole</code> allowed for thisdisconnect in the first place.&#160;<a class=\"footnote-backref\" href=\"https://blog.pypi.org/feed_rss_created.xml#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p></li><li id=\"fn:3\"><p>Another thing to work on moving forward. We recently added some \"in-app\" messagingfor PyPI Admins and Support to contact users regarding Organization Requests,which could be useful for group communication with Organization Owners.&#160;<a class=\"footnote-backref\" href=\"https://blog.pypi.org/feed_rss_created.xml#fnref:3\" title=\"Jump back to footnote 3 in the text\">&#8617;</a></p></li></ol></div>"}]}, {"feed_url": "https://blog.rubygems.org/atom.xml", "entries": [{"title": "3.6.9 Released", "link": "https://blog.rubygems.org/2025/05/13/3.6.9-released.html", "published": "2025-05-13T00:00:00", "summary": "<p>RubyGems 3.6.9 includes enhancements, performance and documentation.</p>\n\n<p>To update to the latest RubyGems you can run:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gem update --system\n</code></pre></div></div>\n\n<p>To install RubyGems by hand see the <a href=\"https://rubygems.org/pages/download\">Download RubyGems</a> page.</p>\n\n<p><em>## Enhancements:</em></p>\n\n<ul>\n  <li>Add mtime to Gem::Package::TarWriter#add_file argument. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8673\">#8673</a> by unasuke</li>\n  <li>Print webauthn authentication link as a separate line to make it easier\nto visit. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8663\">#8663</a> by mperham</li>\n  <li>Remove shellwords autoload. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8644\">#8644</a> by\ndeivid-rodriguez</li>\n  <li>Installs bundler 2.6.9 as a default gem.</li>\n</ul>\n\n<p><em>## Performance:</em></p>\n\n<ul>\n  <li>Avoid unnecessary splat allocation. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8640\">#8640</a> by jeremyevans</li>\n</ul>\n\n<p><em>## Documentation:</em></p>\n\n<ul>\n  <li>Fix typo in Changelog for 3.6.0 / 2024-12-16. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8638\">#8638</a> by thatrobotdev</li>\n</ul>\n\n<p>SHA256 Checksums:</p>\n\n<ul>\n  <li>rubygems-3.6.9.tgz<br />\nffdd46c6adbecb9dac561cc003666406efd2ed93ca21b5fcc47062025007209d</li>\n  <li>rubygems-3.6.9.zip<br />\ne0eb0fac9daa831f779d17b066d84d4484a85f54b5ae55fbf43694057dc7da2f</li>\n  <li>rubygems-update-3.6.9.gem<br />\n42af98d115989aaf3e30d35f615f24da68a7902f9e642dad969981f446c90873</li>\n</ul>"}, {"title": "March 2025 RubyGems Updates", "link": "https://blog.rubygems.org/2025/04/25/march-rubygems-updates.html", "published": "2025-04-25T00:00:00", "summary": "<p>Welcome to the RubyGems monthly update! As part of our efforts at Ruby Central, we publish a recap of the work that we\u2019ve done the previous month. Read on to find out what updates were made to RubyGems and RubyGems.org in March.</p>\n\n<h2 id=\"rubygems-news\">RubyGems News</h2>\n\n<p>In March, we released RubyGems <a href=\"https://github.com/rubygems/rubygems/blob/master/CHANGELOG.md#366--2025-03-13\"><strong>3.6.6</strong></a> and Bundler <a href=\"https://github.com/rubygems/rubygems/blob/master/bundler/CHANGELOG.md#266-march-13-2025\"><strong>2.6.6</strong></a>. These releases bring a series of enhancements and bug fixes designed to improve the overall developer experience with RubyGems. Notable improvements include fixing an <a href=\"https://github.com/rubygems/rubygems/pull/5578\"><code class=\"language-plaintext highlighter-rouge\">ENAMETOOLONG</code> error when creating the compact index cache</a>, showing clearer errors when writing a <a href=\"https://github.com/rubygems/rubygems/pull/5920\">lockfile on a read-only filesystem</a>, <em>**</em>and updating <a href=\"https://github.com/rubygems/rubygems/pull/8520\"><code class=\"language-plaintext highlighter-rouge\">bundle doctor</code> to not report issues about unwritable files</a>.</p>\n\n<p>Some other important accomplishments from the team this month include:</p>\n\n<p><strong>Improving reproducible gem builds</strong></p>\n\n<ul>\n  <li>The RubyGems team implemented changes to make gem builds more reproducible based on recommendations from <a href=\"https://github.com/giacomobenedetti\">Giacomo Benedetti</a> and <a href=\"https://github.com/enck\">William Enck</a>.</li>\n  <li>Their suggestions included <a href=\"https://github.com/rubygems/rubygems/pull/8568\">setting a default <code class=\"language-plaintext highlighter-rouge\">SOURCE_DATE_EPOCH</code> value of <code class=\"language-plaintext highlighter-rouge\">315619200</code></a> and <a href=\"https://github.com/rubygems/rubygems/pull/8569\">sorting metadata values in gemspecs</a>. These updates improve compatibility with tools like Debian\u2019s <em>reprotest</em>, making it easier to verify that gem builds are consistent across environments.</li>\n  <li>This work was inspired by the paper <a href=\"https://www.cs.cmu.edu/~ckaestne/pdf/icse25_rb.pdf?utm_source=chatgpt.com\"><em>An Empirical Study on Reproducible Packaging in Open-Source Ecosystems</em></a>, which will be presented at the <a href=\"https://conf.researchr.org/home/icse-2025\">2025 International Conference on Software Engineering.</a></li>\n</ul>\n\n<p><img alt=\"*Building RubyGems itself is trivially reproducible now without needing to specify SOURCE_DATE_EPOCH*\" src=\"https://res.cloudinary.com/lauragift/image/upload/w_600,h_300/v1745614708/image_fwcmz0.png\" /></p>\n\n<p><em>Building RubyGems itself is trivially reproducible now without needing to specify SOURCE_DATE_EPOCH</em></p>\n\n<p><strong>Resolver performance improvements</strong></p>\n\n<ul>\n  <li>We\u2019ve made significant performance improvements to Bundler\u2019s dependency resolution, thanks to recent contributions from <a href=\"https://github.com/skipkayhil\">Hartley McGuire</a>.</li>\n  <li>Initial changes focused on <a href=\"https://github.com/rubygems/rubygems/pull/8559\">reducing object allocations in methods like <code class=\"language-plaintext highlighter-rouge\">Gem::Version#&lt;=&gt;</code> and <code class=\"language-plaintext highlighter-rouge\">Bundler::Candidate#&lt;=&gt;</code></a>. Further optimizations targeted the resolution algorithm itself, including improvements to the <a href=\"https://github.com/jhawthorn/pub_grub/pull/37\"><strong><code class=\"language-plaintext highlighter-rouge\">pub_grub</code></strong> resolver</a>.</li>\n  <li>As a result, Hartley reported a 60% speedup in <code class=\"language-plaintext highlighter-rouge\">bundle update</code> time in his app after applying all patches. Huge thanks to Hartley for his contributions, and to <a href=\"https://github.com/jhawthorn\">John Hawthorn</a> for maintaining <code class=\"language-plaintext highlighter-rouge\">pub_grub</code> and helping refine its API to support these enhancements.</li>\n</ul>\n\n<p><strong>Wheels for RubyGems</strong></p>\n\n<ul>\n  <li>Progress continues on bringing a prototype for precompiled binary packages<strong>,</strong> or \u201cwheels\u201d to RubyGems. <a href=\"https://github.com/segiddins\">Samuel Giddins</a> has defined a naming scheme for package files and finalized the set of identifying tags needed to support this across the Ruby ecosystem.</li>\n  <li>Next steps include advocating within the Ruby community to help shift perceptions around precompiled binaries, and helping Rubyists understand that precompiled packages are actually <strong>more secure</strong> (no code execution at install time) and <strong>more ergonomic</strong> for users (no build tools or compilation delays). An RFC is also forthcoming.</li>\n</ul>\n\n<p><strong>Compact index cache now handles long path names</strong></p>\n\n<ul>\n  <li>Bundler now better handles long path names in the <em>**</em>compact index cache, addressing an issue that could raise <a href=\"https://github.com/rubygems/rubygems/pull/5578\"><strong>\u201cFilename too long\u201d</strong> errors</a>\u2014especially when using private servers like <em>JFrog Artifactory</em>.</li>\n  <li>The fix was long delayed due to persistent CI failures, which were eventually traced to a <a href=\"https://bugs.ruby-lang.org/issues/21177\"><strong>Ruby on Windows bug</strong></a> that has since been resolved.</li>\n  <li>As part of the debugging process, we also improved our test reliability by removing the use of <code class=\"language-plaintext highlighter-rouge\">FileUtils.rm_rf</code> in Bundler specs, as it silently fails on cleanup errors and made diagnosing the issue harder. This change will help prevent similar issues in the future.</li>\n</ul>\n\n<h2 id=\"rubygemsorg-news\"><a href=\"http://rubygems.org/\">RubyGems.org</a> News</h2>\n\n<p>The updates made this month to\u00a0<a href=\"http://rubygems.org/\">RubyGems.org</a>\u00a0reflect a strong commitment to improving user experience, enhancing security, and modernizing the platform. Sponsored hosting for\u00a0<a href=\"http://rubygems.org/\">RubyGems.org</a>\u00a0in February was provided by\u00a0<a href=\"https://aws.amazon.com/?ref=rubycentral.org\">AWS</a>, <a href=\"https://www.fastly.com/?ref=rubycentral.org\">Fastly</a> and <a href=\"https://www.datadoghq.com/?ref=rubycentral.org\">Datadog</a>.</p>\n\n<p>The following are highlights of what the team worked on this month:</p>\n\n<p><strong>Ecosystem data for Clickgems</strong></p>\n\n<ul>\n  <li><a href=\"https://github.com/mghaught\">Marty</a> collaborated with the <a href=\"https://clickhouse.com/\"><strong>ClickHouse</strong></a> team to finalize details for our partnership on <em>Clickgems</em>, the Ruby equivalent of the popular <a href=\"https://clickpy.clickhouse.com/\">ClickPy</a> site, <a href=\"https://clickhouse.com/blog/announcing-ruby-gem-analytics-powered-by-clickhouse\">which officially launched last week!</a></li>\n  <li><a href=\"https://github.com/segiddins\">Samuel Giddins</a> led the effort to push RubyGems ecosystem data into ClickHouse, which now includes daily download totals and the latest public database dumps from RubyGems.org. Work is underway to roll out granular download data, made possible by retooling the <a href=\"https://github.com/rubytogether/kirby\">Kirby</a> log parser to stream data directly from the RubyGems.org CDN.</li>\n  <li>This new level of insight will help the Ruby community better understand package usage trends and support maintainers in making more informed decisions, especially around platform support.</li>\n</ul>\n\n<p><a href=\"https://github.com/rubygems/rubygems.org/pull/5595\"><strong>Database performance investigation after brief DoS</strong></a></p>\n\n<ul>\n  <li>A brief Denial of Service (DoS) incident targeting RubyGems.org prompted an investigation into web pages with heavy database queries.</li>\n  <li>While no specific culprit was found, the incident served as a reminder of the need for strong visibility into database performance when operating a web system at scale.</li>\n</ul>\n\n<h2 id=\"thank-you\">Thank you</h2>\n\n<p>A huge thank you to all the contributors to RubyGems and <a href=\"http://rubygems.org/\">RubyGems.org</a> this month! We deeply appreciate your support and dedication.</p>\n\n<h3 id=\"contributors-to-rubygems\">Contributors to RubyGems:</h3>\n\n<ul>\n  <li><a href=\"https://github.com/segiddins\">@segiddins</a> Samuel Giddins</li>\n  <li><a href=\"https://github.com/simi\">@simi</a> Josef \u0160im\u00e1nek</li>\n  <li><a href=\"https://github.com/martinemde\">@martinemde</a> Martin Emde</li>\n  <li><a href=\"https://github.com/deivid-rodriguez\">@deivid-rodriguez</a> David Rodr\u00edguez</li>\n  <li><a href=\"https://github.com/hsbt\">@hsbt</a> Hiroshi Shibata</li>\n  <li><a href=\"https://github.com/duckinator\">@duckinator</a> Ellen Marie Dash</li>\n  <li><a href=\"https://github.com/devsheva\">@devsheva</a> Mateo Sheshi</li>\n  <li><a href=\"https://github.com/nobu\">@nobu</a> Nobuyoshi Nakada</li>\n  <li><a href=\"https://github.com/saraid\">@saraid</a> Michael Chui</li>\n  <li><a href=\"https://github.com/cllns\">@cllns</a> Sean Collins</li>\n  <li><a href=\"https://github.com/taralbass\">@taralbass</a> Tara Bass</li>\n  <li><a href=\"https://github.com/mbclu\">@mbclu</a> Mitch Clutter</li>\n  <li><a href=\"https://github.com/jacobat\">@jacobat</a> Jacob Atzen</li>\n  <li><a href=\"https://github.com/skipkayhil\">@skipkayhil</a> Hartley McGuire</li>\n  <li><a href=\"https://github.com/rwstauner\">@rwstauner</a> Randy Stauner</li>\n  <li><a href=\"https://github.com/ioquatix\">@ioquatix</a> Samuel Williams</li>\n  <li><a href=\"https://github.com/giacomobenedetti\">@giacomobenedetti</a> Giacomo Benedetti</li>\n  <li><a href=\"https://github.com/olleolleolle\">@olleolleolle</a> Olle Jonsson</li>\n</ul>\n\n<h3 id=\"contributors-to-rubygemsorg\">Contributors to <a href=\"http://rubygems.org/\">RubyGems.org</a>:</h3>\n\n<ul>\n  <li><a href=\"https://github.com/simi\">@simi</a> Josef \u0160im\u00e1nek</li>\n  <li><a href=\"https://github.com/segiddins\">@segiddins</a> Samuel Giddins</li>\n  <li><a href=\"https://github.com/hsbt\">@hsbt</a> Hiroshi Shibata</li>\n  <li><a href=\"https://github.com/wooly\">@wooly</a> Steve Bell</li>\n  <li><a href=\"https://github.com/mghaught\">@mghaught</a> Marty Haught</li>\n  <li><a href=\"https://github.com/colby-swandale\">@colby-swandale</a> Colby Swandale</li>\n</ul>\n\n<p><em>If we missed you, please let us know so we can include you in our shout out!</em></p>\n\n<hr />\n<p>Learn more about contributing to RubyGems by visiting the RubyGems Contributing Guide. We welcome all kinds of contributions, including bug fixes, feature implementation, writing and updating documentation, and bug triage.</p>"}, {"title": "3.6.8 Released", "link": "https://blog.rubygems.org/2025/04/13/3.6.8-released.html", "published": "2025-04-13T00:00:00", "summary": "<p>RubyGems 3.6.8 includes enhancements.</p>\n\n<p>To update to the latest RubyGems you can run:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gem update --system\n</code></pre></div></div>\n\n<p>To install RubyGems by hand see the <a href=\"https://rubygems.org/pages/download\">Download RubyGems</a> page.</p>\n\n<p><em>## Enhancements:</em></p>\n\n<ul>\n  <li>Installs bundler 2.6.8 as a default gem.</li>\n</ul>\n\n<p>SHA256 Checksums:</p>\n\n<ul>\n  <li>rubygems-3.6.8.tgz<br />\nda5340b42ba3ddc5ede4a6b948ffa5b409d48cb119e2937e27e4c0b13bf9c390</li>\n  <li>rubygems-3.6.8.zip<br />\n4de1a7664390de3d4b35e3180671d664081b2534467c128ac169ef1437be61c4</li>\n  <li>rubygems-update-3.6.8.gem<br />\n9fce1aa05ac09f5945cf1bfb00b6f6c5a468b5296226151e639f6e22f1efef50</li>\n</ul>"}, {"title": "3.6.7 Released", "link": "https://blog.rubygems.org/2025/04/03/3.6.7-released.html", "published": "2025-04-03T00:00:00", "summary": "<p>RubyGems 3.6.7 includes enhancements and performance.</p>\n\n<p>To update to the latest RubyGems you can run:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gem update --system\n</code></pre></div></div>\n\n<p>To install RubyGems by hand see the <a href=\"https://rubygems.org/pages/download\">Download RubyGems</a> page.</p>\n\n<p><em>## Enhancements:</em></p>\n\n<ul>\n  <li>Sorting files in metadata for build reproducibility. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8569\">#8569</a> by\ngiacomobenedetti</li>\n  <li>Default to a SOURCE_DATE_EPOCH of 315619200, to simplify reproducible\nbuilds. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8568\">#8568</a> by duckinator</li>\n  <li>Let <code class=\"language-plaintext highlighter-rouge\">gem exec</code> raise an error in ambiguous cases. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8573\">#8573</a> by\ndeivid-rodriguez</li>\n  <li>Installs bundler 2.6.7 as a default gem.</li>\n</ul>\n\n<p><em>## Performance:</em></p>\n\n<ul>\n  <li>Speed up Version#&lt;=&gt; ~20-50% when lengths differ. Pull request\n<a href=\"https://github.com/rubygems/rubygems/pull/8565\">#8565</a> by skipkayhil</li>\n</ul>\n\n<p>SHA256 Checksums:</p>\n\n<ul>\n  <li>rubygems-3.6.7.tgz<br />\nd23cfe2724cf84120d3a5059c7c0eed3a062f8b6e581f9b7bf01a3c447fa2f37</li>\n  <li>rubygems-3.6.7.zip<br />\n766da4a3eb4950a4acb72b3db064feb3be7d34f3093a67747cf8e9f1efcd9dab</li>\n  <li>rubygems-update-3.6.7.gem<br />\n8da96fd169fd6e45ac4e2784554a70ae3fda092fa6ccb0518f5fc875ccb9e53c</li>\n</ul>"}, {"title": "Introducing New Policies for RubyGems.org", "link": "https://blog.rubygems.org/2025/03/20/introducing-new-policies.html", "published": "2025-03-20T00:00:00", "summary": "<p>We\u2019re pleased to introduce several key policies for RubyGems.org for community review. These include a <a href=\"https://rubygems.org/policies/terms-of-service\">Terms of Service</a>, <a href=\"https://rubygems.org/policies/privacy\">Privacy Notice</a>, <a href=\"https://rubygems.org/policies/acceptable-use\">Acceptable Use Policy</a>, and <a href=\"https://rubygems.org/policies/copyright\">Copyright Policy</a>. While these policies align with how RubyGems has always operated, the absence of formal documentation created ambiguity around acceptable use. These new policies provide clarity and transparency regarding our operations, how we protect user data, and our commitment to maintaining a safe and respectful environment for all RubyGems users.</p>\n\n<h3 id=\"terms-of-service\"><a href=\"https://rubygems.org/policies/terms-of-service\">Terms of Service</a></h3>\n<p>The Terms of Service define the rules and guidelines for using RubyGems.org. They cover everything from account responsibilities to intellectual property rights, ensuring a fair and consistent experience for all users.</p>\n\n<h3 id=\"privacy-notice\"><a href=\"https://rubygems.org/policies/privacy\">Privacy Notice</a></h3>\n<p>Our Privacy Notice outlines how we collect, use, and safeguard your personal information. We\u2019re committed to protecting your data and ensuring compliance with applicable privacy laws.</p>\n\n<h3 id=\"acceptable-use-policy\"><a href=\"https://rubygems.org/policies/acceptable-use\">Acceptable Use Policy</a></h3>\n<p>The Acceptable Use Policy sets clear expectations for behavior on our platform. It prohibits activities that could harm the service or other users, such as abuse, spam, or malicious actions.</p>\n\n<h3 id=\"copyright-policy\"><a href=\"https://rubygems.org/policies/copyright\">Copyright Policy</a></h3>\n<p>Our Copyright Policy outlines the rules and procedures for handling copyright-related issues so that we ensure intellectual property rights are respected.</p>\n\n<p>These policies aim to improve transparency around our handling of user data and to guide how we will respond to situations where we may be required to take action to ensure a secure and trustworthy ecosystem for everyone.</p>\n\n<p>We encourage all users to review these policies.  We are seeking feedback on these policies for the next 30 days.  You can provide feedback through <a href=\"mailto:legal@rubycentral.org\">legal@rubycentral.org</a> email or the <a href=\"https://rubycentralcommunity.slack.com/archives/C08J92C73N1\">#oss-program-ruby-central</a> channel in the Ruby Central Community Slack.  After the 30-day comment period, we\u2019ll review feedback and finalize the policies with a target effective date of May 20th, 2025.  Together, we can continue to build and contribute to a vibrant, safe, and secure Ruby community.</p>\n\n<p>Thank you for being a part of our journey!</p>"}, {"title": "February 2025 RubyGems Updates", "link": "https://blog.rubygems.org/2025/03/19/february-rubygems-updates.html", "published": "2025-03-19T00:00:00", "summary": "<p>Welcome to the RubyGems monthly update! As part of our efforts at Ruby Central, we publish a recap of the work that we\u2019ve done the previous month. Read on to find out what updates were made to RubyGems and RubyGems.org in February.</p>\n\n<h2 id=\"rubygems-news\">RubyGems News</h2>\n\n<p>In February, we released RubyGems <a href=\"https://github.com/rubygems/rubygems/blob/master/CHANGELOG.md#364--2025-02-17\">3.6.4</a>, <a href=\"https://github.com/rubygems/rubygems/blob/master/CHANGELOG.md#365--2025-02-20\">3.6.5</a> and Bundler <a href=\"https://github.com/rubygems/rubygems/blob/master/bundler/CHANGELOG.md#264-february-17-2025\">2.6.4</a>, <a href=\"https://github.com/rubygems/rubygems/blob/master/bundler/CHANGELOG.md#265-february-20-2025\">2.6.5</a><a href=\"https://github.com/rubygems/rubygems/blob/master/bundler/CHANGELOG.md#263-january-16-2025\">.</a> These releases bring a series of enhancements and bug fixes designed to improve the overall developer experience with RubyGems. Notable improvements include removing <a href=\"https://github.com/rubygems/rubygems/pull/8507\"><code class=\"language-plaintext highlighter-rouge\">gem server</code> from <code class=\"language-plaintext highlighter-rouge\">gem help</code> to streamline command output</a>, raising a <a href=\"https://github.com/rubygems/rubygems/pull/8449\">clearer error message when RubyGems fails to activate a dependency</a>, ensuring Bundler correctly <a href=\"https://github.com/rubygems/rubygems/pull/8428\">considers gems under <code class=\"language-plaintext highlighter-rouge\">platform: :windows</code></a> in the Gemfile when running on Windows with ARM architecture, and fixing a resolver issue caused by <a href=\"https://github.com/rubygems/rubygems/pull/8503\">incorrectly defined version ranges</a>.</p>\n\n<p>Some other important accomplishments from the team this month include:</p>\n\n<p><strong>Upgrading Kubernetes cluster to v1.32 and our OpenSearch cluster to v2.17</strong></p>\n\n<ul>\n  <li>We regularly update our infrastructure systems to ensure we\u2019re taking advantage of the latest software features and security patches. This upgrade was scheduled and performed seamlessly without impacting users.</li>\n</ul>\n\n<p><strong>Developing wheels for RubyGems</strong></p>\n\n<ul>\n  <li>A proposal is in progress to introduce <strong>\u201cwheels\u201d for RubyGems</strong>, improving the gem build process until every gem ships precompiled binaries.</li>\n  <li>This is better for security as it eliminates the need to execute code during installation. It\u2019s also a huge improvement for the gem install experience thanks to removing the need for build tools, avoiding compilation errors, and reducing installation time. An outline of the project goals has been published at <a href=\"https://traveling.engineer/posts/goals-for-binary-gems/\">traveling.engineer</a>, and implementation sketches are in the works.</li>\n</ul>\n\n<p><strong>Resolution improvements in Bundler</strong></p>\n\n<ul>\n  <li>A release of Ruby 3.4.2 introduced incorrect gemspec dependencies for <code class=\"language-plaintext highlighter-rouge\">net-smtp</code>, leading to multiple bug reports. To prevent similar issues in the future, Bundler now attempts to automatically <a href=\"https://github.com/rubygems/rubygems/pull/8483\">fix incorrect dependencies in the lockfile</a> whenever possible. When auto-fixing is not possible (e.g., in frozen mode), Bundler now provides clearer error messages to help users resolve the issue.</li>\n  <li>Depfu reported cases where Bundler 2.6 was unexpectedly downgrading dependencies. This was fixed by ensuring <a href=\"https://github.com/rubygems/rubygems/pull/8491\">Bundler properly respects locked versions</a> and re-adds necessary lower bound requirements.</li>\n  <li>Investigating these issues also led to fixing the <a href=\"https://github.com/rubygems/rubygems/pull/8503\">only known issue in our resolver engine (pub_grub)</a>, improving Bundler\u2019s dependency resolution logic.</li>\n</ul>\n\n<h2 id=\"rubygemsorg-news\"><a href=\"http://rubygems.org/\">RubyGems.org</a> News</h2>\n\n<p>The updates made this month to\u00a0<a href=\"http://rubygems.org/\">RubyGems.org</a>\u00a0reflect a strong commitment to improving user experience, enhancing security, and modernizing the platform. Sponsored hosting for\u00a0<a href=\"http://rubygems.org/\">RubyGems.org</a>\u00a0in February was provided by\u00a0<a href=\"https://aws.amazon.com/?ref=rubycentral.org\">AWS</a>, <a href=\"https://www.fastly.com/?ref=rubycentral.org\">Fastly</a> and <a href=\"https://www.datadoghq.com/?ref=rubycentral.org\">Datadog</a>.</p>\n\n<p>The following are highlights of what the team worked on this month:</p>\n\n<p><strong>Fixed API key role creation for Buildkite</strong></p>\n\n<ul>\n  <li>A system test was added to fix an issue where creating an <a href=\"https://github.com/rubygems/rubygems.org/pull/5434\">API Key Role for Buildkite incorrectly assigned a GitHub Actions principal</a> instead of the correct Buildkite principal. This happened because the form defaulted to GitHub OIDC settings, hiding the principal input and preventing users from changing it.</li>\n  <li>The fix removes the unnecessary principal assignment, allowing the correct value to be set automatically for GitHub Actions and Buildkite, ensuring smoother API Key Role creation.</li>\n</ul>\n\n<h2 id=\"rubygems-ecosystem-news\"><strong>RubyGems Ecosystem News</strong></h2>\n\n<p>This is where we highlight exciting updates made to Ruby infrastructure projects that support our RubyGems work.</p>\n\n<h3 id=\"sigstore\">Sigstore</h3>\n\n<p><strong>sigstore-ruby</strong></p>\n\n<ul>\n  <li>The <strong>sigstore-ruby</strong> client is nearly ready for its <strong>0.3.0 release</strong>, bringing <strong>improved spec compliance</strong> and <strong>JRuby support</strong>.</li>\n  <li>Adding JRuby support was particularly challenging, as it required the reimplementation of certain cryptographic operations using Java security APIs instead of relying on the <code class=\"language-plaintext highlighter-rouge\">jruby-openssl</code> gem.</li>\n  <li>You can read more about the development of sigstore-ruby in <a href=\"https://traveling.engineer/posts/2024-in-review/?ref=rubycentral.org#sigstore-ruby\">Sam\u2019s 2024 year in review</a>.</li>\n</ul>\n\n<p><strong>Ecosystem adoption</strong></p>\n\n<ul>\n  <li>A tracker has been launched to monitor sigstore adoption among the most popular gems: <a href=\"https://segiddins.github.io/are-we-attested-yet/\">Are We Attested Yet?</a></li>\n  <li>Currently, 20 of the top gems are shipping attestations, and efforts are ongoing to help more maintainers integrate sigstore signing into their release workflows.</li>\n</ul>\n\n<h2 id=\"thank-you\">Thank you</h2>\n\n<p>A huge thank you to all the contributors to RubyGems and <a href=\"http://rubygems.org/\">RubyGems.org</a> this month! We deeply appreciate your support and dedication.</p>\n\n<h3 id=\"contributors-to-rubygems\">Contributors to RubyGems:</h3>\n\n<ul>\n  <li><a href=\"https://github.com/segiddins\">@segiddins</a> Samuel Giddins</li>\n  <li><a href=\"https://github.com/simi\">@simi</a> Josef \u0160im\u00e1nek</li>\n  <li><a href=\"https://github.com/martinemde\">@martinemde</a> Martin Emde</li>\n  <li><a href=\"https://github.com/deivid-rodriguez\">@deivid-rodriguez</a> David Rodr\u00edguez</li>\n  <li><a href=\"https://github.com/hsbt\">@hsbt</a> Hiroshi Shibata</li>\n  <li><a href=\"https://github.com/johnnyshields\">@johnnyshields</a> Johnny Shields</li>\n  <li><a href=\"https://github.com/Edouard-chin\">@edouard-chin</a> Edouard Chin</li>\n  <li><a href=\"https://github.com/y-yagi\">@y-yagi</a> Y Yagi</li>\n  <li><a href=\"https://github.com/saraid\">@saraid</a> Michael Chui</li>\n</ul>\n\n<h3 id=\"contributors-to-rubygemsorg\">Contributors to <a href=\"http://rubygems.org/\">RubyGems.org</a>:</h3>\n\n<ul>\n  <li><a href=\"https://github.com/martinemde\">@martinemde</a> Martin Emde</li>\n  <li><a href=\"https://github.com/simi\">@simi</a> Josef \u0160im\u00e1nek</li>\n  <li><a href=\"https://github.com/segiddins\">@segiddins</a> Samuel Giddins</li>\n  <li><a href=\"https://github.com/hsbt\">@hsbt</a> Hiroshi Shibata</li>\n  <li><a href=\"https://github.com/yob\">@yob</a> James Healy</li>\n  <li><a href=\"https://github.com/kachick\">@kachick</a> Kenichi Kamiya</li>\n</ul>\n\n<p><em>If we missed you, please let us know so we can include you in our shout out!</em></p>\n\n<hr />\n<p>Learn more about contributing to RubyGems by visiting the RubyGems Contributing Guide. We welcome all kinds of contributions, including bug fixes, feature implementation, writing and updating documentation, and bug triage.</p>"}]}, {"feed_url": "https://conda.discourse.group/c/news/6.rss", "entries": []}, {"feed_url": "https://developer.nvidia.com/blog/tag/nim/feed/", "entries": [{"title": "Accelerated AI Inference with NVIDIA NIM on Azure AI Foundry", "link": "https://developer.nvidia.com/blog/accelerated-ai-inference-with-nvidia-nim-on-azure-ai-foundry/", "published": "2025-05-12T17:59:36", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/05/nim-nemo-retriever-768x432.jpg\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"nim-nemo-retriever\" width=\"768\" />The integration of NVIDIA NIM microservices into Azure AI Foundry marks a major leap forward in enterprise AI development. By combining NIM microservices with..."}, {"title": "LLM Inference Benchmarking Guide: NVIDIA GenAI-Perf and NIM", "link": "https://developer.nvidia.com/blog/llm-performance-benchmarking-measuring-nvidia-nim-performance-with-genai-perf/", "published": "2025-05-06T17:35:39", "summary": "<img alt=\"Decorative image of a datacenter with floating icons overlaid.\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/llm-benchmarking-second-post-featured-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"llm-benchmarking-second-post-featured\" width=\"768\" />This is the second post in the LLM Benchmarking series, which shows how to use GenAI-Perf to benchmark the Meta Llama 3 model when deployed with NVIDIA NIM.\u00a0..."}, {"title": "Spotlight: Personal AI Brings AI Receptionists to Small Business Owners with NVIDIA Riva", "link": "https://developer.nvidia.com/blog/spotlight-personal-ai-brings-ai-receptionists-to-small-business-owners-with-nvidia-riva/", "published": "2025-04-29T22:44:07", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/Personal-AI-NVIDIA-Blog-image-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"Personal AI NVIDIA Blog image\" width=\"768\" />It's 10 p.m. on a Tuesday when the phone rings at the Sapochnick Law Firm, a specialized law practice in San Diego, California. The caller, a client of the..."}, {"title": "NVIDIA NIM Operator 2.0 Boosts AI Deployment with NVIDIA NeMo Microservices Support", "link": "https://developer.nvidia.com/blog/nvidia-nim-operator-2-0-boosts-ai-deployment-with-nvidia-nemo-microservices-support/", "published": "2025-04-29T16:00:00", "summary": "<img alt=\"Decorative image.\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2024/09/nim-operator-featured-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"nim-operator-featured\" width=\"768\" />The first release of NVIDIA NIM Operator simplified the deployment and lifecycle management of inference pipelines for NVIDIA NIM microservices, reducing the..."}, {"title": "Benchmarking Agentic LLM and VLM Reasoning for Gaming with NVIDIA NIM", "link": "https://developer.nvidia.com/blog/benchmarking-agentic-llm-and-vlm-reasoning-for-gaming-with-nvidia-nim/", "published": "2025-04-24T17:00:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/nvidia-nim-microservices-1-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"nvidia-nim-microservices\" width=\"768\" />This is the first post in the LLM Benchmarking series, which shows how to use GenAI-Perf to benchmark the Meta Llama 3 model when deployed with NVIDIA NIM.\u00a0..."}, {"title": "Enhance Your AI Agent with Data Flywheels Using NVIDIA NeMo Microservices", "link": "https://developer.nvidia.com/blog/enhance-your-ai-agent-with-data-flywheels-using-nvidia-nemo-microservices/", "published": "2025-04-23T13:00:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/laptop-desk-typing-768x432.jpg\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"laptop-desk-typing\" width=\"768\" />Enterprise data is constantly changing. This presents significant challenges for maintaining AI system accuracy over time. As organizations increasingly rely on..."}, {"title": "Developing an AI-Powered Tool for Automatic Citation Validation Using NVIDIA NIM", "link": "https://developer.nvidia.com/blog/developing-an-ai-powered-tool-for-automatic-citation-validation-using-nvidia-nim/", "published": "2025-04-16T16:40:50", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/cube-black-background-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"cube-black-background\" width=\"768\" />The accuracy of citations is crucial for maintaining the integrity of both academic and AI-generated content. When citations are inaccurate or wrong, they can..."}, {"title": "NVIDIA Llama Nemotron Ultra Open Model Delivers Groundbreaking Reasoning Accuracy", "link": "https://developer.nvidia.com/blog/nvidia-llama-nemotron-ultra-open-model-delivers-groundbreaking-reasoning-accuracy/", "published": "2025-04-15T18:00:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/reasoning-model-graphic-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"reasoning-model-graphic\" width=\"768\" />AI is no longer just about generating text or images\u2014it\u2019s about deep reasoning, detailed problem-solving, and powerful adaptability for real-world..."}, {"title": "Just Released: NVIDIA Llama Nemotron Ultra as NVIDIA NIM", "link": "https://build.nvidia.com/nvidia/llama-3_1-nemotron-ultra-253b-v1#new_tab", "published": "2025-04-10T18:59:20", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/cloud-icon-inside-cube-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"cloud-icon-inside-cube\" width=\"768\" />Try NVIDIA Llama Nemotron Ultra as an NVIDIA NIM microservice. At only 253B total parameters, it offers reasoning performance that meets or beats top open..."}, {"title": "Curating Biological Findings from Scientific Literature with NVIDIA NIM", "link": "https://developer.nvidia.com/blog/curating-biological-findings-from-scientific-literature-with-nvidia-nim/", "published": "2025-04-10T18:30:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/ai-models-biology-medical-research-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"ai-models-biology-medical-research\" width=\"768\" />Scientific papers are highly heterogeneous, often employing diverse terminologies for the same entities, using varied methodologies to study biological..."}, {"title": "Delivering NVIDIA Accelerated Computing for Enterprise AI Workloads with Rafay", "link": "https://developer.nvidia.com/blog/delivering-nvidia-accelerated-computing-for-enterprise-ai-workloads-with-rafay/", "published": "2025-04-09T20:09:43", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/3d-field-connected-points-768x432.jpg\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"3d-field-connected-points\" width=\"768\" />The worldwide adoption of generative AI has driven massive demand for accelerated compute hardware globally. In enterprises, this has accelerated the deployment..."}, {"title": "Prevent LLM Hallucinations with the Cleanlab Trustworthy Language Model in NVIDIA NeMo Guardrails", "link": "https://developer.nvidia.com/blog/prevent-llm-hallucinations-with-the-cleanlab-trustworthy-language-model-in-nvidia-nemo-guardrails/", "published": "2025-04-09T20:00:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/04/cleanlab-nvidia-logos-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"cleanlab-nvidia-logos\" width=\"768\" />As more enterprises integrate LLMs into their applications, they face a critical challenge: LLMs can generate plausible but incorrect responses, known as..."}, {"title": "LLM Inference Benchmarking: Fundamental Concepts", "link": "https://developer.nvidia.com/blog/llm-benchmarking-fundamental-concepts/", "published": "2025-04-02T17:00:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/data-center-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"data-center\" width=\"768\" />This is the first post in the large language model latency-throughput benchmarking series, which aims to instruct developers on common metrics used for LLM..."}, {"title": "Deploying the NVIDIA AI Blueprint for Cost-Efficient LLM Routing", "link": "https://developer.nvidia.com/blog/deploying-the-nvidia-ai-blueprint-for-cost-efficient-llm-routing/", "published": "2025-03-26T22:01:20", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/llm-routing-1-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"llm-routing\" width=\"768\" />Since the release of ChatGPT in November 2022, the capabilities of large language models (LLMs) have surged, and the number of available models has grown..."}, {"title": "Accelerating the Future of Transportation with SES AI\u2019s NVIDIA-Powered Innovation for Electric Vehicles", "link": "https://developer.nvidia.com/blog/accelerating-the-future-of-transportation-with-ses-ais-nvidia-powered-innovation-for-electric-vehicles/", "published": "2025-03-25T16:00:00", "summary": "<img alt=\"Decorative image of a car at night.\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/hpc-alchemi-bgr-nim-sc24-featured-768x432.jpg\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"hpc-alchemi-bgr-nim-sc24-featured\" width=\"768\" />Electric vehicles (EVs) are transforming transportation, but challenges such as cost, longevity, and range remain barriers to widespread adoption. At the heart..."}, {"title": "Kickstart Your AI Journey on RTX AI PCs and Workstations with NVIDIA NIM Microservices", "link": "https://developer.nvidia.com/blog/kickstart-your-ai-journey-on-rtx-ai-pcs-and-workstations-with-nvidia-nim-microservices/", "published": "2025-03-25T13:00:00", "summary": "<img alt=\"Decorative image of product icons.\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/nvidia-nim-ai-blueprints-featured-768x432.jpg\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"nvidia-nim-ai-blueprints-featured\" width=\"768\" />With emerging use cases such as digital humans, agents, podcasts, images, and video generation, generative AI is changing the way we interact with PCs. This..."}, {"title": "Guiding Generative Molecular Design with Experimental Feedback Using Oracles", "link": "https://developer.nvidia.com/blog/guiding-generative-molecular-design-with-experimental-feedback-using-oracles/", "published": "2025-03-19T15:00:00", "summary": "<img alt=\"An illustration of molecules.\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/molecules-oracles-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"molecules-oracles\" width=\"768\" />Generative chemistry with AI has the potential to revolutionize how scientists approach drug discovery and development, health, and materials science and..."}, {"title": "Seamlessly Scale AI Across Cloud Environments with NVIDIA DGX Cloud Serverless Inference", "link": "https://developer.nvidia.com/blog/seamlessly-scale-ai-across-cloud-environments-with-nvidia-dgx-cloud-serverless-inference/", "published": "2025-03-18T21:22:51", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"431\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/dgx-cloud-serverless-inference-768x431.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"dgx-cloud-serverless-inference\" width=\"768\" />NVIDIA DGX Cloud Serverless Inference is an auto-scaling AI inference solution that enables application deployment with speed and reliability. Powered by NVIDIA..."}, {"title": "Introducing NVIDIA Dynamo, A Low-Latency Distributed Inference Framework for Scaling Reasoning AI Models", "link": "https://developer.nvidia.com/blog/introducing-nvidia-dynamo-a-low-latency-distributed-inference-framework-for-scaling-reasoning-ai-models/", "published": "2025-03-18T17:50:00", "summary": "<img alt=\"\" class=\"webfeedsFeaturedVisual wp-post-image\" height=\"432\" src=\"https://developer-blogs.nvidia.com/wp-content/uploads/2025/03/computer-monitor-data-center-abstract-768x432.png\" style=\"display: block; margin-bottom: 5px; clear: both;\" title=\"computer-monitor-data-center-abstract\" width=\"768\" />NVIDIA announced the release of NVIDIA Dynamo today at GTC 2025. NVIDIA Dynamo is a high-throughput, low-latency open-source inference serving framework for..."}]}]}